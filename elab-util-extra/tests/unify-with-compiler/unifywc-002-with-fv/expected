1/1: Building Test (Test.idr)
LOG 0: MkUR {task = MkUniTask 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}] x 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Nat}] y, uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:3646}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Nothing}, MkFVData {name = y, holeName = "{y:3647}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just x}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [0])], empties = fromList [0], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:3646}", 0), ("{y:3647}", 1)]}, lhsResult = fromList [(y, x)], rhsResult = fromList [], fullResult = fromList [(y, x)], order = [0]}
LOG 0: MkUR {task = MkUniTask 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}] (S x) 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Nat}] y, uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:3684}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Nothing}, MkFVData {name = y, holeName = "{y:3685}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just (Prelude.Types.S x)}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [0])], empties = fromList [0], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:3684}", 0), ("{y:3685}", 1)]}, lhsResult = fromList [(y, Prelude.Types.S x)], rhsResult = fromList [], fullResult = fromList [(y, Prelude.Types.S x)], order = [0]}
LOG 0: MkUR {task = MkUniTask 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}] (S (S x)) 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Nat}] ((fromInteger 2) + y), uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:3722}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Nothing}, MkFVData {name = y, holeName = "{y:3723}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just x}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [0])], empties = fromList [0], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:3722}", 0), ("{y:3723}", 1)]}, lhsResult = fromList [(y, x)], rhsResult = fromList [], fullResult = fromList [(y, x)], order = [0]}
LOG 0: MkUR {task = MkUniTask 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}] (S (S x)) 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Nat}] ((fromInteger 1) + y), uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:3765}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Nothing}, MkFVData {name = y, holeName = "{y:3766}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just (Prelude.Types.S x)}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [0])], empties = fromList [0], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:3765}", 0), ("{y:3766}", 1)]}, lhsResult = fromList [(y, Prelude.Types.S x)], rhsResult = fromList [], fullResult = fromList [(y, Prelude.Types.S x)], order = [0]}
LOG 0: MkUR {task = MkUniTask 2 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}, MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Type}] (Vect x y) 0 [] (Vect (fromInteger 1) String), uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:3809}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just (Prelude.Types.S Prelude.Types.Z)}, MkFVData {name = y, holeName = "{y:3808}", rig = MW, piInfo = ExplicitArg, type = Type, value = Just String}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [])], empties = fromList [], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:3809}", 0), ("{y:3808}", 1)]}, lhsResult = fromList [(x, Prelude.Types.S Prelude.Types.Z), (y, String)], rhsResult = fromList [], fullResult = fromList [(x, Prelude.Types.S Prelude.Types.Z), (y, String)], order = []}
LOG 0: MkUR {task = MkUniTask 2 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}, MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Type}] (Vect (S x) y) 0 [] (Vect (fromInteger 1) String), uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:3852}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just Prelude.Types.Z}, MkFVData {name = y, holeName = "{y:3851}", rig = MW, piInfo = ExplicitArg, type = Type, value = Just String}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [])], empties = fromList [], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:3852}", 0), ("{y:3851}", 1)]}, lhsResult = fromList [(x, Prelude.Types.Z), (y, String)], rhsResult = fromList [], fullResult = fromList [(x, Prelude.Types.Z), (y, String)], order = []}
LOG 0: MkUR {task = MkUniTask 2 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}, MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Type}] (Vect ((fromInteger 1) + x) y) 0 [] (Vect (fromInteger 1) String), uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:3895}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just Prelude.Types.Z}, MkFVData {name = y, holeName = "{y:3894}", rig = MW, piInfo = ExplicitArg, type = Type, value = Just String}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [])], empties = fromList [], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:3895}", 0), ("{y:3894}", 1)]}, lhsResult = fromList [(x, Prelude.Types.Z), (y, String)], rhsResult = fromList [], fullResult = fromList [(x, Prelude.Types.Z), (y, String)], order = []}
LOG 0: MkUR {task = MkUniTask 2 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}, MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Type}] (Vect x y) 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just z, type = Nat}] (Vect (S z) String), uniDg = MkDG {freeVars = 3, fvData = [MkFVData {name = x, holeName = "{x:3949}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just (Prelude.Types.S z)}, MkFVData {name = y, holeName = "{y:3948}", rig = MW, piInfo = ExplicitArg, type = Type, value = Just String}, MkFVData {name = z, holeName = "{z:3950}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Nothing}], fvDeps = [(fromList [], fromList [2]), (fromList [], fromList []), (fromList [], fromList [])], empties = fromList [2], nameToId = fromList [(x, 0), (y, 1), (z, 2)], holeToId = fromList [("{x:3949}", 0), ("{y:3948}", 1), ("{z:3950}", 2)]}, lhsResult = fromList [(x, Prelude.Types.S z), (y, String)], rhsResult = fromList [], fullResult = fromList [(x, Prelude.Types.S z), (y, String)], order = [2]}
LOG 0: MkUR {task = MkUniTask 2 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}, MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Type}] (Vect x y) 1 [MkArg {count = MW, piInfo = ExplicitArg, name = Just z, type = Type}] (Vect (fromInteger 10) (List z)), uniDg = MkDG {freeVars = 3, fvData = [MkFVData {name = x, holeName = "{x:4002}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S Prelude.Types.Z))))))))))}, MkFVData {name = y, holeName = "{y:4001}", rig = MW, piInfo = ExplicitArg, type = Type, value = Just (Prelude.Basics.List z)}, MkFVData {name = z, holeName = "{z:4003}", rig = MW, piInfo = ExplicitArg, type = Type, value = Nothing}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [2]), (fromList [], fromList [])], empties = fromList [2], nameToId = fromList [(x, 0), (y, 1), (z, 2)], holeToId = fromList [("{x:4002}", 0), ("{y:4001}", 1), ("{z:4003}", 2)]}, lhsResult = fromList [(x, Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S Prelude.Types.Z)))))))))), (y, Prelude.Basics.List z)], rhsResult = fromList [], fullResult = fromList [(x, Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S Prelude.Types.Z)))))))))), (y, Prelude.Basics.List z)], order = [2]}
LOG 0: MkUR {task = MkUniTask 2 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}, MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Vect x Nat}] (MkPair x y) 0 [] (MkPair (the Nat (fromInteger 0)) (the (Vect (fromInteger 0) Nat) Nil)), uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:4054}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just Prelude.Types.Z}, MkFVData {name = y, holeName = "{y:4053}", rig = MW, piInfo = ExplicitArg, type = Data.Vect.Vect Prelude.Types.Z Prelude.Types.Nat, value = Just (Data.Vect.Nil {elem = Prelude.Types.Nat})}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [])], empties = fromList [], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:4054}", 0), ("{y:4053}", 1)]}, lhsResult = fromList [(x, Prelude.Types.Z), (y, Data.Vect.Nil {elem = Prelude.Types.Nat})], rhsResult = fromList [], fullResult = fromList [(x, Prelude.Types.Z), (y, Data.Vect.Nil {elem = Prelude.Types.Nat})], order = []}
LOG 0: MkUR {task = MkUniTask 2 [MkArg {count = MW, piInfo = ExplicitArg, name = Just x, type = Nat}, MkArg {count = MW, piInfo = ExplicitArg, name = Just y, type = Vect x Nat}] (MkPair x y) 0 [] (MkPair (the Nat (fromInteger 1)) (the (Vect (fromInteger 1) Nat) ((fromInteger 10) :: Nil))), uniDg = MkDG {freeVars = 2, fvData = [MkFVData {name = x, holeName = "{x:4108}", rig = MW, piInfo = ExplicitArg, type = Prelude.Types.Nat, value = Just (Prelude.Types.S Prelude.Types.Z)}, MkFVData {name = y, holeName = "{y:4107}", rig = MW, piInfo = ExplicitArg, type = Data.Vect.Vect (Prelude.Types.S Prelude.Types.Z) Prelude.Types.Nat, value = Just (Data.Vect.(::) {len = Prelude.Types.Z} {elem = Prelude.Types.Nat} (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S Prelude.Types.Z)))))))))) (Data.Vect.Nil {elem = Prelude.Types.Nat}))}], fvDeps = [(fromList [], fromList []), (fromList [], fromList [])], empties = fromList [], nameToId = fromList [(x, 0), (y, 1)], holeToId = fromList [("{x:4108}", 0), ("{y:4107}", 1)]}, lhsResult = fromList [(x, Prelude.Types.S Prelude.Types.Z), (y, Data.Vect.(::) {len = Prelude.Types.Z} {elem = Prelude.Types.Nat} (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S Prelude.Types.Z)))))))))) (Data.Vect.Nil {elem = Prelude.Types.Nat}))], rhsResult = fromList [], fullResult = fromList [(x, Prelude.Types.S Prelude.Types.Z), (y, Data.Vect.(::) {len = Prelude.Types.Z} {elem = Prelude.Types.Nat} (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S (Prelude.Types.S Prelude.Types.Z)))))))))) (Data.Vect.Nil {elem = Prelude.Types.Nat}))], order = []}
