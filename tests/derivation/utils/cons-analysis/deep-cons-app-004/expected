1/2: Building ConsApps (ConsApps.idr)
2/2: Building Infra (Infra.idr)
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    []
LOG gen.auto.deep-cons-app:0: original expression: XX (Right Unit)
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   []
LOG gen.auto.deep-cons-app:0: bind expression: XX (Right Unit)
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    [a]
LOG gen.auto.deep-cons-app:0: original expression: XX (Right a)
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   [a]
LOG gen.auto.deep-cons-app:0: bind expression: XX (Right a0)
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    []
LOG gen.auto.deep-cons-app:0: original expression: XX (Right MkUnit)
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   []
LOG gen.auto.deep-cons-app:0: bind expression: XX (Right MkUnit)
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    []
LOG gen.auto.deep-cons-app:0: original expression: XX (Right [])
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   []
LOG gen.auto.deep-cons-app:0: bind expression: XX (Right [])
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    [n, a, b]
LOG gen.auto.deep-cons-app:0: original expression: XX (Left (MC (S Z) (MC (S (S Z)) (MC (S (S (S Z))) MM))))
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   []
LOG gen.auto.deep-cons-app:0: bind expression: XX (Left (MC (S Z) (MC (S (S Z)) (MC (S (S (S Z))) MM))))
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    [n, a, b]
LOG gen.auto.deep-cons-app:0: original expression: XX (Left (MC (S Z) (MC (S (S n)) (MC (S (S (S Z))) MM))))
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   [n]
LOG gen.auto.deep-cons-app:0: bind expression: XX (Left (MC (S Z) (MC (S (S n0)) (MC (S (S (S Z))) MM))))
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    []
LOG gen.auto.deep-cons-app:0: original expression: XX (Left (MC (S Z) (MC (S (S Z)) (MC (S (S (S Z))) MM))))
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   []
LOG gen.auto.deep-cons-app:0: bind expression: XX (Left (MC (S Z) (MC (S (S Z)) (MC (S (S (S Z))) MM))))
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    [n, a, b, c]
LOG gen.auto.deep-cons-app:0: original expression: XX (Left (MC a (MC b (MC c MM))))
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   [a, b, c]
LOG gen.auto.deep-cons-app:0: bind expression: XX (Left (MC a0 (MC b1 (MC c2 MM))))
LOG gen.auto.deep-cons-app:0: 
LOG gen.auto.deep-cons-app:0: given free names:    [n, a, b, c]
LOG gen.auto.deep-cons-app:0: original expression: XX (Left (MC a (MC Z (MC c MM))))
LOG gen.auto.deep-cons-app:0: ------------------------
LOG gen.auto.deep-cons-app:0: applied names:   [a, c]
LOG gen.auto.deep-cons-app:0: bind expression: XX (Left (MC a0 (MC Z (MC c1 MM))))
