1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty Nat)} -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty String)} -> Gen MaybeEmpty (b : Bool ** D b)
LOG deptycheck.derive.least-effort:7: DerivedGen.D[] JJ - used final order: [#0 (b), #1, #2]
LOG deptycheck.derive.least-effort:7: DerivedGen.D[] FN - used final order: [#2, #1]
LOG deptycheck.derive.least-effort:7: DerivedGen.D[] TL - used final order: [#0]
LOG deptycheck.derive.least-effort:7: DerivedGen.D[] TR - used final order: [#2, #1]
LOG deptycheck.derive.least-effort:7: Prelude.Basics.Bool[] False - used final order: []
LOG deptycheck.derive.least-effort:7: Prelude.Basics.Bool[] True - used final order: []
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<Prelude.Types.Nat>[]")
      (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<^prim^.String>[]")
      (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ primVal (PrT StringType))
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.D>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (   var "Builtin.DPair.DPair"
                                   .$ var "Prelude.Basics.Bool"
                                   .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                       .=> var "DerivedGen.D" .$ var "{arg:3}"))
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Prelude.Basics.Bool>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Basics.Bool"
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.D>[]"
              [    var "<DerivedGen.D>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.JJ>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Basics.Bool"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                                      .=> var "DerivedGen.D" .$ var "{arg:3}"))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.FN>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Basics.Bool"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                                      .=> var "DerivedGen.D" .$ var "{arg:3}"))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.TL>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Basics.Bool"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                                      .=> var "DerivedGen.D" .$ var "{arg:3}"))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.TR>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Basics.Bool"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                                      .=> var "DerivedGen.D" .$ var "{arg:3}"))
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.JJ>>"
                             [    var "<<DerivedGen.JJ>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.JJ (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Basics.Bool>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "b") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                              .$ (    MkArg MW ExplicitArg (Just "{arg:4}") implicitFalse
                                                  .=>    var ">>="
                                                      .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                      .$ (    MkArg MW ExplicitArg (Just "{arg:5}") implicitFalse
                                                          .=>    var "Prelude.pure"
                                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                              .$ (   var "Builtin.DPair.MkDPair"
                                                                  .$ implicitTrue
                                                                  .$ (   var "DerivedGen.JJ"
                                                                      .! ("b", var "b")
                                                                      .$ var "{arg:4}"
                                                                      .$ var "{arg:5}"))))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.FN>>"
                             [    var "<<DerivedGen.FN>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.FN (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.D>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:1}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:1}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "b" .$ bindVar "{arg:6}"
                                                      .=    var ">>="
                                                         .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                         .$ (    MkArg MW ExplicitArg (Just "{arg:7}") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (   var "Builtin.DPair.MkDPair"
                                                                     .$ implicitTrue
                                                                     .$ (   var "DerivedGen.FN"
                                                                         .! ("b", implicitTrue)
                                                                         .$ var "{arg:7}"
                                                                         .$ var "{arg:6}")))
                                                    ]
                                                }))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.TL>>"
                             [    var "<<DerivedGen.TL>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.TL (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{arg:8}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "DerivedGen.TL" .$ var "{arg:8}"))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.TR>>"
                             [    var "<<DerivedGen.TR>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.TR (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.D>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:1}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:1}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "b" .$ bindVar "{arg:9}"
                                                      .=    var ">>="
                                                         .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^")
                                                         .$ (    MkArg MW ExplicitArg (Just "{arg:10}") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (   var "Builtin.DPair.MkDPair"
                                                                     .$ implicitTrue
                                                                     .$ (   var "DerivedGen.TR"
                                                                         .! ("b", implicitTrue)
                                                                         .$ var "{arg:10}"
                                                                         .$ var "{arg:9}")))
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.D[] (dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.oneOf"
                                        .! ("em", var "MaybeEmpty")
                                        .$ (   var "::"
                                            .$ (var "<<DerivedGen.JJ>>" .$ var "^fuel_arg^")
                                            .$ (var "::" .$ (var "<<DerivedGen.TL>>" .$ var "^fuel_arg^") .$ var "Nil")))
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.D[] (non-dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<DerivedGen.JJ>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<DerivedGen.FN>>" .$ var "^sub^fuel_arg^"))
                                                .$ (   var "::"
                                                    .$ (   var "Builtin.MkPair"
                                                        .$ var "Data.Nat1.one"
                                                        .$ (var "<<DerivedGen.TL>>" .$ var "^fuel_arg^"))
                                                    .$ (   var "::"
                                                        .$ (   var "Builtin.MkPair"
                                                            .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                            .$ (var "<<DerivedGen.TR>>" .$ var "^sub^fuel_arg^"))
                                                        .$ var "Nil")))))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Prelude.Basics.Bool>[]"
              [    var "<Prelude.Basics.Bool>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Prelude.Basics.False>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ var "Prelude.Basics.Bool"
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Prelude.Basics.True>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ var "Prelude.Basics.Bool"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Prelude.Basics.False>>"
                             [    var "<<Prelude.Basics.False>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Basics.False (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Prelude.Basics.False")
                             ]
                         , IDef
                             emptyFC
                             "<<Prelude.Basics.True>>"
                             [    var "<<Prelude.Basics.True>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Basics.True (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Prelude.Basics.True")
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Prelude.Basics.Bool[] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.oneOf"
                             .! ("em", var "MaybeEmpty")
                             .$ (   var "::"
                                 .$ (var "<<Prelude.Basics.False>>" .$ var "^fuel_arg^")
                                 .$ (var "::" .$ (var "<<Prelude.Basics.True>>" .$ var "^fuel_arg^") .$ var "Nil")))
                     }
              ]
          ]
      , scope = var "<DerivedGen.D>[]" .$ var "^outmost-fuel^"
      }

