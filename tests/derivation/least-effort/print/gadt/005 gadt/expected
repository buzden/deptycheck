1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty Nat)} -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty String)} -> Gen MaybeEmpty (b : Bool ** D b)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW AutoImplicit external^<Prelude.Types.Nat>[] : IPi.  (MW ExplicitArg {arg:1} : IVar Data.Fuel.Fuel)
                                                            -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                    $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                                    $ IVar Prelude.Types.Nat))
    => (MW AutoImplicit external^<^prim^.String>[] : IPi.  (MW ExplicitArg {arg:2} : IVar Data.Fuel.Fuel)
                                                        -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                                $ IPrimVal String))
    => ILocal (IApp. IVar <DerivedGen.D>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.D>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Basics.Bool
                                         $ (ILam.  (MW ExplicitArg {arg:3} : IVar Prelude.Basics.Bool)
                                                => (IApp. IVar DerivedGen.D
                                                        $ IVar {arg:3}))))))
         IClaim MW
                Export
                []
                (MkTy <Prelude.Basics.Bool>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ IVar Prelude.Basics.Bool)))
         IDef <DerivedGen.D>[]
              [ PatClause (IApp. IVar <DerivedGen.D>[] $ IBindVar ^fuel_arg^)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal DerivedGen.D[] (dry fuel))
                                                          $ (IApp. INamedApp (IVar Test.DepTyCheck.Gen.oneOf)
                                                                             em
                                                                             (IVar MaybeEmpty)
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar <<DerivedGen.JJ>>
                                                                               $ IVar Data.Fuel.Dry)
                                                                        $ (IApp. IVar ::
                                                                               $ (IApp. IVar <<DerivedGen.TL>>
                                                                                      $ IVar Data.Fuel.Dry)
                                                                               $ IVar Nil))))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal DerivedGen.D[] (spend fuel))
                                                          $ (IApp. IVar Test.DepTyCheck.Gen.frequency
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar Builtin.MkPair
                                                                               $ IVar Data.Nat.Pos.one
                                                                               $ (IApp. IVar <<DerivedGen.JJ>>
                                                                                      $ IVar ^fuel_arg^))
                                                                        $ (IApp. IVar ::
                                                                               $ (IApp. IVar Builtin.MkPair
                                                                                      $ (IApp. IVar Deriving.DepTyCheck.Util.Reflection.leftDepth
                                                                                             $ IVar ^sub^fuel_arg^)
                                                                                      $ (IApp. IVar <<DerivedGen.FN>>
                                                                                             $ IVar ^sub^fuel_arg^))
                                                                               $ (IApp. IVar ::
                                                                                      $ (IApp. IVar Builtin.MkPair
                                                                                             $ IVar Data.Nat.Pos.one
                                                                                             $ (IApp. IVar <<DerivedGen.TL>>
                                                                                                    $ IVar ^fuel_arg^))
                                                                                      $ (IApp. IVar ::
                                                                                             $ (IApp. IVar Builtin.MkPair
                                                                                                    $ (IApp. IVar Deriving.DepTyCheck.Util.Reflection.leftDepth
                                                                                                           $ IVar ^sub^fuel_arg^)
                                                                                                    $ (IApp. IVar <<DerivedGen.TR>>
                                                                                                           $ IVar ^sub^fuel_arg^))
                                                                                             $ IVar Nil)))))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.JJ>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Basics.Bool
                                                            $ (ILam.  (MW ExplicitArg {arg:3} : IVar Prelude.Basics.Bool)
                                                                   => (IApp. IVar DerivedGen.D
                                                                           $ IVar {arg:3}))))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.FN>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Basics.Bool
                                                            $ (ILam.  (MW ExplicitArg {arg:3} : IVar Prelude.Basics.Bool)
                                                                   => (IApp. IVar DerivedGen.D
                                                                           $ IVar {arg:3}))))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.TL>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Basics.Bool
                                                            $ (ILam.  (MW ExplicitArg {arg:3} : IVar Prelude.Basics.Bool)
                                                                   => (IApp. IVar DerivedGen.D
                                                                           $ IVar {arg:3}))))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.TR>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Basics.Bool
                                                            $ (ILam.  (MW ExplicitArg {arg:3} : IVar Prelude.Basics.Bool)
                                                                   => (IApp. IVar DerivedGen.D
                                                                           $ IVar {arg:3}))))))
                            IDef <<DerivedGen.JJ>>
                                 [ PatClause (IApp. IVar <<DerivedGen.JJ>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.JJ (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <Prelude.Basics.Bool>[]
                                                                $ IVar ^outmost-fuel^)
                                                         $ (ILam.  (MW ExplicitArg b : Implicit False)
                                                                => (IApp. IVar >>=
                                                                        $ (IApp. IVar external^<Prelude.Types.Nat>[]
                                                                               $ IVar ^outmost-fuel^)
                                                                        $ (ILam.  (MW ExplicitArg ^bnd^{arg:4} : Implicit False)
                                                                               => (IApp. IVar >>=
                                                                                       $ (IApp. IVar external^<Prelude.Types.Nat>[]
                                                                                              $ IVar ^outmost-fuel^)
                                                                                       $ (ILam.  (MW ExplicitArg ^bnd^{arg:5} : Implicit False)
                                                                                              => (IApp. INamedApp (IVar Prelude.pure)
                                                                                                                  f
                                                                                                                  (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                                       $ Implicit True)
                                                                                                      $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                             $ Implicit True
                                                                                                             $ (IApp. INamedApp (IVar DerivedGen.JJ)
                                                                                                                                b
                                                                                                                                (IVar b)
                                                                                                                    $ IVar ^bnd^{arg:4}
                                                                                                                    $ IVar ^bnd^{arg:5})))))))))) ]
                            IDef <<DerivedGen.FN>>
                                 [ PatClause (IApp. IVar <<DerivedGen.FN>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.FN (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <DerivedGen.D>[]
                                                                $ IVar ^cons_fuel^)
                                                         $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                => ICase (IVar {lamc:0})
                                                                         (Implicit False)
                                                                         [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                          $ IBindVar b
                                                                                          $ IBindVar ^bnd^{arg:6})
                                                                                     (IApp. IVar >>=
                                                                                          $ (IApp. IVar external^<Prelude.Types.Nat>[]
                                                                                                 $ IVar ^outmost-fuel^)
                                                                                          $ (ILam.  (MW ExplicitArg ^bnd^{arg:7} : Implicit False)
                                                                                                 => (IApp. INamedApp (IVar Prelude.pure)
                                                                                                                     f
                                                                                                                     (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                                          $ Implicit True)
                                                                                                         $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                                $ Implicit True
                                                                                                                $ (IApp. INamedApp (IVar DerivedGen.FN)
                                                                                                                                   b
                                                                                                                                   (IVar b)
                                                                                                                       $ IVar ^bnd^{arg:7}
                                                                                                                       $ IVar ^bnd^{arg:6}))))) ]))) ]
                            IDef <<DerivedGen.TL>>
                                 [ PatClause (IApp. IVar <<DerivedGen.TL>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.TL (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar external^<^prim^.String>[]
                                                                $ IVar ^outmost-fuel^)
                                                         $ (ILam.  (MW ExplicitArg ^bnd^{arg:8} : Implicit False)
                                                                => (IApp. INamedApp (IVar Prelude.pure)
                                                                                    f
                                                                                    (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                         $ Implicit True)
                                                                        $ (IApp. IVar Builtin.DPair.MkDPair
                                                                               $ Implicit True
                                                                               $ (IApp. IVar DerivedGen.TL
                                                                                      $ IVar ^bnd^{arg:8})))))) ]
                            IDef <<DerivedGen.TR>>
                                 [ PatClause (IApp. IVar <<DerivedGen.TR>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.TR (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <DerivedGen.D>[]
                                                                $ IVar ^cons_fuel^)
                                                         $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                => ICase (IVar {lamc:0})
                                                                         (Implicit False)
                                                                         [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                          $ IBindVar b
                                                                                          $ IBindVar ^bnd^{arg:9})
                                                                                     (IApp. IVar >>=
                                                                                          $ (IApp. IVar external^<^prim^.String>[]
                                                                                                 $ IVar ^outmost-fuel^)
                                                                                          $ (ILam.  (MW ExplicitArg ^bnd^{arg:10} : Implicit False)
                                                                                                 => (IApp. INamedApp (IVar Prelude.pure)
                                                                                                                     f
                                                                                                                     (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                                          $ Implicit True)
                                                                                                         $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                                $ Implicit True
                                                                                                                $ (IApp. INamedApp (IVar DerivedGen.TR)
                                                                                                                                   b
                                                                                                                                   (IVar b)
                                                                                                                       $ IVar ^bnd^{arg:10}
                                                                                                                       $ IVar ^bnd^{arg:9}))))) ]))) ] ]
         IDef <Prelude.Basics.Bool>[]
              [ PatClause (IApp. IVar <Prelude.Basics.Bool>[]
                               $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.label
                                       $ (IApp. IVar fromString
                                              $ IPrimVal Prelude.Basics.Bool[] (non-recursive))
                                       $ (IApp. INamedApp (IVar Test.DepTyCheck.Gen.oneOf)
                                                          em
                                                          (IVar MaybeEmpty)
                                              $ (IApp. IVar ::
                                                     $ (IApp. IVar <<Prelude.Basics.False>>
                                                            $ IVar ^fuel_arg^)
                                                     $ (IApp. IVar ::
                                                            $ (IApp. IVar <<Prelude.Basics.True>>
                                                                   $ IVar ^fuel_arg^)
                                                            $ IVar Nil)))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Basics.False>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ IVar Prelude.Basics.Bool)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Basics.True>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ IVar Prelude.Basics.Bool)))
                            IDef <<Prelude.Basics.False>>
                                 [ PatClause (IApp. IVar <<Prelude.Basics.False>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal Prelude.Basics.False (orders))
                                                  $ (IApp. INamedApp (IVar Prelude.pure)
                                                                     f
                                                                     (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                          $ Implicit True)
                                                         $ IVar Prelude.Basics.False)) ]
                            IDef <<Prelude.Basics.True>>
                                 [ PatClause (IApp. IVar <<Prelude.Basics.True>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal Prelude.Basics.True (orders))
                                                  $ (IApp. INamedApp (IVar Prelude.pure)
                                                                     f
                                                                     (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                          $ Implicit True)
                                                         $ IVar Prelude.Basics.True)) ] ]
