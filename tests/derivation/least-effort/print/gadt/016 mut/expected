1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> Gen MaybeEmpty ListNat
LOG deptycheck.derive.least-effort:7: DerivedGen.ListNat[] Nil - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.ListNat[] (::) - used final order: [#2]
LOG deptycheck.derive.least-effort:7: DerivedGen.Constraint[] Empty - used final order: [#0 (e)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Constraint[] NonEmpty - used final order: [#2 (prf), #3 (e)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Constraint[] Any1 - used final order: [#0 (xs), #1 (e)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Constraint[] Any2 - used final order: [#0 (xs), #1 (e)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Constraint[] Any3 - used final order: [#0 (xs), #1 (e)]
LOG deptycheck.derive.least-effort:7: Prelude.Types.Nat[] Z - used final order: []
LOG deptycheck.derive.least-effort:7: Prelude.Types.Nat[] S - used final order: [#0]
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.ListNat>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.ListNat"
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Constraint>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (   var "Builtin.DPair.DPair"
                                   .$ var "Prelude.Types.Nat"
                                   .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                       .=>    var "Builtin.DPair.DPair"
                                           .$ var "DerivedGen.ListNat"
                                           .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.ListNat")
                                               .=> var "DerivedGen.Constraint" .$ var "{arg:1}" .$ var "{arg:2}")))
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Prelude.Types.Nat>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.ListNat>[]"
              [    var "<DerivedGen.ListNat>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Nil>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ var "DerivedGen.ListNat"
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.(::)>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ var "DerivedGen.ListNat"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.Nil>>"
                             [    var "<<DerivedGen.Nil>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Nil (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "DerivedGen.Nil")
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.(::)>>"
                             [    var "<<DerivedGen.(::)>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.(::) (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.Constraint>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:1}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:1}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [       var "Builtin.DPair.MkDPair"
                                                         .$ bindVar "x"
                                                         .$ (var "Builtin.DPair.MkDPair" .$ bindVar "xs" .$ bindVar "{conArg:1}")
                                                      .=    var "Prelude.pure"
                                                         .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                         .$ (var "DerivedGen.(::)" .$ implicitTrue .$ implicitTrue .@ var "{conArg:1}")
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.ListNat[] (dry fuel)"))
                                    .$ (var "<<DerivedGen.Nil>>" .$ var "^fuel_arg^")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.ListNat[] (non-dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<DerivedGen.Nil>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<DerivedGen.(::)>>" .$ var "^sub^fuel_arg^"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.Constraint>[]"
              [    var "<DerivedGen.Constraint>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Empty>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Types.Nat"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                      .=>    var "Builtin.DPair.DPair"
                                                          .$ var "DerivedGen.ListNat"
                                                          .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.ListNat")
                                                              .=> var "DerivedGen.Constraint" .$ var "{arg:1}" .$ var "{arg:2}")))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.NonEmpty>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Types.Nat"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                      .=>    var "Builtin.DPair.DPair"
                                                          .$ var "DerivedGen.ListNat"
                                                          .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.ListNat")
                                                              .=> var "DerivedGen.Constraint" .$ var "{arg:1}" .$ var "{arg:2}")))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Any1>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Types.Nat"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                      .=>    var "Builtin.DPair.DPair"
                                                          .$ var "DerivedGen.ListNat"
                                                          .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.ListNat")
                                                              .=> var "DerivedGen.Constraint" .$ var "{arg:1}" .$ var "{arg:2}")))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Any2>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Types.Nat"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                      .=>    var "Builtin.DPair.DPair"
                                                          .$ var "DerivedGen.ListNat"
                                                          .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.ListNat")
                                                              .=> var "DerivedGen.Constraint" .$ var "{arg:1}" .$ var "{arg:2}")))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Any3>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Types.Nat"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                      .=>    var "Builtin.DPair.DPair"
                                                          .$ var "DerivedGen.ListNat"
                                                          .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.ListNat")
                                                              .=> var "DerivedGen.Constraint" .$ var "{arg:1}" .$ var "{arg:2}")))
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.Empty>>"
                             [    var "<<DerivedGen.Empty>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Empty (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "e") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (   var "Builtin.DPair.MkDPair"
                                                  .$ implicitTrue
                                                  .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "DerivedGen.Empty" .! ("e", var "e"))))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.NonEmpty>>"
                             [    var "<<DerivedGen.NonEmpty>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.NonEmpty (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.Constraint>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:1}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:1}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [       var "Builtin.DPair.MkDPair"
                                                         .$ bindVar "x"
                                                         .$ (var "Builtin.DPair.MkDPair" .$ bindVar "xs" .$ bindVar "prf")
                                                      .=    var ">>="
                                                         .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                         .$ (    MkArg MW ExplicitArg (Just "e") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (   var "Builtin.DPair.MkDPair"
                                                                     .$ implicitTrue
                                                                     .$ (   var "Builtin.DPair.MkDPair"
                                                                         .$ implicitTrue
                                                                         .$ (   var "DerivedGen.NonEmpty"
                                                                             .! ("xs", implicitTrue)
                                                                             .! ("x", implicitTrue)
                                                                             .! ("prf", var "prf")
                                                                             .! ("e", var "e")))))
                                                    ]
                                                }))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.Any1>>"
                             [    var "<<DerivedGen.Any1>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Any1 (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.ListNat>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "xs") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                              .$ (    MkArg MW ExplicitArg (Just "e") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                          .$ implicitTrue
                                                          .$ (   var "Builtin.DPair.MkDPair"
                                                              .$ implicitTrue
                                                              .$ (var "DerivedGen.Any1" .! ("xs", var "xs") .! ("e", var "e")))))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.Any2>>"
                             [    var "<<DerivedGen.Any2>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Any2 (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.ListNat>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "xs") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                              .$ (    MkArg MW ExplicitArg (Just "e") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                          .$ implicitTrue
                                                          .$ (   var "Builtin.DPair.MkDPair"
                                                              .$ implicitTrue
                                                              .$ (var "DerivedGen.Any2" .! ("xs", var "xs") .! ("e", var "e")))))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.Any3>>"
                             [    var "<<DerivedGen.Any3>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Any3 (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.ListNat>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "xs") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                              .$ (    MkArg MW ExplicitArg (Just "e") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                          .$ implicitTrue
                                                          .$ (   var "Builtin.DPair.MkDPair"
                                                              .$ implicitTrue
                                                              .$ (var "DerivedGen.Any3" .! ("xs", var "xs") .! ("e", var "e")))))))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.Constraint[] (dry fuel)"))
                                    .$ (var "<<DerivedGen.Empty>>" .$ var "^fuel_arg^")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.Constraint[] (non-dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<DerivedGen.Empty>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<DerivedGen.NonEmpty>>" .$ var "^sub^fuel_arg^"))
                                                .$ (   var "::"
                                                    .$ (   var "Builtin.MkPair"
                                                        .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                        .$ (var "<<DerivedGen.Any1>>" .$ var "^sub^fuel_arg^"))
                                                    .$ (   var "::"
                                                        .$ (   var "Builtin.MkPair"
                                                            .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                            .$ (var "<<DerivedGen.Any2>>" .$ var "^sub^fuel_arg^"))
                                                        .$ (   var "::"
                                                            .$ (   var "Builtin.MkPair"
                                                                .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                                .$ (var "<<DerivedGen.Any3>>" .$ var "^sub^fuel_arg^"))
                                                            .$ var "Nil"))))))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Prelude.Types.Nat>[]"
              [    var "<Prelude.Types.Nat>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Prelude.Types.Z>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ var "Prelude.Types.Nat"
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Prelude.Types.S>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ var "Prelude.Types.Nat"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Prelude.Types.Z>>"
                             [    var "<<Prelude.Types.Z>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Types.Z (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Prelude.Types.Z")
                             ]
                         , IDef
                             emptyFC
                             "<<Prelude.Types.S>>"
                             [    var "<<Prelude.Types.S>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Types.S (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{arg:3}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Prelude.Types.S" .$ var "{arg:3}")))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Prelude.Types.Nat[] (dry fuel)"))
                                    .$ (var "<<Prelude.Types.Z>>" .$ var "^fuel_arg^")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Prelude.Types.Nat[] (non-dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<Prelude.Types.Z>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Prelude.Types.S>>" .$ var "^sub^fuel_arg^"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          ]
      , scope = var "<DerivedGen.ListNat>[]" .$ var "^outmost-fuel^"
      }

