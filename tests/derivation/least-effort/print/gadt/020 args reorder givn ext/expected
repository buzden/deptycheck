1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> (m : Nat) -> (g : Fin m) -> (f : Fin n) -> Gen MaybeEmpty (Z f g))} -> Gen MaybeEmpty X
LOG deptycheck.derive.least-effort:7: DerivedGen.X[] MkX - used final order: [#0]
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<DerivedGen.Z>[0, 1, 2, 3]")
      (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fuel.Fuel")
       .-> MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat")
       .-> MkArg MW ExplicitArg (Just "g") (var "Data.Fin.Fin" .$ var "m")
       .-> MkArg MW ImplicitArg (Just "n") (var "Prelude.Types.Nat")
       .-> MkArg MW ExplicitArg (Just "f") (var "Data.Fin.Fin" .$ var "n")
       .->    var "Test.DepTyCheck.Gen.Gen"
           .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
           .$ (var "DerivedGen.Z" .! ("m", var "m") .! ("n", var "n") .$ var "f" .$ var "g"))
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.X>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.X>[]"
              [    var "<DerivedGen.X>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkX>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkX>>"
                             [    var "<<DerivedGen.MkX>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkX (orders)"))
                                  .$ (   var ">>="
                                      .$ (   var "external^<DerivedGen.Z>[0, 1, 2, 3]"
                                          .$ var "^outmost-fuel^"
                                          .$ (var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ var "Prelude.Types.Z"))
                                          .$ (   var "Data.Fin.FS"
                                              .! ("k", var "Prelude.Types.S" .$ var "Prelude.Types.Z")
                                              .$ (var "Data.Fin.FZ" .! ("k", var "Prelude.Types.Z")))
                                          .! ( "n"
                                             , var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ var "Prelude.Types.Z"))
                                             )
                                          .$ (var "Data.Fin.FZ" .! ("k", var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ var "Prelude.Types.Z"))))
                                      .$ (    MkArg MW ExplicitArg (Just "{arg:2}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "DerivedGen.MkX" .$ var "{arg:2}")))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[] (non-spending)"))
                         .$ (var "<<DerivedGen.MkX>>" .$ var "^fuel_arg^")
                     }
              ]
          ]
      , scope = var "<DerivedGen.X>[]" .$ var "^outmost-fuel^"
      }

