1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (a : Nat) -> (b : Nat) -> Gen MaybeEmpty (EqualN a b)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<a> : Implicit True)
    => (MW ExplicitArg outer^<b> : Implicit True)
    => ILocal (IApp. IVar <DerivedGen.EqualN>[0, 1]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<a>
                   $ IVar outer^<b>)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.EqualN>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:1} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:2} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar DerivedGen.EqualN
                                         $ IVar {arg:1}
                                         $ IVar {arg:2}))))
         IDef <DerivedGen.EqualN>[0, 1]
              [ PatClause (IApp. IVar <DerivedGen.EqualN>[0, 1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<{arg:1}>
                               $ IBindVar inter^<{arg:2}>)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.label
                                       $ (IApp. IVar fromString
                                              $ IPrimVal DerivedGen.EqualN[0, 1] (non-recursive))
                                       $ (IApp. IVar <<DerivedGen.ReflN>>
                                              $ IVar ^fuel_arg^
                                              $ IVar inter^<{arg:1}>
                                              $ IVar inter^<{arg:2}>)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.ReflN>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:1} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:2} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar DerivedGen.EqualN
                                                            $ IVar {arg:1}
                                                            $ IVar {arg:2}))))
                            IDef <<DerivedGen.ReflN>>
                                 [ WithClause (IApp. IVar <<DerivedGen.ReflN>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ IBindVar x
                                                   $ IBindVar to_be_deceqed^^x0)
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^x0
                                                   $ IVar x)

                                              []
                                              [ PatClause (IApp. IVar <<DerivedGen.ReflN>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar x
                                                               $ IBindVar x
                                                               $ (IApp. IVar Prelude.Yes
                                                                      $ IVar Builtin.Refl))
                                                          (IApp. IVar Test.DepTyCheck.Gen.label
                                                               $ (IApp. IVar fromString
                                                                      $ IPrimVal DerivedGen.ReflN (orders))
                                                               $ (IApp. INamedApp (IVar Prelude.pure)
                                                                                  f
                                                                                  (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                       $ Implicit True)
                                                                      $ INamedApp (IVar DerivedGen.ReflN)
                                                                                  x
                                                                                  (IVar x)))
                                              , PatClause (IApp. IVar <<DerivedGen.ReflN>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar x
                                                               $ IBindVar to_be_deceqed^^x0
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ] ] ]
