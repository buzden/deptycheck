1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty Nat)} -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty String)} -> (b : Bool) -> Gen MaybeEmpty (D b)
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<Prelude.Types.Nat>[]")
      (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<^prim^.String>[]")
      (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ primVal (PrT StringType))
.=> MkArg MW ExplicitArg (Just "outer^<b>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.D>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ (var "DerivedGen.D" .$ var "{arg:3}")
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.D>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Basics.Bool"
                             .$ (MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool") .=> var "DerivedGen.D" .$ var "{arg:3}"))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Prelude.Basics.Bool>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Basics.Bool"
                 })
          , IDef
              emptyFC
              "<DerivedGen.D>[0]"
              [    var "<DerivedGen.D>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:3}>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.JJ>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "DerivedGen.D" .$ var "{arg:3}")
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.FN>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "DerivedGen.D" .$ var "{arg:3}")
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.TL>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "DerivedGen.D" .$ var "{arg:3}")
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.TR>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "DerivedGen.D" .$ var "{arg:3}")
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.JJ>>"
                             [    var "<<DerivedGen.JJ>>" .$ bindVar "^cons_fuel^" .$ bindVar "b"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.JJ (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:4}") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                              .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:5}") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (var "DerivedGen.JJ" .! ("b", var "b") .$ var "^bnd^{arg:4}" .$ var "^bnd^{arg:5}"))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.FN>>"
                             [    var "<<DerivedGen.FN>>" .$ bindVar "^cons_fuel^" .$ var "Prelude.Basics.False"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.FN (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.D>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "b" .$ bindVar "^bnd^{arg:6}"
                                                      .=    var ">>="
                                                         .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                         .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:7}") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (   var "DerivedGen.FN"
                                                                     .! ("b", implicitTrue)
                                                                     .$ var "^bnd^{arg:7}"
                                                                     .$ var "^bnd^{arg:6}"))
                                                    ]
                                                }))
                             , var "<<DerivedGen.FN>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.TL>>"
                             [    var "<<DerivedGen.TL>>" .$ bindVar "^cons_fuel^" .$ var "Prelude.Basics.True"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.TL (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:8}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "DerivedGen.TL" .$ var "^bnd^{arg:8}")))
                             , var "<<DerivedGen.TL>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.TR>>"
                             [    var "<<DerivedGen.TR>>" .$ bindVar "^cons_fuel^" .$ var "Prelude.Basics.True"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.TR (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.D>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "b" .$ bindVar "^bnd^{arg:9}"
                                                      .=    var ">>="
                                                         .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^")
                                                         .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:10}") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (   var "DerivedGen.TR"
                                                                     .! ("b", implicitTrue)
                                                                     .$ var "^bnd^{arg:10}"
                                                                     .$ var "^bnd^{arg:9}"))
                                                    ]
                                                }))
                             , var "<<DerivedGen.TR>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.D[0] (dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.oneOf"
                                        .! ("em", var "MaybeEmpty")
                                        .$ (   var "::"
                                            .$ (var "<<DerivedGen.JJ>>" .$ var "Data.Fuel.Dry" .$ var "inter^<{arg:3}>")
                                            .$ (var "::" .$ (var "<<DerivedGen.TL>>" .$ var "Data.Fuel.Dry" .$ var "inter^<{arg:3}>") .$ var "Nil")))
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.D[0] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<DerivedGen.JJ>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:3}>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<DerivedGen.FN>>" .$ var "^sub^fuel_arg^" .$ var "inter^<{arg:3}>"))
                                                .$ (   var "::"
                                                    .$ (   var "Builtin.MkPair"
                                                        .$ var "Data.Nat1.one"
                                                        .$ (var "<<DerivedGen.TL>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:3}>"))
                                                    .$ (   var "::"
                                                        .$ (   var "Builtin.MkPair"
                                                            .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                            .$ (var "<<DerivedGen.TR>>" .$ var "^sub^fuel_arg^" .$ var "inter^<{arg:3}>"))
                                                        .$ var "Nil")))))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.D>[]"
              [    var "<DerivedGen.D>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.JJ>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Basics.Bool"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                                .=> var "DerivedGen.D" .$ var "{arg:3}"))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.FN>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Basics.Bool"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                                .=> var "DerivedGen.D" .$ var "{arg:3}"))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.TL>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Basics.Bool"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                                .=> var "DerivedGen.D" .$ var "{arg:3}"))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.TR>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Basics.Bool"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Basics.Bool")
                                                .=> var "DerivedGen.D" .$ var "{arg:3}"))
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.JJ>>"
                             [    var "<<DerivedGen.JJ>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.JJ (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Basics.Bool>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "b") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                              .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:4}") implicitFalse
                                                  .=>    var ">>="
                                                      .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                      .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:5}") implicitFalse
                                                          .=>    var "Prelude.pure"
                                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                              .$ (   var "Builtin.DPair.MkDPair"
                                                                  .$ implicitTrue
                                                                  .$ (   var "DerivedGen.JJ"
                                                                      .! ("b", var "b")
                                                                      .$ var "^bnd^{arg:4}"
                                                                      .$ var "^bnd^{arg:5}"))))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.FN>>"
                             [    var "<<DerivedGen.FN>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.FN (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.D>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "b" .$ bindVar "^bnd^{arg:6}"
                                                      .=    var ">>="
                                                         .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                         .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:7}") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (   var "Builtin.DPair.MkDPair"
                                                                     .$ implicitTrue
                                                                     .$ (   var "DerivedGen.FN"
                                                                         .! ("b", implicitTrue)
                                                                         .$ var "^bnd^{arg:7}"
                                                                         .$ var "^bnd^{arg:6}")))
                                                    ]
                                                }))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.TL>>"
                             [    var "<<DerivedGen.TL>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.TL (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:8}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "DerivedGen.TL" .$ var "^bnd^{arg:8}"))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.TR>>"
                             [    var "<<DerivedGen.TR>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.TR (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.D>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "b" .$ bindVar "^bnd^{arg:9}"
                                                      .=    var ">>="
                                                         .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^")
                                                         .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:10}") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (   var "Builtin.DPair.MkDPair"
                                                                     .$ implicitTrue
                                                                     .$ (   var "DerivedGen.TR"
                                                                         .! ("b", implicitTrue)
                                                                         .$ var "^bnd^{arg:10}"
                                                                         .$ var "^bnd^{arg:9}")))
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.D[] (dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.oneOf"
                                        .! ("em", var "MaybeEmpty")
                                        .$ (   var "::"
                                            .$ (var "<<DerivedGen.JJ>>" .$ var "Data.Fuel.Dry")
                                            .$ (var "::" .$ (var "<<DerivedGen.TL>>" .$ var "Data.Fuel.Dry") .$ var "Nil")))
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.D[] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<DerivedGen.JJ>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<DerivedGen.FN>>" .$ var "^sub^fuel_arg^"))
                                                .$ (   var "::"
                                                    .$ (   var "Builtin.MkPair"
                                                        .$ var "Data.Nat1.one"
                                                        .$ (var "<<DerivedGen.TL>>" .$ var "^fuel_arg^"))
                                                    .$ (   var "::"
                                                        .$ (   var "Builtin.MkPair"
                                                            .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                            .$ (var "<<DerivedGen.TR>>" .$ var "^sub^fuel_arg^"))
                                                        .$ var "Nil")))))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Prelude.Basics.Bool>[]"
              [    var "<Prelude.Basics.Bool>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Prelude.Basics.False>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Basics.Bool"
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Prelude.Basics.True>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Basics.Bool"
                                })
                         , IDef
                             emptyFC
                             "<<Prelude.Basics.False>>"
                             [    var "<<Prelude.Basics.False>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Basics.False (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Prelude.Basics.False")
                             ]
                         , IDef
                             emptyFC
                             "<<Prelude.Basics.True>>"
                             [    var "<<Prelude.Basics.True>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Basics.True (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Prelude.Basics.True")
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Prelude.Basics.Bool[] (non-recursive)"))
                         .$ (   var "Test.DepTyCheck.Gen.oneOf"
                             .! ("em", var "MaybeEmpty")
                             .$ (   var "::"
                                 .$ (var "<<Prelude.Basics.False>>" .$ var "^fuel_arg^")
                                 .$ (var "::" .$ (var "<<Prelude.Basics.True>>" .$ var "^fuel_arg^") .$ var "Nil")))
                     }
              ]
          ]
      , scope = var "<DerivedGen.D>[0]" .$ var "^outmost-fuel^" .$ var "outer^<b>"
      }

