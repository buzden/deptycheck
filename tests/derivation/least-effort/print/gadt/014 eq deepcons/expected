1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (a : Nat) -> (b : Nat) -> Gen MaybeEmpty (LT2 a b)
LOG deptycheck.derive.least-effort:7: DerivedGen.LT2[0, 1] Base - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.LT2[0, 1] Step - used final order: [#2]
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<a>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<b>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy {name = "weight^Prelude.Types.Nat", type = MkArg MW ExplicitArg Nothing (var "Prelude.Types.Nat") .-> var "Data.Nat1.Nat1"}
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.LT2>[0, 1]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.LT2" .$ var "{arg:1}" .$ var "{arg:2}")
                       }
                 })
          , IDef
              emptyFC
              "weight^Prelude.Types.Nat"
              [ var "weight^Prelude.Types.Nat" .$ var "Prelude.Types.Z" .= var "Data.Nat1.one"
              ,    var "weight^Prelude.Types.Nat" .$ (var "Prelude.Types.S" .$ bindVar "arg^0")
                .= var "succ" .$ (var "weight^Prelude.Types.Nat" .$ var "arg^0")
              ]
          , IDef
              emptyFC
              "<DerivedGen.LT2>[0, 1]"
              [    var "<DerivedGen.LT2>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:1}>" .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Base>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.LT2" .$ var "{arg:1}" .$ var "{arg:2}")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Step>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.LT2" .$ var "{arg:1}" .$ var "{arg:2}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.Base>>"
                             [ withClause
                                 { lhs =
                                        var "<<DerivedGen.Base>>"
                                     .$ bindVar "^cons_fuel^"
                                     .$ bindVar "x"
                                     .$ (var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ bindVar "to_be_deceqed^^x0"))
                                 , rig = MW
                                 , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^x0" .$ var "x"
                                 , prf = Nothing
                                 , flags = []
                                 , clauses =
                                     [       var "<<DerivedGen.Base>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ bindVar "x"
                                          .$ (var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ bindVar "x"))
                                          .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                       .=    var "Test.DepTyCheck.Gen.label"
                                          .$ (var "fromString" .$ primVal (Str "DerivedGen.Base (orders)"))
                                          .$ (   var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "DerivedGen.Base" .! ("x", var "x")))
                                     ,       var "<<DerivedGen.Base>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ bindVar "x"
                                          .$ (var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ bindVar "to_be_deceqed^^x0"))
                                          .$ (var "Prelude.No" .$ implicitTrue)
                                       .= var "empty"
                                     ]
                                 }
                             , var "<<DerivedGen.Base>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.Step>>"
                             [    var "<<DerivedGen.Step>>" .$ bindVar "^cons_fuel^" .$ bindVar "x" .$ (var "Prelude.Types.S" .$ bindVar "y")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Step (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.LT2>[0, 1]" .$ var "^cons_fuel^" .$ var "x" .$ var "y")
                                      .$ (    MkArg MW ExplicitArg (Just "{arg:3}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "DerivedGen.Step" .! ("y", implicitTrue) .! ("x", implicitTrue) .$ var "{arg:3}")))
                             , var "<<DerivedGen.Step>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.LT2[0, 1] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.frequency"
                             .$ (   var "::"
                                 .$ (   var "Builtin.MkPair"
                                     .$ var "Data.Nat1.one"
                                     .$ (var "<<DerivedGen.Base>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:1}>" .$ var "inter^<{arg:2}>"))
                                 .$ (   var "::"
                                     .$ (   var "Builtin.MkPair"
                                         .$ (var "weight^Prelude.Types.Nat" .$ var "inter^<{arg:2}>")
                                         .$ (   var "<<DerivedGen.Step>>"
                                             .$ var "^fuel_arg^"
                                             .$ var "inter^<{arg:1}>"
                                             .$ var "inter^<{arg:2}>"))
                                     .$ var "Nil")))
                     }
              ]
          ]
      , scope = var "<DerivedGen.LT2>[0, 1]" .$ var "^outmost-fuel^" .$ var "outer^<a>" .$ var "outer^<b>"
      }

