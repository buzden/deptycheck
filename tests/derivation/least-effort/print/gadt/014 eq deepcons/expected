1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (a : Nat) -> (b : Nat) -> Gen MaybeEmpty (LT2 a b)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<a> : Implicit True)
    => (MW ExplicitArg outer^<b> : Implicit True)
    => ILocal (IApp. IVar <DerivedGen.LT2>[0, 1]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<a>
                   $ IVar outer^<b>)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.LT2>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar DerivedGen.LT2
                                         $ IVar {arg:3630}
                                         $ IVar {arg:3633}))))
         IDef <DerivedGen.LT2>[0, 1]
              [ PatClause (IApp. IVar <DerivedGen.LT2>[0, 1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<{arg:3630}>
                               $ IBindVar inter^<{arg:3633}>)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal DerivedGen.LT2[0, 1] (dry fuel))
                                                          $ (IApp. IVar <<DerivedGen.Base>>
                                                                 $ IVar Data.Fuel.Dry
                                                                 $ IVar inter^<{arg:3630}>
                                                                 $ IVar inter^<{arg:3633}>))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal DerivedGen.LT2[0, 1] (spend fuel))
                                                          $ (IApp. IVar Test.DepTyCheck.Gen.frequency
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar Builtin.MkPair
                                                                               $ IVar Data.Nat.Pos.one
                                                                               $ (IApp. IVar <<DerivedGen.Base>>
                                                                                      $ IVar ^fuel_arg^
                                                                                      $ IVar inter^<{arg:3630}>
                                                                                      $ IVar inter^<{arg:3633}>))
                                                                        $ (IApp. IVar ::
                                                                               $ (IApp. IVar Builtin.MkPair
                                                                                      $ (IApp. IVar Deriving.DepTyCheck.Util.Reflection.leftDepth
                                                                                             $ IVar ^sub^fuel_arg^)
                                                                                      $ (IApp. IVar <<DerivedGen.Step>>
                                                                                             $ IVar ^sub^fuel_arg^
                                                                                             $ IVar inter^<{arg:3630}>
                                                                                             $ IVar inter^<{arg:3633}>))
                                                                               $ IVar Nil)))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.Base>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar DerivedGen.LT2
                                                            $ IVar {arg:3630}
                                                            $ IVar {arg:3633}))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.Step>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar DerivedGen.LT2
                                                            $ IVar {arg:3630}
                                                            $ IVar {arg:3633}))))
                            IDef <<DerivedGen.Base>>
                                 [ WithClause (IApp. IVar <<DerivedGen.Base>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ IBindVar x
                                                   $ (IApp. IVar Prelude.Types.S
                                                          $ (IApp. IVar Prelude.Types.S
                                                                 $ IBindVar to_be_deceqed^^x0)))
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^x0
                                                   $ IVar x)

                                              []
                                              [ PatClause (IApp. IVar <<DerivedGen.Base>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar x
                                                               $ (IApp. IVar Prelude.Types.S
                                                                      $ (IApp. IVar Prelude.Types.S
                                                                             $ IBindVar x))
                                                               $ (IApp. IVar Prelude.Yes
                                                                      $ IVar Builtin.Refl))
                                                          (IApp. IVar Test.DepTyCheck.Gen.label
                                                               $ (IApp. IVar fromString
                                                                      $ IPrimVal DerivedGen.Base (orders))
                                                               $ (IApp. INamedApp (IVar Prelude.pure)
                                                                                  f
                                                                                  (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                       $ Implicit True)
                                                                      $ INamedApp (IVar DerivedGen.Base)
                                                                                  x
                                                                                  (IVar x)))
                                              , PatClause (IApp. IVar <<DerivedGen.Base>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar x
                                                               $ (IApp. IVar Prelude.Types.S
                                                                      $ (IApp. IVar Prelude.Types.S
                                                                             $ IBindVar to_be_deceqed^^x0))
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ]
                                 , PatClause (IApp. IVar <<DerivedGen.Base>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ]
                            IDef <<DerivedGen.Step>>
                                 [ PatClause (IApp. IVar <<DerivedGen.Step>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar x
                                                  $ (IApp. IVar Prelude.Types.S
                                                         $ IBindVar y))
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.Step (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <DerivedGen.LT2>[0, 1]
                                                                $ IVar ^cons_fuel^
                                                                $ IVar x
                                                                $ IVar y)
                                                         $ (ILam.  (MW ExplicitArg ^bnd^{arg:3641} : Implicit False)
                                                                => (IApp. INamedApp (IVar Prelude.pure)
                                                                                    f
                                                                                    (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                         $ Implicit True)
                                                                        $ (IApp. INamedApp (INamedApp (IVar DerivedGen.Step)
                                                                                                      y
                                                                                                      (IVar y))
                                                                                           x
                                                                                           (IVar x)
                                                                               $ IVar ^bnd^{arg:3641})))))
                                 , PatClause (IApp. IVar <<DerivedGen.Step>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
