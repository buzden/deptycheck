1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (a : Nat) -> Gen MaybeEmpty (b : Nat ** EqualN a b)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<a> : Implicit True)
    => ILocal (IApp. IVar <DerivedGen.EqualN>[0]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<a>)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.EqualN>[0]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar DerivedGen.EqualN
                                                        $ IVar {arg:3630}
                                                        $ IVar {arg:3633}))))))
         IDef <DerivedGen.EqualN>[0]
              [ PatClause (IApp. IVar <DerivedGen.EqualN>[0]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<{arg:3630}>)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.label
                                       $ (IApp. IVar fromString
                                              $ IPrimVal DerivedGen.EqualN[0] (non-recursive))
                                       $ (IApp. IVar <<DerivedGen.ReflN>>
                                              $ IVar ^fuel_arg^
                                              $ IVar inter^<{arg:3630}>)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.ReflN>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar DerivedGen.EqualN
                                                                           $ IVar {arg:3630}
                                                                           $ IVar {arg:3633}))))))
                            IDef <<DerivedGen.ReflN>>
                                 [ PatClause (IApp. IVar <<DerivedGen.ReflN>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar x)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.ReflN (orders))
                                                  $ (IApp. INamedApp (IVar Prelude.pure)
                                                                     f
                                                                     (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                          $ Implicit True)
                                                         $ (IApp. IVar Builtin.DPair.MkDPair
                                                                $ Implicit True
                                                                $ INamedApp (IVar DerivedGen.ReflN)
                                                                            x
                                                                            (IVar x)))) ] ]
