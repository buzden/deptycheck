1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (m : Nat) -> (g : Fin m) -> (f : Fin n) -> Gen MaybeEmpty (Z f g)
LOG deptycheck.derive.least-effort:7: DerivedGen.Z[0(m), 1(n), 2, 3] MkZ - used final order: []
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<m>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<g>") implicitTrue
.=> MkArg MW ImplicitArg (Just "outer^<n>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<f>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Z>[0, 1, 2, 3]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fin.Fin" .$ var "n")
                           .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.Fin.Fin" .$ var "m")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.Z" .! ("m", var "m") .! ("n", var "n") .$ var "{arg:1}" .$ var "{arg:2}")
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.Z>[0, 1, 2, 3]"
              [       var "<DerivedGen.Z>[0, 1, 2, 3]"
                   .$ bindVar "^fuel_arg^"
                   .$ bindVar "inter^<m>"
                   .$ bindVar "inter^<n>"
                   .$ bindVar "inter^<{arg:1}>"
                   .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkZ>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fin.Fin" .$ var "n")
                                          .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.Fin.Fin" .$ var "m")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Z" .! ("m", var "m") .! ("n", var "n") .$ var "{arg:1}" .$ var "{arg:2}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkZ>>"
                             [       var "<<DerivedGen.MkZ>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ (var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ var "Prelude.Types.Z"))
                                  .$ (var "Prelude.Types.S" .$ bindVar "n")
                                  .$ (var "Data.Fin.FZ" .! ("k", implicitTrue))
                                  .$ (   var "Data.Fin.FS"
                                      .! ("k", var "Prelude.Types.S" .$ var "Prelude.Types.Z")
                                      .$ (var "Data.Fin.FZ" .! ("k", var "Prelude.Types.Z")))
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkZ (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "DerivedGen.MkZ" .! ("n", var "n")))
                             , var "<<DerivedGen.MkZ>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.Z[0(m), 1(n), 2, 3] (non-recursive)"))
                         .$ (   var "<<DerivedGen.MkZ>>"
                             .$ var "^fuel_arg^"
                             .$ var "inter^<m>"
                             .$ var "inter^<n>"
                             .$ var "inter^<{arg:1}>"
                             .$ var "inter^<{arg:2}>")
                     }
              ]
          ]
      , scope = var "<DerivedGen.Z>[0, 1, 2, 3]" .$ var "^outmost-fuel^" .$ var "outer^<m>" .$ var "outer^<n>" .$ var "outer^<f>" .$ var "outer^<g>"
      }

