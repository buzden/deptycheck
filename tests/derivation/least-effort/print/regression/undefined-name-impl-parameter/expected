1/2: Building Decls (Decls.idr)
2/2: Building DerivedGen (DerivedGen.idr)
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ImplicitArg (Just "outer^<r>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<rs>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<t>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Decls.Expr>[0, 1, 2]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "r") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Decls.Regs" .$ var "r")
                           .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Decls.Ty")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "Decls.Expr" .! ("r", var "r") .$ var "{arg:1}" .$ var "{arg:2}")
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Decls.RegIsType>[0, 2, 3]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "r") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Decls.Ty")
                           .-> MkArg MW ExplicitArg (Just "{arg:4}") (var "Decls.Regs" .$ var "r")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (   var "Builtin.DPair.DPair"
                                   .$ (var "Data.Fin.Fin" .$ var "r")
                                   .$ (    MkArg MW ExplicitArg (Just "{arg:5}") (var "Data.Fin.Fin" .$ var "r")
                                       .=> var "Decls.RegIsType" .! ("r", var "r") .$ var "{arg:5}" .$ var "{arg:3}" .$ var "{arg:4}"))
                       }
                 })
          , IDef
              emptyFC
              "<Decls.Expr>[0, 1, 2]"
              [       var "<Decls.Expr>[0, 1, 2]"
                   .$ bindVar "^fuel_arg^"
                   .$ bindVar "inter^<r>"
                   .$ bindVar "inter^<{arg:1}>"
                   .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Decls.Read>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "r") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Decls.Regs" .$ var "r")
                                          .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Decls.Ty")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Decls.Expr" .! ("r", var "r") .$ var "{arg:1}" .$ var "{arg:2}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Decls.Read>>"
                             [    var "<<Decls.Read>>" .$ bindVar "^cons_fuel^" .$ bindVar "r" .$ bindVar "regs" .$ bindVar "t"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Decls.Read (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Decls.RegIsType>[0, 2, 3]" .$ var "^outmost-fuel^" .$ var "r" .$ var "t" .$ var "regs")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "idx" .$ bindVar "^bnd^{conArg:1}"
                                                      .=    var "Prelude.pure"
                                                         .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                         .$ (   var "Decls.Read"
                                                             .! ("r", implicitTrue)
                                                             .! ("regs", implicitTrue)
                                                             .! ("t", implicitTrue)
                                                             .$ implicitTrue
                                                             .@ var "^bnd^{conArg:1}")
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Decls.Expr[0, 1, 2] (non-recursive)"))
                         .$ (var "<<Decls.Read>>" .$ var "^fuel_arg^" .$ var "inter^<r>" .$ var "inter^<{arg:1}>" .$ var "inter^<{arg:2}>")
                     }
              ]
          , IDef
              emptyFC
              "<Decls.RegIsType>[0, 2, 3]"
              [       var "<Decls.RegIsType>[0, 2, 3]"
                   .$ bindVar "^fuel_arg^"
                   .$ bindVar "inter^<r>"
                   .$ bindVar "inter^<{arg:3}>"
                   .$ bindVar "inter^<{arg:4}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Decls.Here>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "r") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Decls.Ty")
                                          .-> MkArg MW ExplicitArg (Just "{arg:4}") (var "Decls.Regs" .$ var "r")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ (var "Data.Fin.Fin" .$ var "r")
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:5}") (var "Data.Fin.Fin" .$ var "r")
                                                      .=>    var "Decls.RegIsType"
                                                          .! ("r", var "r")
                                                          .$ var "{arg:5}"
                                                          .$ var "{arg:3}"
                                                          .$ var "{arg:4}"))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Decls.There>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "r") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Decls.Ty")
                                          .-> MkArg MW ExplicitArg (Just "{arg:4}") (var "Decls.Regs" .$ var "r")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ (var "Data.Fin.Fin" .$ var "r")
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:5}") (var "Data.Fin.Fin" .$ var "r")
                                                      .=>    var "Decls.RegIsType"
                                                          .! ("r", var "r")
                                                          .$ var "{arg:5}"
                                                          .$ var "{arg:3}"
                                                          .$ var "{arg:4}"))
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Decls.Here>>"
                             [ withClause
                                 { lhs =
                                        var "<<Decls.Here>>"
                                     .$ bindVar "^cons_fuel^"
                                     .$ (var "Prelude.Types.S" .$ bindVar "^bnd^{n:3965}")
                                     .$ bindVar "t"
                                     .$ (var "Decls.(::)" .! ("n", implicitTrue) .$ (var "Decls.Just" .$ bindVar "to_be_deceqed^^t0") .$ bindVar "rest")
                                 , rig = MW
                                 , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^t0" .$ var "t"
                                 , prf = Nothing
                                 , flags = []
                                 , clauses =
                                     [       var "<<Decls.Here>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ (var "Prelude.Types.S" .$ bindVar "^bnd^{n:3965}")
                                          .$ bindVar "t"
                                          .$ (var "Decls.(::)" .! ("n", implicitTrue) .$ (var "Decls.Just" .$ bindVar "t") .$ bindVar "rest")
                                          .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                       .=    var "Test.DepTyCheck.Gen.label"
                                          .$ (var "fromString" .$ primVal (Str "Decls.Here (orders)"))
                                          .$ (   var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (   var "Builtin.DPair.MkDPair"
                                                  .$ implicitTrue
                                                  .$ (var "Decls.Here" .! ("{n:3965}", implicitTrue) .! ("rest", var "rest") .! ("t", var "t"))))
                                     ,       var "<<Decls.Here>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ (var "Prelude.Types.S" .$ bindVar "^bnd^{n:3965}")
                                          .$ bindVar "t"
                                          .$ (   var "Decls.(::)"
                                              .! ("n", implicitTrue)
                                              .$ (var "Decls.Just" .$ bindVar "to_be_deceqed^^t0")
                                              .$ bindVar "rest")
                                          .$ (var "Prelude.No" .$ implicitTrue)
                                       .= var "empty"
                                     ]
                                 }
                             , var "<<Decls.Here>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<Decls.There>>"
                             [       var "<<Decls.There>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ (var "Prelude.Types.S" .$ bindVar "^bnd^{r:3977}")
                                  .$ bindVar "t"
                                  .$ (var "Decls.(::)" .! ("n", implicitTrue) .$ bindVar "reg" .$ bindVar "rest")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Decls.There (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Decls.RegIsType>[0, 2, 3]" .$ var "^cons_fuel^" .$ var "^bnd^{r:3977}" .$ var "t" .$ var "rest")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "i" .$ bindVar "^bnd^{arg:6}"
                                                      .=    var "Prelude.pure"
                                                         .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                         .$ (   var "Builtin.DPair.MkDPair"
                                                             .$ implicitTrue
                                                             .$ (   var "Decls.There"
                                                                 .! ("{r:3977}", implicitTrue)
                                                                 .! ("reg", var "reg")
                                                                 .! ("rest", implicitTrue)
                                                                 .! ("t", implicitTrue)
                                                                 .! ("i", implicitTrue)
                                                                 .$ var "^bnd^{arg:6}"))
                                                    ]
                                                }))
                             , var "<<Decls.There>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Decls.RegIsType[0, 2, 3] (dry fuel)"))
                                    .$ (   var "<<Decls.Here>>"
                                        .$ var "Data.Fuel.Dry"
                                        .$ var "inter^<r>"
                                        .$ var "inter^<{arg:3}>"
                                        .$ var "inter^<{arg:4}>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Decls.RegIsType[0, 2, 3] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (   var "<<Decls.Here>>"
                                                    .$ var "^fuel_arg^"
                                                    .$ var "inter^<r>"
                                                    .$ var "inter^<{arg:3}>"
                                                    .$ var "inter^<{arg:4}>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (   var "<<Decls.There>>"
                                                        .$ var "^sub^fuel_arg^"
                                                        .$ var "inter^<r>"
                                                        .$ var "inter^<{arg:3}>"
                                                        .$ var "inter^<{arg:4}>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          ]
      , scope = var "<Decls.Expr>[0, 1, 2]" .$ var "^outmost-fuel^" .$ var "outer^<r>" .$ var "outer^<rs>" .$ var "outer^<t>"
      }

