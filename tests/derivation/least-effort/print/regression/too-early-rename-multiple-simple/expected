1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (a : Z) -> (b : Z) -> Gen MaybeEmpty (W a b)
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<a>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<b>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.W>[0, 1]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Z")
                     .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.Z")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (var "DerivedGen.W" .$ var "{arg:1}" .$ var "{arg:2}")
                 })
          , IDef
              emptyFC
              "<DerivedGen.W>[0, 1]"
              [    var "<DerivedGen.W>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:1}>" .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.MkW>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Z")
                                    .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.Z")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "DerivedGen.W" .$ var "{arg:1}" .$ var "{arg:2}")
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkW>>"
                             [ withClause
                                 { lhs =
                                        var "<<DerivedGen.MkW>>"
                                     .$ bindVar "^cons_fuel^"
                                     .$ (   var "DerivedGen.MkZ"
                                         .$ (var "DerivedGen.MkX" .$ bindVar "n" .$ bindVar "m" .$ var "Prelude.Basics.False")
                                         .! ( "{conArg:1}"
                                            , var "DerivedGen.MkY" .! ("b", var "Prelude.Basics.False") .! ("m", implicitTrue) .! ("n", implicitTrue)
                                            ))
                                     .$ (   var "DerivedGen.MkZ"
                                         .$ (   var "DerivedGen.MkX"
                                             .$ bindVar "to_be_deceqed^^n0"
                                             .$ bindVar "to_be_deceqed^^m1"
                                             .$ var "Prelude.Basics.True")
                                         .! ( "{conArg:1}"
                                            , var "DerivedGen.MkY" .! ("b", var "Prelude.Basics.True") .! ("m", implicitTrue) .! ("n", implicitTrue)
                                            ))
                                 , rig = MW
                                 , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^m1" .$ var "m"
                                 , prf = Nothing
                                 , flags = []
                                 , clauses =
                                     [ withClause
                                         { lhs =
                                                var "<<DerivedGen.MkW>>"
                                             .$ bindVar "^cons_fuel^"
                                             .$ (   var "DerivedGen.MkZ"
                                                 .$ (var "DerivedGen.MkX" .$ bindVar "n" .$ bindVar "m" .$ var "Prelude.Basics.False")
                                                 .! ( "{conArg:1}"
                                                    ,    var "DerivedGen.MkY"
                                                      .! ("b", var "Prelude.Basics.False")
                                                      .! ("m", implicitTrue)
                                                      .! ("n", implicitTrue)
                                                    ))
                                             .$ (   var "DerivedGen.MkZ"
                                                 .$ (var "DerivedGen.MkX" .$ bindVar "to_be_deceqed^^n0" .$ bindVar "m" .$ var "Prelude.Basics.True")
                                                 .! ( "{conArg:1}"
                                                    ,    var "DerivedGen.MkY"
                                                      .! ("b", var "Prelude.Basics.True")
                                                      .! ("m", implicitTrue)
                                                      .! ("n", implicitTrue)
                                                    ))
                                             .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                         , rig = MW
                                         , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^n0" .$ var "n"
                                         , prf = Nothing
                                         , flags = []
                                         , clauses =
                                             [       var "<<DerivedGen.MkW>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ (   var "DerivedGen.MkZ"
                                                      .$ (var "DerivedGen.MkX" .$ bindVar "n" .$ bindVar "m" .$ var "Prelude.Basics.False")
                                                      .! ( "{conArg:1}"
                                                         ,    var "DerivedGen.MkY"
                                                           .! ("b", var "Prelude.Basics.False")
                                                           .! ("m", implicitTrue)
                                                           .! ("n", implicitTrue)
                                                         ))
                                                  .$ (   var "DerivedGen.MkZ"
                                                      .$ (var "DerivedGen.MkX" .$ bindVar "n" .$ bindVar "m" .$ var "Prelude.Basics.True")
                                                      .! ( "{conArg:1}"
                                                         ,    var "DerivedGen.MkY"
                                                           .! ("b", var "Prelude.Basics.True")
                                                           .! ("m", implicitTrue)
                                                           .! ("n", implicitTrue)
                                                         ))
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                               .=    var "Test.DepTyCheck.Gen.label"
                                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkW (orders)"))
                                                  .$ (   var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (var "DerivedGen.MkW" .! ("m", var "m") .! ("n", var "n")))
                                             ,       var "<<DerivedGen.MkW>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ (   var "DerivedGen.MkZ"
                                                      .$ (var "DerivedGen.MkX" .$ bindVar "n" .$ bindVar "m" .$ var "Prelude.Basics.False")
                                                      .! ( "{conArg:1}"
                                                         ,    var "DerivedGen.MkY"
                                                           .! ("b", var "Prelude.Basics.False")
                                                           .! ("m", implicitTrue)
                                                           .! ("n", implicitTrue)
                                                         ))
                                                  .$ (   var "DerivedGen.MkZ"
                                                      .$ (   var "DerivedGen.MkX"
                                                          .$ bindVar "to_be_deceqed^^n0"
                                                          .$ bindVar "m"
                                                          .$ var "Prelude.Basics.True")
                                                      .! ( "{conArg:1}"
                                                         ,    var "DerivedGen.MkY"
                                                           .! ("b", var "Prelude.Basics.True")
                                                           .! ("m", implicitTrue)
                                                           .! ("n", implicitTrue)
                                                         ))
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.No" .$ implicitTrue)
                                               .= var "empty"
                                             ]
                                         }
                                     ,       var "<<DerivedGen.MkW>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ (   var "DerivedGen.MkZ"
                                              .$ (var "DerivedGen.MkX" .$ bindVar "n" .$ bindVar "m" .$ var "Prelude.Basics.False")
                                              .! ( "{conArg:1}"
                                                 ,    var "DerivedGen.MkY"
                                                   .! ("b", var "Prelude.Basics.False")
                                                   .! ("m", implicitTrue)
                                                   .! ("n", implicitTrue)
                                                 ))
                                          .$ (   var "DerivedGen.MkZ"
                                              .$ (   var "DerivedGen.MkX"
                                                  .$ bindVar "to_be_deceqed^^n0"
                                                  .$ bindVar "to_be_deceqed^^m1"
                                                  .$ var "Prelude.Basics.True")
                                              .! ( "{conArg:1}"
                                                 ,    var "DerivedGen.MkY"
                                                   .! ("b", var "Prelude.Basics.True")
                                                   .! ("m", implicitTrue)
                                                   .! ("n", implicitTrue)
                                                 ))
                                          .$ (var "Prelude.No" .$ implicitTrue)
                                       .= var "empty"
                                     ]
                                 }
                             , var "<<DerivedGen.MkW>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.W[0, 1] (non-recursive)"))
                         .$ (var "<<DerivedGen.MkW>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:1}>" .$ var "inter^<{arg:2}>")
                     }
              ]
          ]
      , scope = var "<DerivedGen.W>[0, 1]" .$ var "^outmost-fuel^" .$ var "outer^<a>" .$ var "outer^<b>"
      }

