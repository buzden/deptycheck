1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (n : Nat) -> Gen MaybeEmpty (y : Y n ** Z y)
LOG deptycheck.derive.least-effort:7: DerivedGen.Z[0(n)] Start - used final order: [#1 (x2), #2 (x)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Z[0(n)] Go - used final order: [#2 (x1), #3 (x), #4, #1 (x2)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Z[0(n), 1] Start - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.Z[0(n), 1] Go - used final order: [#2 (x1), #4]
LOG deptycheck.derive.least-effort:7: DerivedGen.X[0] MkX - used final order: []
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Z>[0]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (   var "Builtin.DPair.DPair"
                                   .$ (var "DerivedGen.Y" .$ var "n")
                                   .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ var "n")
                                       .=> var "DerivedGen.Z" .! ("n", var "n") .$ var "{arg:1}"))
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Z>[0, 1]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ var "n")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.Z" .! ("n", var "n") .$ var "{arg:1}")
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.X>[0]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.X" .$ var "{arg:2}")
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.Z>[0]"
              [    var "<DerivedGen.Z>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Start>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ (var "DerivedGen.Y" .$ var "n")
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ var "n")
                                                      .=> var "DerivedGen.Z" .! ("n", var "n") .$ var "{arg:1}"))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Go>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ (var "DerivedGen.Y" .$ var "n")
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ var "n")
                                                      .=> var "DerivedGen.Z" .! ("n", var "n") .$ var "{arg:1}"))
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.Start>>"
                             [    var "<<DerivedGen.Start>>" .$ bindVar "^cons_fuel^" .$ bindVar "{n:1}"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Start (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "{n:1}")
                                      .$ (    MkArg MW ExplicitArg (Just "x2") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "{n:1}")
                                              .$ (    MkArg MW ExplicitArg (Just "x") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                          .$ implicitTrue
                                                          .$ (   var "DerivedGen.Start"
                                                              .! ("{n:1}", implicitTrue)
                                                              .! ("x2", var "x2")
                                                              .! ("x", var "x"))))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.Go>>"
                             [    var "<<DerivedGen.Go>>" .$ bindVar "^cons_fuel^" .$ bindVar "{n:2}"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Go (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "{n:2}")
                                      .$ (    MkArg MW ExplicitArg (Just "x1") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "{n:2}")
                                              .$ (    MkArg MW ExplicitArg (Just "x") implicitFalse
                                                  .=>    var ">>="
                                                      .$ (   var "<DerivedGen.Z>[0, 1]"
                                                          .$ var "^cons_fuel^"
                                                          .$ var "{n:2}"
                                                          .$ (var "DerivedGen.MkY" .! ("n", var "{n:2}") .$ var "x" .$ var "x1"))
                                                      .$ (    MkArg MW ExplicitArg (Just "{arg:3}") implicitFalse
                                                          .=>    var ">>="
                                                              .$ (var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "{n:2}")
                                                              .$ (    MkArg MW ExplicitArg (Just "x2") implicitFalse
                                                                  .=>    var "Prelude.pure"
                                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                                          .$ implicitTrue
                                                                          .$ (   var "DerivedGen.Go"
                                                                              .! ("{n:2}", implicitTrue)
                                                                              .! ("x2", var "x2")
                                                                              .! ("x1", implicitTrue)
                                                                              .! ("x", implicitTrue)
                                                                              .$ var "{arg:3}")))))))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.Z[0(n)] (dry fuel)"))
                                    .$ (var "<<DerivedGen.Start>>" .$ var "^fuel_arg^" .$ var "inter^<n>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.Z[0(n)] (non-dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<DerivedGen.Start>>" .$ var "^fuel_arg^" .$ var "inter^<n>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<DerivedGen.Go>>" .$ var "^sub^fuel_arg^" .$ var "inter^<n>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.Z>[0, 1]"
              [    var "<DerivedGen.Z>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>" .$ bindVar "inter^<{arg:1}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Start>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ var "n")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Z" .! ("n", var "n") .$ var "{arg:1}")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Go>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ var "n")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Z" .! ("n", var "n") .$ var "{arg:1}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.Start>>"
                             [       var "<<DerivedGen.Start>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ bindVar "{n:1}"
                                  .$ (var "DerivedGen.MkY" .! ("n", implicitTrue) .$ bindVar "x" .$ bindVar "x2")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Start (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "DerivedGen.Start" .! ("{n:1}", implicitTrue) .! ("x2", var "x2") .! ("x", var "x")))
                             , var "<<DerivedGen.Start>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.Go>>"
                             [       var "<<DerivedGen.Go>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ bindVar "{n:2}"
                                  .$ (var "DerivedGen.MkY" .! ("n", implicitTrue) .$ bindVar "x" .$ bindVar "x2")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Go (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "{n:2}")
                                      .$ (    MkArg MW ExplicitArg (Just "x1") implicitFalse
                                          .=>    var ">>="
                                              .$ (   var "<DerivedGen.Z>[0, 1]"
                                                  .$ var "^cons_fuel^"
                                                  .$ var "{n:2}"
                                                  .$ (var "DerivedGen.MkY" .! ("n", var "{n:2}") .$ var "x" .$ var "x1"))
                                              .$ (    MkArg MW ExplicitArg (Just "{arg:3}") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "DerivedGen.Go"
                                                          .! ("{n:2}", implicitTrue)
                                                          .! ("x2", var "x2")
                                                          .! ("x1", implicitTrue)
                                                          .! ("x", implicitTrue)
                                                          .$ var "{arg:3}"))))
                             , var "<<DerivedGen.Go>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.Z[0(n), 1] (dry fuel)"))
                                    .$ (var "<<DerivedGen.Start>>" .$ var "^fuel_arg^" .$ var "inter^<n>" .$ var "inter^<{arg:1}>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.Z[0(n), 1] (non-dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<DerivedGen.Start>>" .$ var "^fuel_arg^" .$ var "inter^<n>" .$ var "inter^<{arg:1}>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (   var "<<DerivedGen.Go>>"
                                                        .$ var "^sub^fuel_arg^"
                                                        .$ var "inter^<n>"
                                                        .$ var "inter^<{arg:1}>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.X>[0]"
              [    var "<DerivedGen.X>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkX>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.X" .$ var "{arg:2}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkX>>"
                             [    var "<<DerivedGen.MkX>>" .$ bindVar "^cons_fuel^" .$ bindVar "n"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkX (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ (var "DerivedGen.MkX" .$ var "n"))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[0] (non-spending)"))
                         .$ (var "<<DerivedGen.MkX>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:2}>")
                     }
              ]
          ]
      , scope = var "<DerivedGen.Z>[0]" .$ var "^outmost-fuel^" .$ var "outer^<n>"
      }

