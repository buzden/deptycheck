1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (c : Maybe ()) -> Gen MaybeEmpty (Y c)
LOG deptycheck.derive.least-effort:7: DerivedGen.Y[0] MkY - used final order: []
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<c>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Y>[0]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Maybe" .$ var "Builtin.Unit")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.Y" .$ var "{arg:1}")
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.Y>[0]"
              [    var "<DerivedGen.Y>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:1}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkY>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Maybe" .$ var "Builtin.Unit")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Y" .$ var "{arg:1}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkY>>"
                             [       var "<<DerivedGen.MkY>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ (var "Prelude.Types.Just" .! ("ty", var "Builtin.Unit") .$ bindVar "x")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkY (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "DerivedGen.MkY" .! ("x", var "x")))
                             , var "<<DerivedGen.MkY>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.Y[0] (non-recursive)"))
                         .$ (var "<<DerivedGen.MkY>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:1}>")
                     }
              ]
          ]
      , scope = var "<DerivedGen.Y>[0]" .$ var "^outmost-fuel^" .$ var "outer^<c>"
      }

