1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (a : Y c) -> (b : Y c) -> Gen MaybeEmpty (X a b)
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ImplicitArg (Just "outer^<c>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<a>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<b>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.X>[0, 1, 2]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "a") (var "Prelude.Basics.Bool")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ var "a")
                           .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.Y" .$ var "a")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.X" .! ("a", var "a") .$ var "{arg:1}" .$ var "{arg:2}")
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.X>[0, 1, 2]"
              [       var "<DerivedGen.X>[0, 1, 2]"
                   .$ bindVar "^fuel_arg^"
                   .$ bindVar "inter^<a>"
                   .$ bindVar "inter^<{arg:1}>"
                   .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkX>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "a") (var "Prelude.Basics.Bool")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ var "a")
                                          .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.Y" .$ var "a")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.X" .! ("a", var "a") .$ var "{arg:1}" .$ var "{arg:2}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkX>>"
                             [ withClause
                                 { lhs =
                                        var "<<DerivedGen.MkX>>"
                                     .$ bindVar "^cons_fuel^"
                                     .$ bindVar "^bnd^{x:3651}"
                                     .$ bindVar "a"
                                     .$ (   var "DerivedGen.S"
                                         .! ("x'", implicitTrue)
                                         .! ("x", bindVar "to_be_deceqed^^^bnd^{x:3651}0")
                                         .$ bindVar "to_be_deceqed^^a1")
                                 , rig = MW
                                 , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^^bnd^{x:3651}0" .$ var "^bnd^{x:3651}"
                                 , prf = Nothing
                                 , flags = []
                                 , clauses =
                                     [ withClause
                                         { lhs =
                                                var "<<DerivedGen.MkX>>"
                                             .$ bindVar "^cons_fuel^"
                                             .$ bindVar "^bnd^{x:3651}"
                                             .$ bindVar "a"
                                             .$ (   var "DerivedGen.S"
                                                 .! ("x'", implicitTrue)
                                                 .! ("x", bindVar "^bnd^{x:3651}")
                                                 .$ bindVar "to_be_deceqed^^a1")
                                             .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                         , rig = MW
                                         , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^a1" .$ var "a"
                                         , prf = Nothing
                                         , flags = []
                                         , clauses =
                                             [       var "<<DerivedGen.MkX>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ bindVar "^bnd^{x:3651}"
                                                  .$ bindVar "a"
                                                  .$ (var "DerivedGen.S" .! ("x'", implicitTrue) .! ("x", bindVar "^bnd^{x:3651}") .$ bindVar "a")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                               .=    var "Test.DepTyCheck.Gen.label"
                                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkX (orders)"))
                                                  .$ (   var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (var "DerivedGen.MkX" .! ("{x:3651}", implicitTrue) .! ("a", var "a")))
                                             ,       var "<<DerivedGen.MkX>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ bindVar "^bnd^{x:3651}"
                                                  .$ bindVar "a"
                                                  .$ (   var "DerivedGen.S"
                                                      .! ("x'", implicitTrue)
                                                      .! ("x", bindVar "^bnd^{x:3651}")
                                                      .$ bindVar "to_be_deceqed^^a1")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.No" .$ implicitTrue)
                                               .= var "empty"
                                             ]
                                         }
                                     ,       var "<<DerivedGen.MkX>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ bindVar "^bnd^{x:3651}"
                                          .$ bindVar "a"
                                          .$ (   var "DerivedGen.S"
                                              .! ("x'", implicitTrue)
                                              .! ("x", bindVar "to_be_deceqed^^^bnd^{x:3651}0")
                                              .$ bindVar "to_be_deceqed^^a1")
                                          .$ (var "Prelude.No" .$ implicitTrue)
                                       .= var "empty"
                                     ]
                                 }
                             , var "<<DerivedGen.MkX>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[0, 1, 2] (non-recursive)"))
                         .$ (var "<<DerivedGen.MkX>>" .$ var "^fuel_arg^" .$ var "inter^<a>" .$ var "inter^<{arg:1}>" .$ var "inter^<{arg:2}>")
                     }
              ]
          ]
      , scope = var "<DerivedGen.X>[0, 1, 2]" .$ var "^outmost-fuel^" .$ var "outer^<c>" .$ var "outer^<a>" .$ var "outer^<b>"
      }

