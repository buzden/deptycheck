1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (n : Nat) -> (x : Nat) -> (sub : A x n) -> Gen MaybeEmpty (B sub)
LOG deptycheck.derive.least-effort:7: DerivedGen.B[0(n), 1(x), 2] B1 - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.B[0(n), 1(x), 2] B2 - used final order: []
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<x>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<sub>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.B>[0, 1, 2]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "x") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.A" .$ var "x" .$ var "n")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.B" .! ("n", var "n") .! ("x", var "x") .$ var "{arg:1}")
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.B>[0, 1, 2]"
              [    var "<DerivedGen.B>[0, 1, 2]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>" .$ bindVar "inter^<x>" .$ bindVar "inter^<{arg:1}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.B1>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "x") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.A" .$ var "x" .$ var "n")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.B" .! ("n", var "n") .! ("x", var "x") .$ var "{arg:1}")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.B2>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "x") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.A" .$ var "x" .$ var "n")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.B" .! ("n", var "n") .! ("x", var "x") .$ var "{arg:1}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.B1>>"
                             [       var "<<DerivedGen.B1>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ (var "Prelude.Types.plus" .$ bindVar "a" .$ bindVar "b")
                                  .$ (var "Prelude.Types.S" .$ bindVar "{x:1}")
                                  .$ (var "DerivedGen.A1" .! ("x", implicitTrue) .$ bindVar "a" .$ bindVar "b")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.B1 (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "DerivedGen.B1" .! ("{x:1}", var "{x:1}") .! ("b", var "b") .! ("a", var "a")))
                             , var "<<DerivedGen.B1>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.B2>>"
                             [       var "<<DerivedGen.B2>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ (   var "Prelude.Types.plus"
                                      .$ (var "Prelude.Types.plus" .$ bindVar "a" .$ bindVar "b")
                                      .$ (var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ var "Prelude.Types.Z")))
                                  .$ (var "Prelude.Types.S" .$ bindVar "{x:2}")
                                  .$ (var "DerivedGen.A2" .! ("x", implicitTrue) .$ bindVar "a" .$ bindVar "b")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.B2 (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "DerivedGen.B2" .! ("{x:2}", var "{x:2}") .! ("b", var "b") .! ("a", var "a")))
                             , var "<<DerivedGen.B2>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.B[0(n), 1(x), 2] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.oneOf"
                             .! ("em", var "MaybeEmpty")
                             .$ (   var "::"
                                 .$ (var "<<DerivedGen.B1>>" .$ var "^fuel_arg^" .$ var "inter^<n>" .$ var "inter^<x>" .$ var "inter^<{arg:1}>")
                                 .$ (   var "::"
                                     .$ (   var "<<DerivedGen.B2>>"
                                         .$ var "^fuel_arg^"
                                         .$ var "inter^<n>"
                                         .$ var "inter^<x>"
                                         .$ var "inter^<{arg:1}>")
                                     .$ var "Nil")))
                     }
              ]
          ]
      , scope = var "<DerivedGen.B>[0, 1, 2]" .$ var "^outmost-fuel^" .$ var "outer^<n>" .$ var "outer^<x>" .$ var "outer^<sub>"
      }

