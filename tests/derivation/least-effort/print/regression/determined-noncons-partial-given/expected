1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (b : Bool) -> (n : Nat) -> (y : Y (not b) n) -> Gen0 (X b y)
LOG deptycheck.derive.least-effort:7: DerivedGen.X[0(n), 1(b), 2] MkX - used final order: []
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<b>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<y>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.X>[0, 1, 2]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "b") (var "Prelude.Basics.Bool")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.Y" .$ (var "Prelude.Basics.not" .$ var "b") .$ var "n")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.X" .! ("n", var "n") .$ var "b" .$ var "{arg:1}")
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.X>[0, 1, 2]"
              [    var "<DerivedGen.X>[0, 1, 2]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>" .$ bindVar "inter^<b>" .$ bindVar "inter^<{arg:1}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkX>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "b") (var "Prelude.Basics.Bool")
                                          .-> MkArg
                                                MW
                                                ExplicitArg
                                                (Just "{arg:1}")
                                                (var "DerivedGen.Y" .$ (var "Prelude.Basics.not" .$ var "b") .$ var "n")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.X" .! ("n", var "n") .$ var "b" .$ var "{arg:1}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkX>>"
                             [       var "<<DerivedGen.MkX>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ bindVar "^bnd^{n:1}"
                                  .$ bindVar "b"
                                  .$ (var "DerivedGen.MkY" .! ("n", bindVar "^bnd^{n:1}") .! ("l", var "Prelude.Basics.not" .$ bindVar "b"))
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkX (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "DerivedGen.MkX" .! ("{n:1}", var "^bnd^{n:1}") .! ("b", var "b")))
                             , var "<<DerivedGen.MkX>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[0(n), 1(b), 2] (non-spending)"))
                         .$ (var "<<DerivedGen.MkX>>" .$ var "^fuel_arg^" .$ var "inter^<n>" .$ var "inter^<b>" .$ var "inter^<{arg:1}>")
                     }
              ]
          ]
      , scope = var "<DerivedGen.X>[0, 1, 2]" .$ var "^outmost-fuel^" .$ var "outer^<n>" .$ var "outer^<b>" .$ var "outer^<y>"
      }

