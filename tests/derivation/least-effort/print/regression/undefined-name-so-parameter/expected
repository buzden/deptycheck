1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> Gen MaybeEmpty X
LOG deptycheck.derive.least-effort:7: DerivedGen.X[] MkX - used final order: [#1 (x), #2]
LOG deptycheck.derive.least-effort:7: Data.So.So[0] Oh - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.BoolP[] TrueP - used final order: [#0 (x)]
LOG deptycheck.derive.least-effort:7: DerivedGen.BoolP[] FalseP - used final order: [#0 (x)]
LOG deptycheck.derive.least-effort:7: Builtin.Unit[] MkUnit - used final order: []
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.X>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Data.So.So>[0]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Basics.Bool")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "Data.So.So" .$ var "{arg:1}")
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.BoolP>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (   var "Builtin.DPair.DPair"
                                   .$ var "Builtin.Unit"
                                   .$ (MkArg MW ExplicitArg (Just "{arg:2}") (var "Builtin.Unit") .=> var "DerivedGen.BoolP" .$ var "{arg:2}"))
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Builtin.Unit>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Builtin.Unit"
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.X>[]"
              [    var "<DerivedGen.X>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkX>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkX>>"
                             [    var "<<DerivedGen.MkX>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkX (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.BoolP>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:1}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:1}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "u" .$ bindVar "x"
                                                      .=    var ">>="
                                                         .$ (   var "<Data.So.So>[0]"
                                                             .$ var "^outmost-fuel^"
                                                             .$ (var "DerivedGen.f" .! ("x", var "u") .$ var "x"))
                                                         .$ (    MkArg MW ExplicitArg (Just "{arg:3}") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (var "DerivedGen.MkX" .$ implicitTrue .$ implicitTrue .$ var "{arg:3}"))
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[] (non-spending)"))
                         .$ (var "<<DerivedGen.MkX>>" .$ var "^fuel_arg^")
                     }
              ]
          , IDef
              emptyFC
              "<Data.So.So>[0]"
              [    var "<Data.So.So>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:1}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.So.Oh>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Basics.Bool")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.So.So" .$ var "{arg:1}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Data.So.Oh>>"
                             [    var "<<Data.So.Oh>>" .$ bindVar "^cons_fuel^" .$ var "Prelude.Basics.True"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.So.Oh (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Data.So.Oh")
                             , var "<<Data.So.Oh>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Data.So.So[0] (non-spending)"))
                         .$ (var "<<Data.So.Oh>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:1}>")
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.BoolP>[]"
              [    var "<DerivedGen.BoolP>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.TrueP>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Builtin.Unit"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Builtin.Unit")
                                                      .=> var "DerivedGen.BoolP" .$ var "{arg:2}"))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.FalseP>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Builtin.Unit"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Builtin.Unit")
                                                      .=> var "DerivedGen.BoolP" .$ var "{arg:2}"))
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.TrueP>>"
                             [    var "<<DerivedGen.TrueP>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.TrueP (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Builtin.Unit>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "x") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "DerivedGen.TrueP" .! ("x", var "x")))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.FalseP>>"
                             [    var "<<DerivedGen.FalseP>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.FalseP (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Builtin.Unit>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "x") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "DerivedGen.FalseP" .! ("x", var "x")))))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.BoolP[] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.oneOf"
                             .! ("em", var "MaybeEmpty")
                             .$ (   var "::"
                                 .$ (var "<<DerivedGen.TrueP>>" .$ var "^fuel_arg^")
                                 .$ (var "::" .$ (var "<<DerivedGen.FalseP>>" .$ var "^fuel_arg^") .$ var "Nil")))
                     }
              ]
          , IDef
              emptyFC
              "<Builtin.Unit>[]"
              [    var "<Builtin.Unit>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Builtin.MkUnit>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Builtin.Unit"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Builtin.MkUnit>>"
                             [    var "<<Builtin.MkUnit>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Builtin.MkUnit (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Builtin.MkUnit")
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Builtin.Unit[] (non-spending)"))
                         .$ (var "<<Builtin.MkUnit>>" .$ var "^fuel_arg^")
                     }
              ]
          ]
      , scope = var "<DerivedGen.X>[]" .$ var "^outmost-fuel^"
      }

