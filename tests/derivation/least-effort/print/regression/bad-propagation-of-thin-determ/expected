1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (n : Nat) -> (ctx : Context n) -> Gen MaybeEmpty (Program ctx)
LOG deptycheck.derive.least-effort:7: DerivedGen.Program[0(n), 1(ctx)] Assign - used final order: [#8, #9]
LOG deptycheck.derive.least-effort:7: DerivedGen.Program[0(n), 1(ctx)] Finish - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.Duplicate[0(n), 3(vs)] JustDup - used final order: [#2 (src), #3 (dst)]
LOG deptycheck.derive.least-effort:7: Data.Fin.Fin[0(n)] FZ - used final order: []
LOG deptycheck.derive.least-effort:7: Data.Fin.Fin[0(n)] FS - used final order: [#1]
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<ctx>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Program>[0, 1]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "ctx") (var "DerivedGen.Context" .$ var "n")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.Program" .! ("n", var "n") .$ var "ctx")
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Duplicate>[0, 3]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "vs") (var "Data.Fin.Fin" .$ var "n")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (   var "Builtin.DPair.DPair"
                                   .$ (var "Data.Fin.Fin" .$ var "n")
                                   .$ (    MkArg MW ExplicitArg (Just "dst") (var "Data.Fin.Fin" .$ var "n")
                                       .=>    var "Builtin.DPair.DPair"
                                           .$ (var "Data.Fin.Fin" .$ var "n")
                                           .$ (    MkArg MW ExplicitArg (Just "src") (var "Data.Fin.Fin" .$ var "n")
                                               .=>    var "Builtin.DPair.DPair"
                                                   .$ (var "Data.Fin.Fin" .$ var "n")
                                                   .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fin.Fin" .$ var "n")
                                                       .=>    var "DerivedGen.Duplicate"
                                                           .! ("n", var "n")
                                                           .$ var "dst"
                                                           .$ var "src"
                                                           .$ var "vs"
                                                           .$ var "{arg:1}"))))
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Data.Fin.Fin>[0]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ (var "Data.Fin.Fin" .$ var "n")
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.Program>[0, 1]"
              [    var "<DerivedGen.Program>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>" .$ bindVar "inter^<ctx>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Assign>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "ctx") (var "DerivedGen.Context" .$ var "n")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Program" .! ("n", var "n") .$ var "ctx")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.Finish>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "ctx") (var "DerivedGen.Context" .$ var "n")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Program" .! ("n", var "n") .$ var "ctx")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.Assign>>"
                             [       var "<<DerivedGen.Assign>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ bindVar "n"
                                  .$ (var "DerivedGen.Ctx" .! ("n", implicitTrue) .$ bindVar "ols" .$ bindVar "uc" .$ bindVar "regs" .$ bindVar "fs")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Assign (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.Duplicate>[0, 3]" .$ var "^outmost-fuel^" .$ var "n" .$ var "regs")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:1}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:1}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [       var "Builtin.DPair.MkDPair"
                                                         .$ bindVar "target"
                                                         .$ (   var "Builtin.DPair.MkDPair"
                                                             .$ bindVar "i"
                                                             .$ (var "Builtin.DPair.MkDPair" .$ bindVar "contRegs" .$ bindVar "^bnd^{conArg:1}"))
                                                      .=    var ">>="
                                                         .$ (   var "<DerivedGen.Program>[0, 1]"
                                                             .$ var "^cons_fuel^"
                                                             .$ var "n"
                                                             .$ (   var "DerivedGen.Ctx"
                                                                 .! ("n", var "n")
                                                                 .$ var "ols"
                                                                 .$ var "uc"
                                                                 .$ var "contRegs"
                                                                 .$ var "fs"))
                                                         .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:2}") implicitFalse
                                                             .=>    var "Prelude.pure"
                                                                 .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                 .$ (   var "DerivedGen.Assign"
                                                                     .! ("n", implicitTrue)
                                                                     .! ("fs", implicitTrue)
                                                                     .! ("uc", implicitTrue)
                                                                     .! ("ols", implicitTrue)
                                                                     .! ("contRegs", implicitTrue)
                                                                     .! ("regs", implicitTrue)
                                                                     .$ implicitTrue
                                                                     .$ implicitTrue
                                                                     .@ var "^bnd^{conArg:1}"
                                                                     .$ var "^bnd^{arg:2}"))
                                                    ]
                                                }))
                             , var "<<DerivedGen.Assign>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.Finish>>"
                             [    var "<<DerivedGen.Finish>>" .$ bindVar "^cons_fuel^" .$ bindVar "^bnd^{n:1}" .$ bindVar "ctx"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.Finish (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "DerivedGen.Finish" .! ("{n:1}", implicitTrue) .! ("ctx", var "ctx")))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.Program[0(n), 1(ctx)] (dry fuel)"))
                                    .$ (var "<<DerivedGen.Finish>>" .$ var "^fuel_arg^" .$ var "inter^<n>" .$ var "inter^<ctx>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.Program[0(n), 1(ctx)] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                .$ (var "<<DerivedGen.Assign>>" .$ var "^sub^fuel_arg^" .$ var "inter^<n>" .$ var "inter^<ctx>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ var "Data.Nat1.one"
                                                    .$ (var "<<DerivedGen.Finish>>" .$ var "^fuel_arg^" .$ var "inter^<n>" .$ var "inter^<ctx>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.Duplicate>[0, 3]"
              [    var "<DerivedGen.Duplicate>[0, 3]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>" .$ bindVar "inter^<vs>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.JustDup>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "vs") (var "Data.Fin.Fin" .$ var "n")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ (var "Data.Fin.Fin" .$ var "n")
                                                  .$ (    MkArg MW ExplicitArg (Just "dst") (var "Data.Fin.Fin" .$ var "n")
                                                      .=>    var "Builtin.DPair.DPair"
                                                          .$ (var "Data.Fin.Fin" .$ var "n")
                                                          .$ (    MkArg MW ExplicitArg (Just "src") (var "Data.Fin.Fin" .$ var "n")
                                                              .=>    var "Builtin.DPair.DPair"
                                                                  .$ (var "Data.Fin.Fin" .$ var "n")
                                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fin.Fin" .$ var "n")
                                                                      .=>    var "DerivedGen.Duplicate"
                                                                          .! ("n", var "n")
                                                                          .$ var "dst"
                                                                          .$ var "src"
                                                                          .$ var "vs"
                                                                          .$ var "{arg:1}"))))
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.JustDup>>"
                             [    var "<<DerivedGen.JustDup>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "n") .$ bindVar "vs"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.JustDup (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.Fin.Fin>[0]" .$ var "^outmost-fuel^" .$ (var "Prelude.Types.S" .$ var "n"))
                                      .$ (    MkArg MW ExplicitArg (Just "src") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "<Data.Fin.Fin>[0]" .$ var "^outmost-fuel^" .$ (var "Prelude.Types.S" .$ var "n"))
                                              .$ (    MkArg MW ExplicitArg (Just "dst") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                          .$ implicitTrue
                                                          .$ (   var "Builtin.DPair.MkDPair"
                                                              .$ implicitTrue
                                                              .$ (   var "Builtin.DPair.MkDPair"
                                                                  .$ implicitTrue
                                                                  .$ (   var "DerivedGen.JustDup"
                                                                      .! ("n", implicitTrue)
                                                                      .! ("vs", var "vs")
                                                                      .! ("src", var "src")
                                                                      .! ("dst", var "dst"))))))))
                             , var "<<DerivedGen.JustDup>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.Duplicate[0(n), 3(vs)] (non-recursive)"))
                         .$ (var "<<DerivedGen.JustDup>>" .$ var "^fuel_arg^" .$ var "inter^<n>" .$ var "inter^<vs>")
                     }
              ]
          , IDef
              emptyFC
              "<Data.Fin.Fin>[0]"
              [    var "<Data.Fin.Fin>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.Fin.FZ>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.Fin.Fin" .$ var "n")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.Fin.FS>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.Fin.Fin" .$ var "n")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Data.Fin.FZ>>"
                             [    var "<<Data.Fin.FZ>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "k")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Fin.FZ (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "Data.Fin.FZ" .! ("k", var "k")))
                             , var "<<Data.Fin.FZ>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<Data.Fin.FS>>"
                             [    var "<<Data.Fin.FS>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "k")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Fin.FS (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.Fin.Fin>[0]" .$ var "^cons_fuel^" .$ var "k")
                                      .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:3}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Data.Fin.FS" .! ("k", implicitTrue) .$ var "^bnd^{arg:3}")))
                             , var "<<Data.Fin.FS>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Fin.Fin[0(n)] (dry fuel)"))
                                    .$ (var "<<Data.Fin.FZ>>" .$ var "^fuel_arg^" .$ var "inter^<n>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Fin.Fin[0(n)] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<Data.Fin.FZ>>" .$ var "^fuel_arg^" .$ var "inter^<n>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Data.Fin.FS>>" .$ var "^sub^fuel_arg^" .$ var "inter^<n>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          ]
      , scope = var "<DerivedGen.Program>[0, 1]" .$ var "^outmost-fuel^" .$ var "outer^<n>" .$ var "outer^<ctx>"
      }

