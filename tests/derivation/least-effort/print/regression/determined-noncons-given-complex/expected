1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (nats : NatsList) -> (fins : FinsList (nats .length)) -> Gen MaybeEmpty (Test nats fins)
LOG deptycheck.derive.least-effort:7: DerivedGen.Test[0(nats), 1] MkT - used final order: [#2 (f), #3]
LOG deptycheck.derive.least-effort:7: DerivedGen.FindNat[0(nats), 1] MHere - used final order: []
LOG deptycheck.derive.least-effort:7: Data.Fin.Fin[0(n)] FZ - used final order: []
LOG deptycheck.derive.least-effort:7: Data.Fin.Fin[0(n)] FS - used final order: [#1]
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<nats>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<fins>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Test>[0, 1]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "nats") (var "DerivedGen.B.NatsList")
                           .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.A.FinsList" .$ (var "DerivedGen.B..length" .$ var "nats"))
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.Test" .$ var "nats" .$ var "{arg:1}")
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.FindNat>[0, 1]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "nats") (var "DerivedGen.B.NatsList")
                           .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.Fin.Fin" .$ (var "DerivedGen.B..length" .$ var "nats"))
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.FindNat" .$ var "nats" .$ var "{arg:2}")
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy {name = "weight^Prelude.Types.Nat", type = MkArg MW ExplicitArg Nothing (var "Prelude.Types.Nat") .-> var "Data.Nat1.Nat1"}
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Data.Fin.Fin>[0]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ (var "Data.Fin.Fin" .$ var "n")
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.Test>[0, 1]"
              [    var "<DerivedGen.Test>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<nats>" .$ bindVar "inter^<{arg:1}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkT>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "nats") (var "DerivedGen.B.NatsList")
                                          .-> MkArg
                                                MW
                                                ExplicitArg
                                                (Just "{arg:1}")
                                                (var "DerivedGen.A.FinsList" .$ (var "DerivedGen.B..length" .$ var "nats"))
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Test" .$ var "nats" .$ var "{arg:1}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkT>>"
                             [    var "<<DerivedGen.MkT>>" .$ bindVar "^cons_fuel^" .$ bindVar "nats" .$ bindVar "fins"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkT (orders)"))
                                  .$ (   var ">>="
                                      .$ (   var "<Data.Fin.Fin>[0]"
                                          .$ var "^outmost-fuel^"
                                          .$ (var "DerivedGen.A..length" .! ("n", var "DerivedGen.B..length" .$ var "nats") .$ var "fins"))
                                      .$ (    MkArg MW ExplicitArg (Just "f") implicitFalse
                                          .=>    var ">>="
                                              .$ (   var "<DerivedGen.FindNat>[0, 1]"
                                                  .$ var "^outmost-fuel^"
                                                  .$ var "nats"
                                                  .$ (   var "DerivedGen.A.fst"
                                                      .! ("s", var "DerivedGen.B..length" .$ var "nats")
                                                      .$ var "fins"
                                                      .$ var "f"))
                                              .$ (    MkArg MW ExplicitArg (Just "{arg:3}") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "DerivedGen.MkT"
                                                          .! ("nats", implicitTrue)
                                                          .! ("fins", implicitTrue)
                                                          .! ("f", implicitTrue)
                                                          .$ var "{arg:3}"))))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.Test[0(nats), 1] (non-spending)"))
                         .$ (var "<<DerivedGen.MkT>>" .$ var "^fuel_arg^" .$ var "inter^<nats>" .$ var "inter^<{arg:1}>")
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.FindNat>[0, 1]"
              [    var "<DerivedGen.FindNat>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<nats>" .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MHere>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "nats") (var "DerivedGen.B.NatsList")
                                          .-> MkArg
                                                MW
                                                ExplicitArg
                                                (Just "{arg:2}")
                                                (var "Data.Fin.Fin" .$ (var "DerivedGen.B..length" .$ var "nats"))
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.FindNat" .$ var "nats" .$ var "{arg:2}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MHere>>"
                             [       var "<<DerivedGen.MHere>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ (var "DerivedGen.B.(::)" .$ bindVar "p" .$ bindVar "ps")
                                  .$ (var "Data.Fin.FZ" .! ("k", var "DerivedGen.B..length" .$ bindVar "ps"))
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MHere (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "DerivedGen.MHere" .! ("ps", var "ps") .! ("p", var "p")))
                             , var "<<DerivedGen.MHere>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.FindNat[0(nats), 1] (non-spending)"))
                         .$ (var "<<DerivedGen.MHere>>" .$ var "^fuel_arg^" .$ var "inter^<nats>" .$ var "inter^<{arg:2}>")
                     }
              ]
          , IDef
              emptyFC
              "weight^Prelude.Types.Nat"
              [ var "weight^Prelude.Types.Nat" .$ var "Prelude.Types.Z" .= var "Data.Nat1.one"
              ,    var "weight^Prelude.Types.Nat" .$ (var "Prelude.Types.S" .$ bindVar "arg^0")
                .= var "succ" .$ (var "weight^Prelude.Types.Nat" .$ var "arg^0")
              ]
          , IDef
              emptyFC
              "<Data.Fin.Fin>[0]"
              [    var "<Data.Fin.Fin>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.Fin.FZ>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.Fin.Fin" .$ var "n")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.Fin.FS>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.Fin.Fin" .$ var "n")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Data.Fin.FZ>>"
                             [    var "<<Data.Fin.FZ>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "k")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Fin.FZ (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "Data.Fin.FZ" .! ("k", var "k")))
                             , var "<<Data.Fin.FZ>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<Data.Fin.FS>>"
                             [    var "<<Data.Fin.FS>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "k")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Fin.FS (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.Fin.Fin>[0]" .$ var "^cons_fuel^" .$ var "k")
                                      .$ (    MkArg MW ExplicitArg (Just "{arg:4}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Data.Fin.FS" .! ("k", implicitTrue) .$ var "{arg:4}")))
                             , var "<<Data.Fin.FS>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Data.Fin.Fin[0(n)] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.frequency"
                             .$ (   var "::"
                                 .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<Data.Fin.FZ>>" .$ var "^fuel_arg^" .$ var "inter^<n>"))
                                 .$ (   var "::"
                                     .$ (   var "Builtin.MkPair"
                                         .$ (var "weight^Prelude.Types.Nat" .$ var "inter^<n>")
                                         .$ (var "<<Data.Fin.FS>>" .$ var "^fuel_arg^" .$ var "inter^<n>"))
                                     .$ var "Nil")))
                     }
              ]
          ]
      , scope = var "<DerivedGen.Test>[0, 1]" .$ var "^outmost-fuel^" .$ var "outer^<nats>" .$ var "outer^<fins>"
      }

