1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (xs : X) -> (ys : X) -> Gen MaybeEmpty (Y xs ys)
LOG deptycheck.derive.least-effort:7: DerivedGen.Y[0(xs), 1(ys)] A - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.Y[0(xs), 1(ys)] B - used final order: [#4]
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<xs>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<ys>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type = mkTy {name = "weight^DerivedGen.X", type = MkArg MW ExplicitArg Nothing (var "DerivedGen.X") .-> var "Data.Nat1.Nat1"}
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Y>[0, 1]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "xs") (var "DerivedGen.X")
                           .-> MkArg MW ExplicitArg (Just "ys") (var "DerivedGen.X")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.Y" .$ var "xs" .$ var "ys")
                       }
                 })
          , IDef
              emptyFC
              "weight^DerivedGen.X"
              [ var "weight^DerivedGen.X" .$ var "DerivedGen.Nil" .= var "Data.Nat1.one"
              ,    var "weight^DerivedGen.X" .$ (var "DerivedGen.(::)" .$ implicitTrue .$ bindVar "arg^1")
                .= var "succ" .$ (var "weight^DerivedGen.X" .$ var "arg^1")
              ]
          , IDef
              emptyFC
              "<DerivedGen.Y>[0, 1]"
              [    var "<DerivedGen.Y>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<xs>" .$ bindVar "inter^<ys>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.A>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "xs") (var "DerivedGen.X")
                                          .-> MkArg MW ExplicitArg (Just "ys") (var "DerivedGen.X")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Y" .$ var "xs" .$ var "ys")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.B>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "xs") (var "DerivedGen.X")
                                          .-> MkArg MW ExplicitArg (Just "ys") (var "DerivedGen.X")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.Y" .$ var "xs" .$ var "ys")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.A>>"
                             [ withClause
                                 { lhs =
                                        var "<<DerivedGen.A>>"
                                     .$ bindVar "^cons_fuel^"
                                     .$ (var "DerivedGen.(::)" .$ bindVar "x" .$ bindVar "xs")
                                     .$ (var "DerivedGen.(::)" .$ bindVar "to_be_deceqed^^x0" .$ bindVar "to_be_deceqed^^xs1")
                                 , rig = MW
                                 , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^xs1" .$ var "xs"
                                 , prf = Nothing
                                 , flags = []
                                 , clauses =
                                     [ withClause
                                         { lhs =
                                                var "<<DerivedGen.A>>"
                                             .$ bindVar "^cons_fuel^"
                                             .$ (var "DerivedGen.(::)" .$ bindVar "x" .$ bindVar "xs")
                                             .$ (var "DerivedGen.(::)" .$ bindVar "to_be_deceqed^^x0" .$ bindVar "xs")
                                             .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                         , rig = MW
                                         , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^x0" .$ var "x"
                                         , prf = Nothing
                                         , flags = []
                                         , clauses =
                                             [       var "<<DerivedGen.A>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ (var "DerivedGen.(::)" .$ bindVar "x" .$ bindVar "xs")
                                                  .$ (var "DerivedGen.(::)" .$ bindVar "x" .$ bindVar "xs")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                               .=    var "Test.DepTyCheck.Gen.label"
                                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.A (orders)"))
                                                  .$ (   var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (var "DerivedGen.A" .! ("xs", var "xs") .! ("x", var "x")))
                                             ,       var "<<DerivedGen.A>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ (var "DerivedGen.(::)" .$ bindVar "x" .$ bindVar "xs")
                                                  .$ (var "DerivedGen.(::)" .$ bindVar "to_be_deceqed^^x0" .$ bindVar "xs")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.No" .$ implicitTrue)
                                               .= var "empty"
                                             ]
                                         }
                                     ,       var "<<DerivedGen.A>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ (var "DerivedGen.(::)" .$ bindVar "x" .$ bindVar "xs")
                                          .$ (var "DerivedGen.(::)" .$ bindVar "to_be_deceqed^^x0" .$ bindVar "to_be_deceqed^^xs1")
                                          .$ (var "Prelude.No" .$ implicitTrue)
                                       .= var "empty"
                                     ]
                                 }
                             , var "<<DerivedGen.A>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.B>>"
                             [       var "<<DerivedGen.B>>"
                                  .$ bindVar "^cons_fuel^"
                                  .$ (var "DerivedGen.(::)" .$ bindVar "x" .$ bindVar "xs")
                                  .$ (var "DerivedGen.(::)" .$ bindVar "y" .$ bindVar "ys")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.B (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.Y>[0, 1]" .$ var "^cons_fuel^" .$ var "xs" .$ var "ys")
                                      .$ (    MkArg MW ExplicitArg (Just "{arg:1}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (   var "DerivedGen.B"
                                                  .! ("x", var "x")
                                                  .! ("y", var "y")
                                                  .! ("ys", implicitTrue)
                                                  .! ("xs", implicitTrue)
                                                  .$ var "{arg:1}")))
                             , var "<<DerivedGen.B>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.Y[0(xs), 1(ys)] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.frequency"
                             .$ (   var "::"
                                 .$ (   var "Builtin.MkPair"
                                     .$ var "Data.Nat1.one"
                                     .$ (var "<<DerivedGen.A>>" .$ var "^fuel_arg^" .$ var "inter^<xs>" .$ var "inter^<ys>"))
                                 .$ (   var "::"
                                     .$ (   var "Builtin.MkPair"
                                         .$ (var "weight^DerivedGen.X" .$ var "inter^<xs>")
                                         .$ (var "<<DerivedGen.B>>" .$ var "^fuel_arg^" .$ var "inter^<xs>" .$ var "inter^<ys>"))
                                     .$ var "Nil")))
                     }
              ]
          ]
      , scope = var "<DerivedGen.Y>[0, 1]" .$ var "^outmost-fuel^" .$ var "outer^<xs>" .$ var "outer^<ys>"
      }

