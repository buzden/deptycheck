1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (xs : X) -> (ys : X) -> Gen MaybeEmpty (Y xs ys)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<xs> : Implicit True)
    => (MW ExplicitArg outer^<ys> : Implicit True)
    => ILocal (IApp. IVar <DerivedGen.Y>[0, 1]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<xs>
                   $ IVar outer^<ys>)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.Y>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg xs : IVar DerivedGen.X)
                          -> (MW ExplicitArg ys : IVar DerivedGen.X)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar DerivedGen.Y
                                         $ IVar xs
                                         $ IVar ys))))
         IDef <DerivedGen.Y>[0, 1]
              [ PatClause (IApp. IVar <DerivedGen.Y>[0, 1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<xs>
                               $ IBindVar inter^<ys>)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal DerivedGen.Y[0, 1] (dry fuel))
                                                          $ (IApp. IVar <<DerivedGen.A>>
                                                                 $ IVar Data.Fuel.Dry
                                                                 $ IVar inter^<xs>
                                                                 $ IVar inter^<ys>))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal DerivedGen.Y[0, 1] (spend fuel))
                                                          $ (IApp. IVar Test.DepTyCheck.Gen.frequency
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar Builtin.MkPair
                                                                               $ IVar Data.Nat.Pos.one
                                                                               $ (IApp. IVar <<DerivedGen.A>>
                                                                                      $ IVar ^fuel_arg^
                                                                                      $ IVar inter^<xs>
                                                                                      $ IVar inter^<ys>))
                                                                        $ (IApp. IVar ::
                                                                               $ (IApp. IVar Builtin.MkPair
                                                                                      $ (IApp. IVar Deriving.DepTyCheck.Util.Reflection.leftDepth
                                                                                             $ IVar ^sub^fuel_arg^)
                                                                                      $ (IApp. IVar <<DerivedGen.B>>
                                                                                             $ IVar ^sub^fuel_arg^
                                                                                             $ IVar inter^<xs>
                                                                                             $ IVar inter^<ys>))
                                                                               $ IVar Nil)))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.A>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg xs : IVar DerivedGen.X)
                                             -> (MW ExplicitArg ys : IVar DerivedGen.X)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar DerivedGen.Y
                                                            $ IVar xs
                                                            $ IVar ys))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.B>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg xs : IVar DerivedGen.X)
                                             -> (MW ExplicitArg ys : IVar DerivedGen.X)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar DerivedGen.Y
                                                            $ IVar xs
                                                            $ IVar ys))))
                            IDef <<DerivedGen.A>>
                                 [ WithClause (IApp. IVar <<DerivedGen.A>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ (IApp. IVar DerivedGen.(::)
                                                          $ IBindVar x
                                                          $ IBindVar xs)
                                                   $ (IApp. IVar DerivedGen.(::)
                                                          $ IBindVar to_be_deceqed^^x0
                                                          $ IBindVar to_be_deceqed^^xs1))
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^xs1
                                                   $ IVar xs)

                                              []
                                              [ WithClause (IApp. IVar <<DerivedGen.A>>
                                                                $ IBindVar ^cons_fuel^
                                                                $ (IApp. IVar DerivedGen.(::)
                                                                       $ IBindVar x
                                                                       $ IBindVar xs)
                                                                $ (IApp. IVar DerivedGen.(::)
                                                                       $ IBindVar to_be_deceqed^^x0
                                                                       $ IBindVar xs)
                                                                $ (IApp. IVar Prelude.Yes
                                                                       $ IVar Builtin.Refl))
                                                           MW
                                                           (IApp. IVar Decidable.Equality.decEq
                                                                $ IVar to_be_deceqed^^x0
                                                                $ IVar x)

                                                           []
                                                           [ PatClause (IApp. IVar <<DerivedGen.A>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ (IApp. IVar DerivedGen.(::)
                                                                                   $ IBindVar x
                                                                                   $ IBindVar xs)
                                                                            $ (IApp. IVar DerivedGen.(::)
                                                                                   $ IBindVar x
                                                                                   $ IBindVar xs)
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl))
                                                                       (IApp. IVar Test.DepTyCheck.Gen.label
                                                                            $ (IApp. IVar fromString
                                                                                   $ IPrimVal DerivedGen.A (orders))
                                                                            $ (IApp. INamedApp (IVar Prelude.pure)
                                                                                               f
                                                                                               (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                    $ Implicit True)
                                                                                   $ INamedApp (INamedApp (IVar DerivedGen.A)
                                                                                                          xs
                                                                                                          (IVar xs))
                                                                                               x
                                                                                               (IVar x)))
                                                           , PatClause (IApp. IVar <<DerivedGen.A>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ (IApp. IVar DerivedGen.(::)
                                                                                   $ IBindVar x
                                                                                   $ IBindVar xs)
                                                                            $ (IApp. IVar DerivedGen.(::)
                                                                                   $ IBindVar to_be_deceqed^^x0
                                                                                   $ IBindVar xs)
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.No
                                                                                   $ Implicit True))
                                                                       (IVar empty) ]
                                              , PatClause (IApp. IVar <<DerivedGen.A>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ (IApp. IVar DerivedGen.(::)
                                                                      $ IBindVar x
                                                                      $ IBindVar xs)
                                                               $ (IApp. IVar DerivedGen.(::)
                                                                      $ IBindVar to_be_deceqed^^x0
                                                                      $ IBindVar to_be_deceqed^^xs1)
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ]
                                 , PatClause (IApp. IVar <<DerivedGen.A>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ]
                            IDef <<DerivedGen.B>>
                                 [ PatClause (IApp. IVar <<DerivedGen.B>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ (IApp. IVar DerivedGen.(::)
                                                         $ IBindVar x
                                                         $ IBindVar xs)
                                                  $ (IApp. IVar DerivedGen.(::)
                                                         $ IBindVar y
                                                         $ IBindVar ys))
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.B (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <DerivedGen.Y>[0, 1]
                                                                $ IVar ^cons_fuel^
                                                                $ IVar xs
                                                                $ IVar ys)
                                                         $ (ILam.  (MW ExplicitArg ^bnd^{arg:1} : Implicit False)
                                                                => (IApp. INamedApp (IVar Prelude.pure)
                                                                                    f
                                                                                    (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                         $ Implicit True)
                                                                        $ (IApp. INamedApp (INamedApp (INamedApp (INamedApp (IVar DerivedGen.B)
                                                                                                                            x
                                                                                                                            (IVar x))
                                                                                                                 y
                                                                                                                 (IVar y))
                                                                                                      ys
                                                                                                      (IVar ys))
                                                                                           xs
                                                                                           (IVar xs)
                                                                               $ IVar ^bnd^{arg:1})))))
                                 , PatClause (IApp. IVar <<DerivedGen.B>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
