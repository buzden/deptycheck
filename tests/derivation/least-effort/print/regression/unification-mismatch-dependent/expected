1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (x : X) -> (x' : X) -> Gen MaybeEmpty (Z x x')
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<x>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<x'>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.Z>[0, 1]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.X")
                     .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.X")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (var "DerivedGen.Z" .$ var "{arg:1}" .$ var "{arg:2}")
                 })
          , IDef
              emptyFC
              "<DerivedGen.Z>[0, 1]"
              [    var "<DerivedGen.Z>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:1}>" .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.MkZ>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "DerivedGen.X")
                                    .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "DerivedGen.X")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "DerivedGen.Z" .$ var "{arg:1}" .$ var "{arg:2}")
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkZ>>"
                             [ withClause
                                 { lhs =
                                        var "<<DerivedGen.MkZ>>"
                                     .$ bindVar "^cons_fuel^"
                                     .$ (var "DerivedGen.Cons" .$ bindVar "x" .$ bindVar "prf")
                                     .$ (var "DerivedGen.Cons" .$ bindVar "to_be_deceqed^^x0" .$ bindVar "to_be_deceqed^^prf1")
                                 , rig = MW
                                 , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^x0" .$ var "x"
                                 , prf = Nothing
                                 , flags = []
                                 , clauses =
                                     [ withClause
                                         { lhs =
                                                var "<<DerivedGen.MkZ>>"
                                             .$ bindVar "^cons_fuel^"
                                             .$ (var "DerivedGen.Cons" .$ bindVar "x" .$ bindVar "prf")
                                             .$ (var "DerivedGen.Cons" .$ bindVar "x" .$ bindVar "to_be_deceqed^^prf1")
                                             .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                         , rig = MW
                                         , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^prf1" .$ var "prf"
                                         , prf = Nothing
                                         , flags = []
                                         , clauses =
                                             [       var "<<DerivedGen.MkZ>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ (var "DerivedGen.Cons" .$ bindVar "x" .$ bindVar "prf")
                                                  .$ (var "DerivedGen.Cons" .$ bindVar "x" .$ bindVar "prf")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                               .=    var "Test.DepTyCheck.Gen.label"
                                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkZ (orders)"))
                                                  .$ (   var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (var "DerivedGen.MkZ" .! ("x", implicitTrue) .$ var "prf"))
                                             ,       var "<<DerivedGen.MkZ>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ (var "DerivedGen.Cons" .$ bindVar "x" .$ bindVar "prf")
                                                  .$ (var "DerivedGen.Cons" .$ bindVar "x" .$ bindVar "to_be_deceqed^^prf1")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.No" .$ implicitTrue)
                                               .= var "empty"
                                             ]
                                         }
                                     ,       var "<<DerivedGen.MkZ>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ (var "DerivedGen.Cons" .$ bindVar "x" .$ bindVar "prf")
                                          .$ (var "DerivedGen.Cons" .$ bindVar "to_be_deceqed^^x0" .$ bindVar "to_be_deceqed^^prf1")
                                          .$ (var "Prelude.No" .$ implicitTrue)
                                       .= var "empty"
                                     ]
                                 }
                             , var "<<DerivedGen.MkZ>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.Z[0, 1] (non-recursive)"))
                         .$ (var "<<DerivedGen.MkZ>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:1}>" .$ var "inter^<{arg:2}>")
                     }
              ]
          ]
      , scope = var "<DerivedGen.Z>[0, 1]" .$ var "^outmost-fuel^" .$ var "outer^<x>" .$ var "outer^<x'>"
      }

