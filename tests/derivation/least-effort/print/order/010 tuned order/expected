1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> Gen MaybeEmpty (n : Nat ** Y n)
LOG deptycheck.derive.least-effort:7: DerivedGen.Y[] MkYSimple - user-imposed: [#2 (a)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Y[] MkYSimple - used final order: [#0 (n), #2 (a), #1 (bef), #3 (aft)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Y[] MkYComplex - user-imposed: [#5 (a)]
LOG deptycheck.derive.least-effort:7: DerivedGen.Y[] MkYComplex - used final order: [#0, #2 (x), #4 (v), #5 (a), #1 (n), #3 (bef), #6 (aft)]
LOG deptycheck.derive.least-effort:7: Data.Fin.Fin[0(n)] FZ - used final order: []
LOG deptycheck.derive.least-effort:7: Data.Fin.Fin[0(n)] FS - used final order: [#1]
LOG deptycheck.derive.least-effort:7: DerivedGen.X[0] MkX - used final order: []
LOG deptycheck.derive.least-effort:7: Prelude.Types.Nat[] Z - used final order: []
LOG deptycheck.derive.least-effort:7: Prelude.Types.Nat[] S - used final order: [#0]
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.Y>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (   var "Builtin.DPair.DPair"
                                   .$ var "Prelude.Types.Nat"
                                   .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                       .=> var "DerivedGen.Y" .$ var "{arg:1}"))
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy {name = "weight^Prelude.Types.Nat", type = MkArg MW ExplicitArg Nothing (var "Prelude.Types.Nat") .-> var "Data.Nat1.Nat1"}
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Data.Fin.Fin>[0]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ (var "Data.Fin.Fin" .$ var "n")
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.X>[0]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "DerivedGen.X" .$ var "{arg:2}")
                       }
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Prelude.Types.Nat>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.Y>[]"
              [    var "<DerivedGen.Y>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkYSimple>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Types.Nat"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                      .=> var "DerivedGen.Y" .$ var "{arg:1}"))
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkYComplex>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (   var "Builtin.DPair.DPair"
                                                  .$ var "Prelude.Types.Nat"
                                                  .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                      .=> var "DerivedGen.Y" .$ var "{arg:1}"))
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkYSimple>>"
                             [    var "<<DerivedGen.MkYSimple>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkYSimple (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "n") implicitFalse
                                          .=>    var ">>="
                                              .$ (   var "<DerivedGen.X>[0]"
                                                  .$ var "^outmost-fuel^"
                                                  .$ (   var "Prelude.Types.plus"
                                                      .$ var "n"
                                                      .$ (var "Prelude.Types.S" .$ (var "Prelude.Types.S" .$ var "Prelude.Types.Z"))))
                                              .$ (    MkArg MW ExplicitArg (Just "a") implicitFalse
                                                  .=>    var ">>="
                                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                      .$ (    MkArg MW ExplicitArg (Just "bef") implicitFalse
                                                          .=>    var ">>="
                                                              .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                              .$ (    MkArg MW ExplicitArg (Just "aft") implicitFalse
                                                                  .=>    var "Prelude.pure"
                                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                                          .$ implicitTrue
                                                                          .$ (   var "DerivedGen.MkYSimple"
                                                                              .! ("n", implicitTrue)
                                                                              .$ var "bef"
                                                                              .$ var "a"
                                                                              .$ var "aft")))))))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkYComplex>>"
                             [    var "<<DerivedGen.MkYComplex>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkYComplex (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{n:1}") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "{n:1}")
                                              .$ (    MkArg MW ExplicitArg (Just "x") implicitFalse
                                                  .=>    var ">>="
                                                      .$ (   var "<Data.Fin.Fin>[0]"
                                                          .$ var "^outmost-fuel^"
                                                          .$ (var "DerivedGen.Hide.unX" .! ("n", var "{n:1}") .$ var "x"))
                                                      .$ (    MkArg MW ExplicitArg (Just "v") implicitFalse
                                                          .=>    var ">>="
                                                              .$ (   var "<DerivedGen.X>[0]"
                                                                  .$ var "^outmost-fuel^"
                                                                  .$ (   var "Data.Fin.finToNat"
                                                                      .! ("n", var "DerivedGen.Hide.unX" .! ("n", var "{n:1}") .$ var "x")
                                                                      .$ var "v"))
                                                              .$ (    MkArg MW ExplicitArg (Just "a") implicitFalse
                                                                  .=>    var ">>="
                                                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                                      .$ (    MkArg MW ExplicitArg (Just "n") implicitFalse
                                                                          .=>    var ">>="
                                                                              .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                                              .$ (    MkArg MW ExplicitArg (Just "bef") implicitFalse
                                                                                  .=>    var ">>="
                                                                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                                                      .$ (    MkArg MW ExplicitArg (Just "aft") implicitFalse
                                                                                          .=>    var "Prelude.pure"
                                                                                              .! ( "f"
                                                                                                 , var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue
                                                                                                 )
                                                                                              .$ (   var "Builtin.DPair.MkDPair"
                                                                                                  .$ implicitTrue
                                                                                                  .$ (   var "DerivedGen.MkYComplex"
                                                                                                      .! ("{n:1}", implicitTrue)
                                                                                                      .! ("n", var "n")
                                                                                                      .! ("x", implicitTrue)
                                                                                                      .$ var "bef"
                                                                                                      .$ implicitTrue
                                                                                                      .$ var "a"
                                                                                                      .$ var "aft"))))))))))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.Y[] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.oneOf"
                             .! ("em", var "MaybeEmpty")
                             .$ (   var "::"
                                 .$ (var "<<DerivedGen.MkYSimple>>" .$ var "^fuel_arg^")
                                 .$ (var "::" .$ (var "<<DerivedGen.MkYComplex>>" .$ var "^fuel_arg^") .$ var "Nil")))
                     }
              ]
          , IDef
              emptyFC
              "weight^Prelude.Types.Nat"
              [ var "weight^Prelude.Types.Nat" .$ var "Prelude.Types.Z" .= var "Data.Nat1.one"
              ,    var "weight^Prelude.Types.Nat" .$ (var "Prelude.Types.S" .$ bindVar "arg^0")
                .= var "succ" .$ (var "weight^Prelude.Types.Nat" .$ var "arg^0")
              ]
          , IDef
              emptyFC
              "<Data.Fin.Fin>[0]"
              [    var "<Data.Fin.Fin>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.Fin.FZ>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.Fin.Fin" .$ var "n")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.Fin.FS>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.Fin.Fin" .$ var "n")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Data.Fin.FZ>>"
                             [    var "<<Data.Fin.FZ>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "k")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Fin.FZ (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "Data.Fin.FZ" .! ("k", var "k")))
                             , var "<<Data.Fin.FZ>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<Data.Fin.FS>>"
                             [    var "<<Data.Fin.FS>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "k")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Fin.FS (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.Fin.Fin>[0]" .$ var "^cons_fuel^" .$ var "k")
                                      .$ (    MkArg MW ExplicitArg (Just "{arg:3}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Data.Fin.FS" .! ("k", implicitTrue) .$ var "{arg:3}")))
                             , var "<<Data.Fin.FS>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Data.Fin.Fin[0(n)] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.frequency"
                             .$ (   var "::"
                                 .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<Data.Fin.FZ>>" .$ var "^fuel_arg^" .$ var "inter^<n>"))
                                 .$ (   var "::"
                                     .$ (   var "Builtin.MkPair"
                                         .$ (var "weight^Prelude.Types.Nat" .$ var "inter^<n>")
                                         .$ (var "<<Data.Fin.FS>>" .$ var "^fuel_arg^" .$ var "inter^<n>"))
                                     .$ var "Nil")))
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.X>[0]"
              [    var "<DerivedGen.X>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:2}>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.MkX>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "DerivedGen.X" .$ var "{arg:2}")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkX>>"
                             [    var "<<DerivedGen.MkX>>" .$ bindVar "^cons_fuel^" .$ bindVar "x"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkX (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ (var "DerivedGen.MkX" .$ var "x"))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[0] (non-spending)"))
                         .$ (var "<<DerivedGen.MkX>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:2}>")
                     }
              ]
          , IDef
              emptyFC
              "<Prelude.Types.Nat>[]"
              [    var "<Prelude.Types.Nat>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Prelude.Types.Z>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ var "Prelude.Types.Nat"
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Prelude.Types.S>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ var "Prelude.Types.Nat"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Prelude.Types.Z>>"
                             [    var "<<Prelude.Types.Z>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Types.Z (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Prelude.Types.Z")
                             ]
                         , IDef
                             emptyFC
                             "<<Prelude.Types.S>>"
                             [    var "<<Prelude.Types.S>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Types.S (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{arg:4}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Prelude.Types.S" .$ var "{arg:4}")))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Prelude.Types.Nat[] (dry fuel)"))
                                    .$ (var "<<Prelude.Types.Z>>" .$ var "^fuel_arg^")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Prelude.Types.Nat[] (non-dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<Prelude.Types.Z>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Gen.ConsRecs.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Prelude.Types.S>>" .$ var "^sub^fuel_arg^"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          ]
      , scope = var "<DerivedGen.Y>[]" .$ var "^outmost-fuel^"
      }

