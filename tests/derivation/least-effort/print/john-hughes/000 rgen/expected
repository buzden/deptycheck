1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty Nat)} -> Gen MaybeEmpty R
LOG deptycheck.derive.least-effort:7: DerivedGen.R[] R - used final order: [#0 (a), #1 (b), #2 (c), #3 (d), #4 (e), #5 (f)]
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<Prelude.Types.Nat>[]")
      (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat")
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.R>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.R"
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.R>[]"
              [    var "<DerivedGen.R>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.R>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.R"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.R>>"
                             [    var "<<DerivedGen.R>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.R (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "a") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                              .$ (    MkArg MW ExplicitArg (Just "b") implicitFalse
                                                  .=>    var ">>="
                                                      .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                      .$ (    MkArg MW ExplicitArg (Just "c") implicitFalse
                                                          .=>    var ">>="
                                                              .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                              .$ (    MkArg MW ExplicitArg (Just "d") implicitFalse
                                                                  .=>    var ">>="
                                                                      .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                                      .$ (    MkArg MW ExplicitArg (Just "e") implicitFalse
                                                                          .=>    var ">>="
                                                                              .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                                                              .$ (    MkArg MW ExplicitArg (Just "f") implicitFalse
                                                                                  .=>    var "Prelude.pure"
                                                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                                      .$ (   var "DerivedGen.R"
                                                                                          .$ var "a"
                                                                                          .$ var "b"
                                                                                          .$ var "c"
                                                                                          .$ var "d"
                                                                                          .$ var "e"
                                                                                          .$ var "f"))))))))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.R[] (non-recursive)"))
                         .$ (var "<<DerivedGen.R>>" .$ var "^fuel_arg^")
                     }
              ]
          ]
      , scope = var "<DerivedGen.R>[]" .$ var "^outmost-fuel^"
      }

