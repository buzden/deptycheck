1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty String)} -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty Nat)} -> Gen MaybeEmpty Y
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<^prim^.String>[]")
      (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ primVal (PrT StringType))
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<Prelude.Types.Nat>[]")
      (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat")
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.Y>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.Y"
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.X>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:3}") (primVal (PrT StringType))
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (    MkArg MW ExplicitArg (Just "{arg:4}") (var "Prelude.Types.Nat")
                                 .=> var "DerivedGen.X" .$ var "{arg:3}" .$ var "{arg:4}"))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.X>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ primVal (PrT StringType)
                             .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (primVal (PrT StringType))
                                 .=>    var "Builtin.DPair.DPair"
                                     .$ var "Prelude.Types.Nat"
                                     .$ (    MkArg MW ExplicitArg (Just "{arg:4}") (var "Prelude.Types.Nat")
                                         .=> var "DerivedGen.X" .$ var "{arg:3}" .$ var "{arg:4}")))
                 })
          , IDef
              emptyFC
              "<DerivedGen.Y>[]"
              [    var "<DerivedGen.Y>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.MkY>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.Y"
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkY>>"
                             [    var "<<DerivedGen.MkY>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkY (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.X>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [       var "Builtin.DPair.MkDPair"
                                                         .$ bindVar "n"
                                                         .$ (var "Builtin.DPair.MkDPair" .$ bindVar "k" .$ bindVar "^bnd^{arg:5}")
                                                      .=    var ">>="
                                                         .$ (var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "n")
                                                         .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                                             .=> iCase
                                                                   { sc = var "{lamc:0}"
                                                                   , ty = implicitFalse
                                                                   , clauses =
                                                                       [    var "Builtin.DPair.MkDPair" .$ bindVar "m" .$ bindVar "^bnd^{arg:6}"
                                                                         .=    var "Prelude.pure"
                                                                            .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                            .$ (   var "DerivedGen.MkY"
                                                                                .! ("k", var "k")
                                                                                .! ("m", var "m")
                                                                                .! ("n", var "n")
                                                                                .$ var "^bnd^{arg:6}"
                                                                                .$ var "^bnd^{arg:5}")
                                                                       ]
                                                                   })
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.Y[] (non-recursive)"))
                         .$ (var "<<DerivedGen.MkY>>" .$ var "^fuel_arg^")
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.X>[0]"
              [    var "<DerivedGen.X>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:3}>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.MkX>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:3}") (primVal (PrT StringType))
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:4}") (var "Prelude.Types.Nat")
                                                .=> var "DerivedGen.X" .$ var "{arg:3}" .$ var "{arg:4}"))
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkX>>"
                             [    var "<<DerivedGen.MkX>>" .$ bindVar "^cons_fuel^" .$ bindVar "n"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkX (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "m") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "DerivedGen.MkX" .$ var "n" .$ var "m"))))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[0] (non-recursive)"))
                         .$ (var "<<DerivedGen.MkX>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:3}>")
                     }
              ]
          , IDef
              emptyFC
              "<DerivedGen.X>[]"
              [    var "<DerivedGen.X>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.MkX>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ primVal (PrT StringType)
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:3}") (primVal (PrT StringType))
                                                .=>    var "Builtin.DPair.DPair"
                                                    .$ var "Prelude.Types.Nat"
                                                    .$ (    MkArg MW ExplicitArg (Just "{arg:4}") (var "Prelude.Types.Nat")
                                                        .=> var "DerivedGen.X" .$ var "{arg:3}" .$ var "{arg:4}")))
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.MkX>>"
                             [    var "<<DerivedGen.MkX>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.MkX (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "n") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "external^<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                              .$ (    MkArg MW ExplicitArg (Just "m") implicitFalse
                                                  .=>    var "Prelude.pure"
                                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                      .$ (   var "Builtin.DPair.MkDPair"
                                                          .$ implicitTrue
                                                          .$ (   var "Builtin.DPair.MkDPair"
                                                              .$ implicitTrue
                                                              .$ (var "DerivedGen.MkX" .$ var "n" .$ var "m"))))))
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[] (non-recursive)"))
                         .$ (var "<<DerivedGen.MkX>>" .$ var "^fuel_arg^")
                     }
              ]
          ]
      , scope = var "<DerivedGen.Y>[]" .$ var "^outmost-fuel^"
      }

