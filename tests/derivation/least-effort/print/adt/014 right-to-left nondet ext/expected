1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty String)} -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty Nat)} -> Gen MaybeEmpty Y
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW AutoImplicit external^<^prim^.String>[] : IPi.  (MW ExplicitArg {arg:3664} : IVar Data.Fuel.Fuel)
                                                        -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                                $ IPrimVal String))
    => (MW AutoImplicit external^<Prelude.Types.Nat>[] : IPi.  (MW ExplicitArg {arg:3671} : IVar Data.Fuel.Fuel)
                                                            -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                    $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                                    $ IVar Prelude.Types.Nat))
    => ILocal (IApp. IVar <DerivedGen.Y>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IPrimVal String
                                         $ (ILam.  (MW ExplicitArg {arg:3630} : IPrimVal String)
                                                => (IApp. IVar Builtin.DPair.DPair
                                                        $ IVar Prelude.Types.Nat
                                                        $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                               => (IApp. IVar DerivedGen.X
                                                                       $ IVar {arg:3630}
                                                                       $ IVar {arg:3633}))))))))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:3630} : IPrimVal String)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar DerivedGen.X
                                                        $ IVar {arg:3630}
                                                        $ IVar {arg:3633}))))))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.Y>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ IVar DerivedGen.Y)))
         IDef <DerivedGen.X>[]
              [ PatClause (IApp. IVar <DerivedGen.X>[] $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar <<DerivedGen.MkX>>
                                       $ IVar ^fuel_arg^))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IPrimVal String
                                                            $ (ILam.  (MW ExplicitArg {arg:3630} : IPrimVal String)
                                                                   => (IApp. IVar Builtin.DPair.DPair
                                                                           $ IVar Prelude.Types.Nat
                                                                           $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                                                  => (IApp. IVar DerivedGen.X
                                                                                          $ IVar {arg:3630}
                                                                                          $ IVar {arg:3633}))))))))
                            IDef <<DerivedGen.MkX>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar >>=
                                                  $ (IApp. IVar external^<^prim^.String>[]
                                                         $ IVar ^outmost-fuel^)
                                                  $ (ILam.  (MW ExplicitArg n : Implicit False)
                                                         => (IApp. IVar >>=
                                                                 $ (IApp. IVar external^<Prelude.Types.Nat>[]
                                                                        $ IVar ^outmost-fuel^)
                                                                 $ (ILam.  (MW ExplicitArg m : Implicit False)
                                                                        => (IApp. INamedApp (IVar Prelude.pure)
                                                                                            f
                                                                                            (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                 $ Implicit True)
                                                                                $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                       $ Implicit True
                                                                                       $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                              $ Implicit True
                                                                                              $ (IApp. IVar DerivedGen.MkX
                                                                                                     $ IVar n
                                                                                                     $ IVar m)))))))) ] ]
         IDef <DerivedGen.X>[0]
              [ PatClause (IApp. IVar <DerivedGen.X>[0]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<{arg:3630}>)
                          (ILocal (IApp. IVar <<DerivedGen.MkX>>
                                       $ IVar ^fuel_arg^
                                       $ IVar inter^<{arg:3630}>))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IPrimVal String)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar DerivedGen.X
                                                                           $ IVar {arg:3630}
                                                                           $ IVar {arg:3633}))))))
                            IDef <<DerivedGen.MkX>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar n)
                                             (IApp. IVar >>=
                                                  $ (IApp. IVar external^<Prelude.Types.Nat>[]
                                                         $ IVar ^outmost-fuel^)
                                                  $ (ILam.  (MW ExplicitArg m : Implicit False)
                                                         => (IApp. INamedApp (IVar Prelude.pure)
                                                                             f
                                                                             (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                  $ Implicit True)
                                                                 $ (IApp. IVar Builtin.DPair.MkDPair
                                                                        $ Implicit True
                                                                        $ (IApp. IVar DerivedGen.MkX
                                                                               $ IVar n
                                                                               $ IVar m))))) ] ]
         IDef <DerivedGen.Y>[]
              [ PatClause (IApp. IVar <DerivedGen.Y>[] $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar <<DerivedGen.MkY>>
                                       $ IVar ^fuel_arg^))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkY>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ IVar DerivedGen.Y)))
                            IDef <<DerivedGen.MkY>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkY>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar >>=
                                                  $ (IApp. IVar <DerivedGen.X>[]
                                                         $ IVar ^outmost-fuel^)
                                                  $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                         => ICase (IVar {lamc:0})
                                                                  (Implicit False)
                                                                  [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                   $ IBindVar n
                                                                                   $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                          $ IBindVar k
                                                                                          $ IBindVar ^bnd^{arg:3654}))
                                                                              (IApp. IVar >>=
                                                                                   $ (IApp. IVar <DerivedGen.X>[0]
                                                                                          $ IVar ^outmost-fuel^
                                                                                          $ IVar n)
                                                                                   $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                                          => ICase (IVar {lamc:0})
                                                                                                   (Implicit False)
                                                                                                   [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                                                    $ IBindVar m
                                                                                                                    $ IBindVar ^bnd^{arg:3651})
                                                                                                               (IApp. INamedApp (IVar Prelude.pure)
                                                                                                                                f
                                                                                                                                (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                                                     $ Implicit True)
                                                                                                                    $ (IApp. INamedApp (INamedApp (INamedApp (IVar DerivedGen.MkY)
                                                                                                                                                             k
                                                                                                                                                             (IVar k))
                                                                                                                                                  m
                                                                                                                                                  (IVar m))
                                                                                                                                       n
                                                                                                                                       (IVar n)
                                                                                                                           $ IVar ^bnd^{arg:3651}
                                                                                                                           $ IVar ^bnd^{arg:3654})) ])) ])) ] ]
