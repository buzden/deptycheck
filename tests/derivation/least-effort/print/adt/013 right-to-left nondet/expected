1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen MaybeEmpty Y
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <DerivedGen.Y>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <Prelude.Types.Nat>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ IVar Prelude.Types.Nat)))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar Builtin.DPair.DPair
                                                        $ IVar Prelude.Types.Nat
                                                        $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                               => (IApp. IVar DerivedGen.X
                                                                       $ IVar {arg:3630}
                                                                       $ IVar {arg:3633}))))))))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar DerivedGen.X
                                                        $ IVar {arg:3630}
                                                        $ IVar {arg:3633}))))))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.Y>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ IVar DerivedGen.Y)))
         IDef <Prelude.Types.Nat>[]
              [ PatClause (IApp. IVar <Prelude.Types.Nat>[]
                               $ IBindVar ^fuel_arg^)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal Prelude.Types.Nat[] (dry fuel))
                                                          $ (IApp. IVar <<Prelude.Types.Z>>
                                                                 $ IVar Data.Fuel.Dry))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal Prelude.Types.Nat[] (spend fuel))
                                                          $ (IApp. IVar Test.DepTyCheck.Gen.frequency
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar Builtin.MkPair
                                                                               $ IVar Data.Nat.Pos.one
                                                                               $ (IApp. IVar <<Prelude.Types.Z>>
                                                                                      $ IVar ^fuel_arg^))
                                                                        $ (IApp. IVar ::
                                                                               $ (IApp. IVar Builtin.MkPair
                                                                                      $ (IApp. IVar Deriving.DepTyCheck.Util.Reflection.leftDepth
                                                                                             $ IVar ^sub^fuel_arg^)
                                                                                      $ (IApp. IVar <<Prelude.Types.S>>
                                                                                             $ IVar ^sub^fuel_arg^))
                                                                               $ IVar Nil)))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Types.Z>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ IVar Prelude.Types.Nat)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Types.S>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ IVar Prelude.Types.Nat)))
                            IDef <<Prelude.Types.Z>>
                                 [ PatClause (IApp. IVar <<Prelude.Types.Z>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal Prelude.Types.Z (orders))
                                                  $ (IApp. INamedApp (IVar Prelude.pure)
                                                                     f
                                                                     (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                          $ Implicit True)
                                                         $ IVar Prelude.Types.Z)) ]
                            IDef <<Prelude.Types.S>>
                                 [ PatClause (IApp. IVar <<Prelude.Types.S>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal Prelude.Types.S (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <Prelude.Types.Nat>[]
                                                                $ IVar ^cons_fuel^)
                                                         $ (ILam.  (MW ExplicitArg ^bnd^{arg:651} : Implicit False)
                                                                => (IApp. INamedApp (IVar Prelude.pure)
                                                                                    f
                                                                                    (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                         $ Implicit True)
                                                                        $ (IApp. IVar Prelude.Types.S
                                                                               $ IVar ^bnd^{arg:651}))))) ] ]
         IDef <DerivedGen.X>[]
              [ PatClause (IApp. IVar <DerivedGen.X>[] $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.label
                                       $ (IApp. IVar fromString
                                              $ IPrimVal DerivedGen.X[] (non-recursive))
                                       $ (IApp. IVar <<DerivedGen.MkX>>
                                              $ IVar ^fuel_arg^)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar Builtin.DPair.DPair
                                                                           $ IVar Prelude.Types.Nat
                                                                           $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                                                  => (IApp. IVar DerivedGen.X
                                                                                          $ IVar {arg:3630}
                                                                                          $ IVar {arg:3633}))))))))
                            IDef <<DerivedGen.MkX>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.MkX (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <Prelude.Types.Nat>[]
                                                                $ IVar ^outmost-fuel^)
                                                         $ (ILam.  (MW ExplicitArg n : Implicit False)
                                                                => (IApp. IVar >>=
                                                                        $ (IApp. IVar <Prelude.Types.Nat>[]
                                                                               $ IVar ^outmost-fuel^)
                                                                        $ (ILam.  (MW ExplicitArg m : Implicit False)
                                                                               => (IApp. INamedApp (IVar Prelude.pure)
                                                                                                   f
                                                                                                   (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                        $ Implicit True)
                                                                                       $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                              $ Implicit True
                                                                                              $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                     $ Implicit True
                                                                                                     $ INamedApp (INamedApp (IVar DerivedGen.MkX)
                                                                                                                            n
                                                                                                                            (IVar n))
                                                                                                                 m
                                                                                                                 (IVar m))))))))) ] ]
         IDef <DerivedGen.X>[0]
              [ PatClause (IApp. IVar <DerivedGen.X>[0]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<{arg:3630}>)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.label
                                       $ (IApp. IVar fromString
                                              $ IPrimVal DerivedGen.X[0] (non-recursive))
                                       $ (IApp. IVar <<DerivedGen.MkX>>
                                              $ IVar ^fuel_arg^
                                              $ IVar inter^<{arg:3630}>)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar DerivedGen.X
                                                                           $ IVar {arg:3630}
                                                                           $ IVar {arg:3633}))))))
                            IDef <<DerivedGen.MkX>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar n)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.MkX (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <Prelude.Types.Nat>[]
                                                                $ IVar ^outmost-fuel^)
                                                         $ (ILam.  (MW ExplicitArg m : Implicit False)
                                                                => (IApp. INamedApp (IVar Prelude.pure)
                                                                                    f
                                                                                    (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                         $ Implicit True)
                                                                        $ (IApp. IVar Builtin.DPair.MkDPair
                                                                               $ Implicit True
                                                                               $ INamedApp (INamedApp (IVar DerivedGen.MkX)
                                                                                                      n
                                                                                                      (IVar n))
                                                                                           m
                                                                                           (IVar m)))))) ] ]
         IDef <DerivedGen.Y>[]
              [ PatClause (IApp. IVar <DerivedGen.Y>[] $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.label
                                       $ (IApp. IVar fromString
                                              $ IPrimVal DerivedGen.Y[] (non-recursive))
                                       $ (IApp. IVar <<DerivedGen.MkY>>
                                              $ IVar ^fuel_arg^)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkY>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ IVar DerivedGen.Y)))
                            IDef <<DerivedGen.MkY>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkY>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.MkY (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <DerivedGen.X>[]
                                                                $ IVar ^outmost-fuel^)
                                                         $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                => ICase (IVar {lamc:0})
                                                                         (Implicit False)
                                                                         [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                          $ IBindVar n
                                                                                          $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                 $ IBindVar k
                                                                                                 $ IBindVar ^bnd^{arg:3654}))
                                                                                     (IApp. IVar >>=
                                                                                          $ (IApp. IVar <DerivedGen.X>[0]
                                                                                                 $ IVar ^outmost-fuel^
                                                                                                 $ IVar n)
                                                                                          $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                                                 => ICase (IVar {lamc:0})
                                                                                                          (Implicit False)
                                                                                                          [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                                                           $ IBindVar m
                                                                                                                           $ IBindVar ^bnd^{arg:3651})
                                                                                                                      (IApp. INamedApp (IVar Prelude.pure)
                                                                                                                                       f
                                                                                                                                       (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                                                            $ Implicit True)
                                                                                                                           $ (IApp. INamedApp (INamedApp (INamedApp (IVar DerivedGen.MkY)
                                                                                                                                                                    k
                                                                                                                                                                    (IVar k))
                                                                                                                                                         m
                                                                                                                                                         (IVar m))
                                                                                                                                              n
                                                                                                                                              (IVar n)
                                                                                                                                  $ IVar ^bnd^{arg:3651}
                                                                                                                                  $ IVar ^bnd^{arg:3654})) ])) ]))) ] ]
