1/1: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> Gen MaybeEmpty X
LOG deptycheck.derive.least-effort:7: DerivedGen.X[] A - used final order: [#0]
LOG deptycheck.derive.least-effort:7: DerivedGen.X[] B - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.X[] C - used final order: []
LOG deptycheck.derive.least-effort:7: DerivedGen.X[] D - used final order: []
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<DerivedGen.X>[]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                       }
                 })
          , IDef
              emptyFC
              "<DerivedGen.X>[]"
              [    var "<DerivedGen.X>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.A>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.B>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.C>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<DerivedGen.D>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.A>>"
                             [    var "<<DerivedGen.A>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.A (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<DerivedGen.X>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:1}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "DerivedGen.A" .$ var "^bnd^{arg:1}")))
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.B>>"
                             [    var "<<DerivedGen.B>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.B (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "DerivedGen.B")
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.C>>"
                             [    var "<<DerivedGen.C>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.C (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "DerivedGen.C")
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.D>>"
                             [    var "<<DerivedGen.D>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "DerivedGen.D (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "DerivedGen.D")
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.X[] (dry fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ (var "fromInteger" .$ primVal (BI 2))
                                                .$ (var "<<DerivedGen.B>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "fromInteger" .$ primVal (BI 4))
                                                    .$ (var "<<DerivedGen.C>>" .$ var "^fuel_arg^"))
                                                .$ (   var "::"
                                                    .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<DerivedGen.D>>" .$ var "^fuel_arg^"))
                                                    .$ var "Nil"))))
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "DerivedGen.X[] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                .$ (var "<<DerivedGen.A>>" .$ var "^sub^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "fromInteger" .$ primVal (BI 2))
                                                    .$ (var "<<DerivedGen.B>>" .$ var "^fuel_arg^"))
                                                .$ (   var "::"
                                                    .$ (   var "Builtin.MkPair"
                                                        .$ (var "fromInteger" .$ primVal (BI 4))
                                                        .$ (var "<<DerivedGen.C>>" .$ var "^fuel_arg^"))
                                                    .$ (   var "::"
                                                        .$ (   var "Builtin.MkPair"
                                                            .$ var "Data.Nat1.one"
                                                            .$ (var "<<DerivedGen.D>>" .$ var "^fuel_arg^"))
                                                        .$ var "Nil")))))
                               ]
                           }
                     }
              ]
          ]
      , scope = var "<DerivedGen.X>[]" .$ var "^outmost-fuel^"
      }

