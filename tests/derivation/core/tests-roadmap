---------------
--- Concept ---
---------------

Independent metrics:
  - recursive types (norec, rec)
  - dependent types or polymorphism, either:
    - no dependency or polymorphism (nodep)
    - in types of constructor parameters of the target type (part)
    - in the target type (t-)
      - particular manifestation of dependent types or polymorphism
        - position in the type signature (if present)
          - being given (..->)
          - being generated (->..)
        - freeness of variety
          - type parameters (p)
          - type indices (GADTs) (i)
  - use of external generators (noext, ext)

`->` is replaced by `--` for compatibility with Windows file naming rules.

------------------------
--- Particular cases ---
------------------------

trivial (norec nodep noext) (+)
  `()`
  should refuse the following
    `Void`

--- Non-recursive ---

norec nodep noext (+)
  `Bool`
  `data X = X0 | X1 Bool | X2 Bool Bool`
  should refuse the following
    `data X = MkX Void`
    `data X = MkX Bool Void`
    `data X = X0 | X1 Bool | X2 Void Bool`

norec nodep ext (+)
  given gen for `String`, derive for `data X = MkX String`
  given gen for `String`, derive for `data X = MkX String String`
  given gens for `String` and `Nat`, derive for `data X = MkX String Nat`
  given gens for `String` and `Nat`, derive for `data X = X1 String Nat | X2 Nat | X3 String`
  given gen for `Void` (in fact, empty), derive for `data X = MkX Void`

norec part noext (+)
  will refuse to derive the following, this is expected behaviour for now, to be reworked
    `Maybe Bool`
    `(Bool, Bool)`
  `data X = MkX (Maybe Bool)`
  `data X = MkX (Bool, Bool)`
  `data X = X0 | X1 (Maybe Bool) | X2 Bool (Bool, Bool)`

norec part ext (+)
  given gen for `String`, derive for `data X = MkX (Maybe String)`
  given gen for `String` and `Nat`, derive for `data X = MkX (String, Nat)` -- norec because gen for `Nat` is given, not derived
  given gen for `String` and `Nat`, derive for `data X = MkX (String, Nat, String)` -- norec because gen for `Nat` is given, not derived
  will refuse to derive the following, this is expected behaviour for now, to be reworked
    given gen for `String`, derive for `Maybe String`
    given gen for `String` and `Nat`, derive for `(String, Nat)` -- norec because gen for `Nat` is given, not derived
    given gen for `String` and `Nat`, derive for `(String, Nat, String)` -- norec because gen for `Nat` is given, not derived

norec t-p.->.. noext (+)
  ``` data X : Bool -> Bool -> Type where -- both type arguments are parameters, not indices
        MkX : (b1 : Bool) -> (b2 : Bool) -> X b1 b2
      ``` derive for `X b1 b2`
  ``` data X : Bool -> Bool -> Type where -- both type arguments are parameters, not indices
        X0 : (b1 : Bool) -> (b2 : Bool) -> X b1 b2
        X1 : X b1 b2
      ``` derive for `X b1 b2`
  ``` data X : Bool -> Bool -> Type where -- both type arguments are parameters, not indices
        X0 : (b1 : Bool) -> (b2 : Bool) -> X b1 b2
        X1 : Unit -> X b1 b2
      ``` derive for `X b1 b2`

norec t-p.->.. ext (+)
  given gen for `a`, derive for `Maybe a`, run `Maybe String` with `%hint` for `String`
  given gens for `a` and `b`, derive for `(a, b), run `(String, Nat)` for `%hint` for `String` and `Nat`
  will refuse to derive the following, this is expected behaviour for now, to be reworked
    given gen for `a`, derive for `Maybe (a, a)`, run `Maybe (String, String)` with `%hint` for `String`
    given gens for `a` and `b`, derive for `Maybe (a, b, a)`, run `Maybe (String, Nat, String)` with `%hint` for `String` and `Nat`
  `data X a = MkX (Maybe (a, a))`, given gen for `a` derive for `X a`, run `X String` with `%hint` for `String`
  `data X a b = MkX (Maybe (a, b, a))`, given gens for `a` and `b` derive for `X a b`, run `X String Nat` with `%hint` for `String` and `Nat`

norec t-pi->.. noext (+)
  `(a, b : Bool) -> Gen MaybeEmpty (a = b)`
  `(a, b : Nat) -> Gen MaybeEmpty (a = b)`
  ``` data X : Bool -> Bool -> Type where -- isn't one of the arguments an index, not a param?
        MkX : (b1 : Bool) -> (b2 : Bool) -> (b1 = b2) -> X b1 b2
      ``` derive for `X b1 b2`
  ``` data X : Bool -> Bool -> Type where -- isn't one of the arguments an index, not a param?
        X0 : (b1 : Bool) -> (b2 : Bool) -> (b1 = b2) -> X b1 b2
        X1 : X b1 b2
      ``` derive for `X b1 b2`

norec t-pi->.. ext (+)
  given `DecEq a`, derive for `(x, y : a) -> Gen MaybeEmpty (x = y)`

norec t-..->p. noext (+)
  ``` data X : Bool -> Bool -> Type where -- both type arguments are parameters, not indices
        MkX : (b1 : Bool) -> (b2 : Bool) -> X b1 b2
      ``` derive for `(b1 ** b2 ** X b1 b2)`
  ``` data X : Bool -> Bool -> Type where -- both type arguments are parameters, not indices
        X0 : (b1 : Bool) -> (b2 : Bool) -> X b1 b2
        X1 : X b1 b2
      ``` derive for `(b1 ** b2 ** X b1 b2)`

norec t-..->p. ext (-)
  ``` data X : (n : Nat) -> Type where -- `n` is a parameter, not index
        X0 : X n
      ``` given gen for `Nat`, derive for `(n ** X n)`
  ``` data X : (n : Nat) -> Type where -- `n` is a parameter, not index
        X0 : (n : Nat) -> X n
      ``` given gen for `Nat`, derive for `(n ** X n)`
  ``` data X : (n : Nat) -> (m : Nat) -> Type where -- `n` and `m` are parameters, not indices
        Xn : (n : Nat) -> X n m
        Xm : (m : Nat) -> X n m
      ``` given gen for `Nat`, derive for `(n ** m ** X n m)`
  ``` data X : (n : Nat) -> (m : Nat) -> Type where -- `n` and `m` are parameters, not indices
        Xn : (n : Nat) -> X n m
        Xm : Vect n String -> (m : Nat) -> X n m
      ``` given gens for `Nat` and for `n -> Vect n String`, derive for `(n ** m ** X n m)`
  it seems these shall be negative tests
    given gen for `(t : Type ** t)`, derive for `(a ** Maybe a)`
    given gen for `(t : Type ** t)`, derive for `(a ** b ** Either a b)`

norec t-..->pi noext (-)
  ``` data X : Bool -> Bool -> Type where -- isn't one of the arguments an index, not a param?
        MkX : (b1 : Bool) -> (b2 : Bool) -> (b1 = b2) -> X b1 b2
      ``` derive for `(b1 ** b2 ** X b1 b2)`
  ``` data X : Bool -> Bool -> Type where -- isn't one of the arguments an index, not a param?
        X0 : (b1 : Bool) -> (b2 : Bool) -> (b1 = b2) -> X b1 b2
        X1 : X b1 b2
      ``` derive for `(b1 ** b2 ** X b1 b2)`
  `(x : Bool ** y : Bool ** x = y)`

norec t-..->pi ext (-)
  given gen for `a`, derive for `(x : a ** y : a ** x = y)`

norec t-.i->.. noext (-)
  ``` data X : String -> Type where
        X0 : X "x0"
        X1 : X "x1"
      ``` derive for `(s ** X s)`; no external `Gen String` should be required;
  addition of external `Gen String` to the one above must not change anything

norec t-.i->.. ext (-)
  ``` data X : String -> Type where
        X0 : X "x0"
        X1 : X "x1"
        Xn : (s : String) -> X s
      ``` given gen for `String`, derive for `(s ** X s)`

norec t-p.->p. noext (-)
  ``` data X : Bool -> Bool -> Type where -- both type arguments are parameters, not indices
        MkX : (b1 : Bool) -> (b2 : Bool) -> X b1 b2
      ``` derive for `(b2 ** X b1 b2)`
  ``` data X : Bool -> Bool -> Type where -- both type arguments are parameters, not indices
        MkX : (b1 : Bool) -> (b2 : Bool) -> X b1 b2
      ``` derive for `(b1 ** X b1 b2)`

norec t-p.->p. ext (-)
  ``` data X : (n : Nat) -> (m : Nat) -> Type where -- `n` and `m` are parameters, not indices
        Xn : (n : Nat) -> X n m
        Xm : (m : Nat) -> X n m
      ``` given gen for `Nat`, derive for `(m ** X n m)`
  ``` data X : (n : Nat) -> (m : Nat) -> Type where -- `n` and `m` are parameters, not indices
        Xn : (n : Nat) -> X n m
        Xm : (m : Nat) -> X n m
      ``` given gen for `Nat`, derive for `(n ** X n m)`
  it seems these shall be negative tests
    given gens for `a` and `(t : Type ** t)`, derive for `(b ** Either a b)`

norec t-p.->.i noext (-)
  ``` data X : Bool -> Bool -> Type where -- isn't one of the arguments an index, not a param?
        MkX : (b1 : Bool) -> (b2 : Bool) -> (b1 = b2) -> X b1 b2
      ``` derive for `(b2 ** X b1 b2)`
  ``` data X : Bool -> Bool -> Type where -- isn't one of the arguments an index, not a param?
        MkX : (b1 : Bool) -> (b2 : Bool) -> (b1 = b2) -> X b1 b2
      ``` derive for `(b1 ** X b1 b2)`
  `(a : Nat) -> Gen MaybeEmpty (b : Nat ** a = b)`
  `(b : Nat) -> Gen MaybeEmpty (a : Nat ** a = b)`
  `(x : a) -> Gen MaybeEmpty (y : a ** x = y)`
  `(y : a) -> Gen MaybeEmpty (x : a ** x = y)`

--- Recursive ---

rec nodep noext (-)
  `Nat`
  `data X = X0 | X1 X`
  `data X = X0 | X1 X | X2 X X`
  mutual `data X = X0 | X1 Y` and `data Y = Y0 | Y1 X`
  mutual `data X = X0 | X1 X Y` and `data Y = Y0 | Y1 X`
  mutual `data X = X0 | X1 X | X2 Y` and `data Y = Y0 | Y1 X`

rec nodep ext (-)
  given gen for `String`, derive for `data X = X0 String | X1 X`
  given gen for `String`, derive for `data X = X0 String | X1 X | X2 X X`
  given gen for `String`, derive for mutual `data X = X0 String | X1 Y` and `data Y = Y0 | Y1 X`
  given gen for `String`, derive for mutual `data X = X0 String | X1 X Y` and `data Y = Y0 | Y1 X`
  given gen for `String`, derive for mutual `data X = X0 String | X1 X | X2 Y` and `data Y = Y0 | Y1 X`

rec part noext (-)
  will refuse to derive the following, this is expected behaviour for now, to be reworked
    `List Bool`
    `List (Bool, Bool)`
    `(Bool, List Bool)`
  mutual `data X = X0 String | X1 X Y | X2 Y` and `data Y = Y0 (List Bool) | Y1 X`
  mutual `data X = X0 String | X1 X Y | X2 Y` and `data Y = Y0 (List X) | Y1 X`
  mutual `data X = X0 String | X1 X (Y X) | X2 (Y X)` and `data Y a = Y0 | Y1 a`
  mutual `data X = X0 String | X1 X (Y X) | X2 (Y $ Maybe X)` and `data Y a = Y0 | Y1 a`
  mutual `data X = X0 String | X1 X (Y X) | X2 (Y $ Maybe X)` and `data Y a = Y0 (List a) | Y1 a`

rec part ext (-)
  will refuse to derive the following, this is expected behaviour for now, to be reworked
    given gen for `String`, derive for `List String`
    given gen for `String`, derive for `List (String, Bool)`
    given gen for `String`, derive for `(Bool, List String)`
  given gen for `String`, derive for mutual `data X = X0 String | X1 X Y | X2 Y` and `data Y = Y0 (List String) | Y1 X`
  given gen for `String`, derive for mutual `data X = X0 String | X1 X (Y String) | X2 (Y X)` and `data Y a = Y0 | Y1 a`
  given gen for `String`, derive for mutual `data X = X0 String | X1 X (Y String) | X2 (Y $ Maybe X)` and `data Y a = Y0 | Y1 a`
  given gen for `String`, derive for mutual `data X = X0 String | X1 X (Y String) | X2 (Y $ Maybe X)` and `data Y a = Y0 (List a) | Y1 a`
  given gen for `String`, derive for mutual `data X = X0 String | X1 X (Y $ List String) | X2 (Y $ Maybe X)` and `data Y a = Y0 (List a) | Y1 a`

rec t-p.->.. ext (-)
  given gen for `a`, derive for `List a`, run for `List String` with `%hint` for `String`
  will refuse to derive the following, this is expected behaviour for now, to be reworked
    given gens for `a` and `b`, derive for `List (a, b)`, run for `List (String, Nat)` with `%hint` for `String` and `Nat`
    given gen for `a`, derive for `(a, List a)`, run for `(String, List String)` with `%hint` for `String`
    given gens for `a` and `b`, derive for `(a, List b)`, run for `(String, List Nat)` with `%hint` for `String` and `Nat`
  given gens for `a` and `String`, derive for `data X a = X0 | X1 (X a) | X2 (X String)`
  given gen for `a`, derive for `data X a = X0 | X1 (X a) | X2 (X Nat)`
  given gen for `a`, derive for mutual `data X a = X0 a String | X1 (X a) (Y a) | X2 (Y a)` and `data Y a = Y0 (List String) | Y1 (X a)`
  given gen for `a`, derive for mutual `data X a = X0 a String | X1 (X a) (Y a) | X2 (Y a)` and `data Y a = Y0 (List a) | Y1 (X Nat)`
  given gen for `a`, derive for mutual `data X a = X0 a | X1 (X a) (Y $ List String) | X2 (Y $ Maybe $ X a)` and `data Y a = Y0 (List a) | Y1 a`
  given gens for `a` and `b`, derive for `data X a b = X0 a b | X1 (X b a)`
  given gens for `a` and `b`, derive for mutual `data X a b = X0 a | X1 (X b a) (Y b $ List String) | X2 (Y (Maybe $ X a) a)` and
    `data Y a b = Y0 (List (a, b)) | Y1 b a`
