1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> Gen MaybeEmpty (X n)
LOG gen.auto.derive.infra:0: 
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.X>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ (var "DerivedGen.X" .$ var "{arg:1}")
                 })
          , IDef emptyFC "<DerivedGen.X>[0]" [var "<DerivedGen.X>[0]" .$ implicitTrue .$ implicitTrue .= var "empty"]
          ]
      , scope = var "<DerivedGen.X>[0]" .$ var "^outmost-fuel^" .$ var "outer^<n>"
      }

