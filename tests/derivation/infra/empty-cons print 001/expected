1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen MaybeEmpty ()
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <Builtin.Unit>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <Builtin.Unit>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ IVar Builtin.Unit)))
         IDef <Builtin.Unit>[]
              [ PatClause (IApp. IVar <Builtin.Unit>[] $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.label
                                       $ (IApp. IVar fromString
                                              $ IPrimVal Builtin.Unit[] (non-recursive))
                                       $ (IApp. IVar <<Builtin.MkUnit>>
                                              $ IVar ^fuel_arg^)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Builtin.MkUnit>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ IVar Builtin.Unit)))
                            IDef <<Builtin.MkUnit>>
                                 [ PatClause (IApp. IVar <<Builtin.MkUnit>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IVar empty) ] ]
