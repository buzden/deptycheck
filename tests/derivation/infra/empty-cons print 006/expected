1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (a : Type) -> Gen MaybeEmpty (n : Nat ** Vect n a)
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<a>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.Vect.Vect>[1]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "elem") type
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat") .=> var "Data.Vect.Vect" .$ var "len" .$ var "elem"))
                 })
          , IDef
              emptyFC
              "<Data.Vect.Vect>[1]"
              [    var "<Data.Vect.Vect>[1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<elem>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.Vect.Nil>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "elem") type
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                                                .=> var "Data.Vect.Vect" .$ var "len" .$ var "elem"))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.Vect.(::)>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "elem") type
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                                                .=> var "Data.Vect.Vect" .$ var "len" .$ var "elem"))
                                })
                         , IDef emptyFC "<<Data.Vect.Nil>>" [var "<<Data.Vect.Nil>>" .$ bindVar "^cons_fuel^" .$ bindVar "elem" .= var "empty"]
                         , IDef emptyFC "<<Data.Vect.(::)>>" [var "<<Data.Vect.(::)>>" .$ bindVar "^cons_fuel^" .$ bindVar "elem" .= var "empty"]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Vect.Vect[1] (dry fuel)"))
                                    .$ (var "<<Data.Vect.Nil>>" .$ var "Data.Fuel.Dry" .$ var "inter^<elem>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Vect.Vect[1] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<Data.Vect.Nil>>" .$ var "^fuel_arg^" .$ var "inter^<elem>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Data.Vect.(::)>>" .$ var "^sub^fuel_arg^" .$ var "inter^<elem>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          ]
      , scope = var "<Data.Vect.Vect>[1]" .$ var "^outmost-fuel^" .$ var "outer^<a>"
      }

