1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (a : Type) -> Gen MaybeEmpty (n : Nat ** Vect n a)
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<a>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.Vect.Vect>[1]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "elem") type
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat") .=> var "Data.Vect.Vect" .$ var "len" .$ var "elem"))
                 })
          , IDef
              emptyFC
              "<Data.Vect.Vect>[1]"
              [ var "<Data.Vect.Vect>[1]" .$ var "Dry" .$ implicitTrue .= var "empty"
              , var "<Data.Vect.Vect>[1]" .$ (var "More" .$ bindVar "fuel") .$ bindVar "0" .= var "<Data.Vect.Vect>[1]" .$ var "fuel" .$ var "0"
              ]
          ]
      , scope = var "<Data.Vect.Vect>[1]" .$ var "^outmost-fuel^" .$ var "outer^<a>"
      }

