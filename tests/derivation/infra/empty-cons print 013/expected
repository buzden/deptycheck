1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> (m : Nat) -> (p : Nat) -> (k : Nat) -> Gen MaybeEmpty (X n m p k)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<n> : Implicit True)
    => (MW ExplicitArg outer^<m> : Implicit True)
    => (MW ExplicitArg outer^<p> : Implicit True)
    => (MW ExplicitArg outer^<k> : Implicit True)
    => ILocal (IApp. IVar <DerivedGen.X>[0, 1, 2, 3]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<n>
                   $ IVar outer^<m>
                   $ IVar outer^<p>
                   $ IVar outer^<k>)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0, 1, 2, 3]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3636} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3639} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar DerivedGen.X
                                         $ IVar {arg:3630}
                                         $ IVar {arg:3633}
                                         $ IVar {arg:3636}
                                         $ IVar {arg:3639}))))
         IDef <DerivedGen.X>[0, 1, 2, 3]
              [ PatClause (IApp. IVar <DerivedGen.X>[0, 1, 2, 3]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<{arg:3630}>
                               $ IBindVar inter^<{arg:3633}>
                               $ IBindVar inter^<{arg:3636}>
                               $ IBindVar inter^<{arg:3639}>)
                          (ILocal (IApp. INamedApp (INamedApp (IVar Test.DepTyCheck.Gen.oneOf)
                                                              description
                                                              (IApp. IVar Just
                                                                   $ IPrimVal DerivedGen.X[0, 1, 2, 3] (non-recursive)))
                                                   em
                                                   (IVar MaybeEmpty)
                                       $ (IApp. IVar ::
                                              $ (IApp. IVar <<DerivedGen.XE>>
                                                     $ IVar ^fuel_arg^
                                                     $ IVar inter^<{arg:3630}>
                                                     $ IVar inter^<{arg:3633}>
                                                     $ IVar inter^<{arg:3636}>
                                                     $ IVar inter^<{arg:3639}>)
                                              $ (IApp. IVar ::
                                                     $ (IApp. IVar <<DerivedGen.XS>>
                                                            $ IVar ^fuel_arg^
                                                            $ IVar inter^<{arg:3630}>
                                                            $ IVar inter^<{arg:3633}>
                                                            $ IVar inter^<{arg:3636}>
                                                            $ IVar inter^<{arg:3639}>)
                                                     $ IVar Nil))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.XE>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3636} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3639} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:3630}
                                                            $ IVar {arg:3633}
                                                            $ IVar {arg:3636}
                                                            $ IVar {arg:3639}))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.XS>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3636} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3639} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:3630}
                                                            $ IVar {arg:3633}
                                                            $ IVar {arg:3636}
                                                            $ IVar {arg:3639}))))
                            IDef <<DerivedGen.XE>>
                                 [ WithClause (IApp. IVar <<DerivedGen.XE>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ IBindVar n
                                                   $ (IApp. IVar Prelude.Types.S
                                                          $ IBindVar to_be_deceqed^^n0)
                                                   $ IBindVar m
                                                   $ IBindVar to_be_deceqed^^n1)
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^n0
                                                   $ IVar n)

                                              []
                                              [ WithClause (IApp. IVar <<DerivedGen.XE>>
                                                                $ IBindVar ^cons_fuel^
                                                                $ IBindVar n
                                                                $ (IApp. IVar Prelude.Types.S
                                                                       $ IBindVar n)
                                                                $ IBindVar m
                                                                $ IBindVar to_be_deceqed^^n1
                                                                $ (IApp. IVar Prelude.Yes
                                                                       $ IVar Builtin.Refl))
                                                           MW
                                                           (IApp. IVar Decidable.Equality.decEq
                                                                $ IVar to_be_deceqed^^n1
                                                                $ IVar n)

                                                           []
                                                           [ PatClause (IApp. IVar <<DerivedGen.XE>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ IBindVar n
                                                                            $ (IApp. IVar Prelude.Types.S
                                                                                   $ IBindVar n)
                                                                            $ IBindVar m
                                                                            $ IBindVar n
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl))
                                                                       (IVar empty)
                                                           , PatClause (IApp. IVar <<DerivedGen.XE>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ IBindVar n
                                                                            $ (IApp. IVar Prelude.Types.S
                                                                                   $ IBindVar n)
                                                                            $ IBindVar m
                                                                            $ IBindVar to_be_deceqed^^n1
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.No
                                                                                   $ Implicit True))
                                                                       (IVar empty) ]
                                              , PatClause (IApp. IVar <<DerivedGen.XE>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar n
                                                               $ (IApp. IVar Prelude.Types.S
                                                                      $ IBindVar to_be_deceqed^^n0)
                                                               $ IBindVar m
                                                               $ IBindVar to_be_deceqed^^n1
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ]
                                 , PatClause (IApp. IVar <<DerivedGen.XE>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ]
                            IDef <<DerivedGen.XS>>
                                 [ WithClause (IApp. IVar <<DerivedGen.XS>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ IBindVar n
                                                   $ IBindVar to_be_deceqed^^n0
                                                   $ IBindVar m
                                                   $ IBindVar to_be_deceqed^^m1)
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^m1
                                                   $ IVar m)

                                              []
                                              [ WithClause (IApp. IVar <<DerivedGen.XS>>
                                                                $ IBindVar ^cons_fuel^
                                                                $ IBindVar n
                                                                $ IBindVar to_be_deceqed^^n0
                                                                $ IBindVar m
                                                                $ IBindVar m
                                                                $ (IApp. IVar Prelude.Yes
                                                                       $ IVar Builtin.Refl))
                                                           MW
                                                           (IApp. IVar Decidable.Equality.decEq
                                                                $ IVar to_be_deceqed^^n0
                                                                $ IVar n)

                                                           []
                                                           [ PatClause (IApp. IVar <<DerivedGen.XS>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ IBindVar n
                                                                            $ IBindVar n
                                                                            $ IBindVar m
                                                                            $ IBindVar m
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl))
                                                                       (IVar empty)
                                                           , PatClause (IApp. IVar <<DerivedGen.XS>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ IBindVar n
                                                                            $ IBindVar to_be_deceqed^^n0
                                                                            $ IBindVar m
                                                                            $ IBindVar m
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.No
                                                                                   $ Implicit True))
                                                                       (IVar empty) ]
                                              , PatClause (IApp. IVar <<DerivedGen.XS>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar n
                                                               $ IBindVar to_be_deceqed^^n0
                                                               $ IBindVar m
                                                               $ IBindVar to_be_deceqed^^m1
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ] ] ]
