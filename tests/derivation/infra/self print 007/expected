1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> Gen MaybeEmpty (n : Nat ** (b : Bool ** X n b))
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.X>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                 .=>    var "Builtin.DPair.DPair"
                                     .$ var "Prelude.Basics.Bool"
                                     .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Basics.Bool")
                                         .=> var "DerivedGen.X" .$ var "{arg:1}" .$ var "{arg:2}")))
                 })
          , IDef
              emptyFC
              "<DerivedGen.X>[]"
              [ var "<DerivedGen.X>[]" .$ var "Dry" .= var "empty"
              , var "<DerivedGen.X>[]" .$ (var "More" .$ bindVar "fuel") .= var "<DerivedGen.X>[]" .$ var "fuel"
              ]
          ]
      , scope = var "<DerivedGen.X>[]" .$ var "^outmost-fuel^"
      }

