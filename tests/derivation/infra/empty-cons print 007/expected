1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen MaybeEmpty (n : Nat ** (b : Bool ** X n b))
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <DerivedGen.X>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar Builtin.DPair.DPair
                                                        $ IVar Prelude.Basics.Bool
                                                        $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Basics.Bool)
                                                               => (IApp. IVar DerivedGen.X
                                                                       $ IVar {arg:3630}
                                                                       $ IVar {arg:3633}))))))))
         IDef <DerivedGen.X>[]
              [ PatClause (IApp. IVar <DerivedGen.X>[] $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. INamedApp (INamedApp (IVar Test.DepTyCheck.Gen.oneOf)
                                                              description
                                                              (IApp. IVar Just
                                                                   $ IPrimVal DerivedGen.X[] (non-recursive)))
                                                   em
                                                   (IVar MaybeEmpty)
                                       $ (IApp. IVar ::
                                              $ (IApp. IVar <<DerivedGen.X0>>
                                                     $ IVar ^fuel_arg^)
                                              $ (IApp. IVar ::
                                                     $ (IApp. IVar <<DerivedGen.X1>>
                                                            $ IVar ^fuel_arg^)
                                                     $ IVar Nil))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.X0>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar Builtin.DPair.DPair
                                                                           $ IVar Prelude.Basics.Bool
                                                                           $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Basics.Bool)
                                                                                  => (IApp. IVar DerivedGen.X
                                                                                          $ IVar {arg:3630}
                                                                                          $ IVar {arg:3633}))))))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.X1>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar Builtin.DPair.DPair
                                                                           $ IVar Prelude.Basics.Bool
                                                                           $ (ILam.  (MW ExplicitArg {arg:3633} : IVar Prelude.Basics.Bool)
                                                                                  => (IApp. IVar DerivedGen.X
                                                                                          $ IVar {arg:3630}
                                                                                          $ IVar {arg:3633}))))))))
                            IDef <<DerivedGen.X0>>
                                 [ PatClause (IApp. IVar <<DerivedGen.X0>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IVar empty) ]
                            IDef <<DerivedGen.X1>>
                                 [ PatClause (IApp. IVar <<DerivedGen.X1>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IVar empty) ] ]
