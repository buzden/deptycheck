1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> (a : Type) -> Gen MaybeEmpty (Vect n a)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<n> : Implicit True)
    => (MW ExplicitArg outer^<a> : Implicit True)
    => ILocal (IApp. IVar <Data.Vect.Vect>[0, 1]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<n>
                   $ IVar outer^<a>)
         IClaim MW
                Export
                []
                (MkTy <Data.Vect.Vect>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg len : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg elem : IType)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Data.Vect.Vect
                                         $ IVar len
                                         $ IVar elem))))
         IDef <Data.Vect.Vect>[0, 1]
              [ PatClause (IApp. IVar <Data.Vect.Vect>[0, 1]
                               $ Implicit True
                               $ Implicit True
                               $ Implicit True)
                          (IVar empty) ]
