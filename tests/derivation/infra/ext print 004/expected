1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty String)} -> (n : Nat) -> Gen MaybeEmpty (X'S n)
LOG gen.auto.derive.infra:0: 
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<^prim^.String>[]")
      (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ primVal (PrT StringType))
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<AlternativeCore.X'S>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (var "AlternativeCore.X'S" .$ var "{arg:2}")
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Prelude.Types.Nat>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                 })
          , IDef
              emptyFC
              "<AlternativeCore.X'S>[0]"
              [    var "<AlternativeCore.X'S>[0]" .$ bindVar "fuel" .$ implicitTrue
                .=    var "<*>"
                   .$ (var "<$>" .$ var "MkXSN" .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^"))
                   .$ (var "<Prelude.Types.Nat>[]" .$ var "fuel")
              ]
          , IDef
              emptyFC
              "<Prelude.Types.Nat>[]"
              [    var "<Prelude.Types.Nat>[]" .$ bindVar "fuel"
                .=    var "<*>"
                   .$ (var "<$>" .$ var "MkXSN" .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^"))
                   .$ (var "<Prelude.Types.Nat>[]" .$ var "fuel")
              ]
          ]
      , scope = var "<AlternativeCore.X'S>[0]" .$ var "^outmost-fuel^" .$ var "outer^<n>"
      }

