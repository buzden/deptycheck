1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty Nat)} -> Gen MaybeEmpty Bool
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW AutoImplicit external^<Prelude.Types.Nat>[] : IPi.  (MW ExplicitArg {arg:3634} : IVar Data.Fuel.Fuel)
                                                            -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                    $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                                    $ IVar Prelude.Types.Nat))
    => ILocal (IApp. IVar <Prelude.Basics.Bool>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <Prelude.Basics.Bool>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ IVar Prelude.Basics.Bool)))
         IDef <Prelude.Basics.Bool>[]
              [ PatClause (IApp. IVar <Prelude.Basics.Bool>[] $ IVar Dry)
                          (IVar empty)
              , PatClause (IApp. IVar <Prelude.Basics.Bool>[]
                               $ (IApp. IVar More $ IBindVar fuel))
                          (IApp. IVar <Prelude.Basics.Bool>[] $ IVar fuel) ]
