1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty String)} -> Gen MaybeEmpty XS
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<^prim^.String>[]")
      (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ primVal (PrT StringType))
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<AlternativeCore.XS>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "AlternativeCore.XS"
                 })
          , IDef
              emptyFC
              "<AlternativeCore.XS>[]"
              [var "<AlternativeCore.XS>[]" .$ bindVar "fuel" .= var "<$>" .$ var "MkXS" .$ (var "external^<^prim^.String>[]" .$ var "^outmost-fuel^")]
          ]
      , scope = var "<AlternativeCore.XS>[]" .$ var "^outmost-fuel^"
      }

