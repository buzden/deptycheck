1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> Gen MaybeEmpty (n : Nat ** (a : Type ** Vect n a))
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.Vect.Vect>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (    MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                                 .=>    var "Builtin.DPair.DPair"
                                     .$ type
                                     .$ (MkArg MW ExplicitArg (Just "elem") type .=> var "Data.Vect.Vect" .$ var "len" .$ var "elem")))
                 })
          , IDef
              emptyFC
              "<Data.Vect.Vect>[]"
              [ var "<Data.Vect.Vect>[]" .$ var "Dry" .= var "empty"
              , var "<Data.Vect.Vect>[]" .$ (var "More" .$ bindVar "fuel") .= var "<Data.Vect.Vect>[]" .$ var "fuel"
              ]
          ]
      , scope = var "<Data.Vect.Vect>[]" .$ var "^outmost-fuel^"
      }

