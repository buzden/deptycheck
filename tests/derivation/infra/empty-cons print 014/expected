1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (n : Nat) -> (m : Nat) -> (p : Nat) -> (k : Nat) -> {auto conArg : ((arg : Fuel) -> Gen MaybeEmpty String)} -> Gen MaybeEmpty (X n m p k)
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<m>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<p>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<k>") implicitTrue
.=> MkArg
      MW
      AutoImplicit
      (Just "external^<^prim^.String>[]")
      (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Data.Fuel.Fuel")
       .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ primVal (PrT StringType))
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.X>[0, 1, 2, 3]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                     .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Types.Nat")
                     .-> MkArg MW ExplicitArg (Just "{arg:4}") (var "Prelude.Types.Nat")
                     .-> MkArg MW ExplicitArg (Just "{arg:5}") (var "Prelude.Types.Nat")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (var "DerivedGen.X" .$ var "{arg:2}" .$ var "{arg:3}" .$ var "{arg:4}" .$ var "{arg:5}")
                 })
          , IDef
              emptyFC
              "<DerivedGen.X>[0, 1, 2, 3]"
              [       var "<DerivedGen.X>[0, 1, 2, 3]"
                   .$ bindVar "^fuel_arg^"
                   .$ bindVar "inter^<{arg:2}>"
                   .$ bindVar "inter^<{arg:3}>"
                   .$ bindVar "inter^<{arg:4}>"
                   .$ bindVar "inter^<{arg:5}>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.XE>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                                    .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Types.Nat")
                                    .-> MkArg MW ExplicitArg (Just "{arg:4}") (var "Prelude.Types.Nat")
                                    .-> MkArg MW ExplicitArg (Just "{arg:5}") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "DerivedGen.X" .$ var "{arg:2}" .$ var "{arg:3}" .$ var "{arg:4}" .$ var "{arg:5}")
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.XS>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:2}") (var "Prelude.Types.Nat")
                                    .-> MkArg MW ExplicitArg (Just "{arg:3}") (var "Prelude.Types.Nat")
                                    .-> MkArg MW ExplicitArg (Just "{arg:4}") (var "Prelude.Types.Nat")
                                    .-> MkArg MW ExplicitArg (Just "{arg:5}") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "DerivedGen.X" .$ var "{arg:2}" .$ var "{arg:3}" .$ var "{arg:4}" .$ var "{arg:5}")
                                })
                         , IDef
                             emptyFC
                             "<<DerivedGen.XE>>"
                             [ withClause
                                 { lhs =
                                        var "<<DerivedGen.XE>>"
                                     .$ bindVar "^cons_fuel^"
                                     .$ bindVar "n"
                                     .$ (var "Prelude.Types.S" .$ bindVar "to_be_deceqed^^n0")
                                     .$ bindVar "m"
                                     .$ bindVar "to_be_deceqed^^n1"
                                 , rig = MW
                                 , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^n0" .$ var "n"
                                 , prf = Nothing
                                 , flags = []
                                 , clauses =
                                     [ withClause
                                         { lhs =
                                                var "<<DerivedGen.XE>>"
                                             .$ bindVar "^cons_fuel^"
                                             .$ bindVar "n"
                                             .$ (var "Prelude.Types.S" .$ bindVar "n")
                                             .$ bindVar "m"
                                             .$ bindVar "to_be_deceqed^^n1"
                                             .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                         , rig = MW
                                         , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^n1" .$ var "n"
                                         , prf = Nothing
                                         , flags = []
                                         , clauses =
                                             [       var "<<DerivedGen.XE>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ bindVar "n"
                                                  .$ (var "Prelude.Types.S" .$ bindVar "n")
                                                  .$ bindVar "m"
                                                  .$ bindVar "n"
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                               .= var "empty"
                                             ,       var "<<DerivedGen.XE>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ bindVar "n"
                                                  .$ (var "Prelude.Types.S" .$ bindVar "n")
                                                  .$ bindVar "m"
                                                  .$ bindVar "to_be_deceqed^^n1"
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.No" .$ implicitTrue)
                                               .= var "empty"
                                             ]
                                         }
                                     ,       var "<<DerivedGen.XE>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ bindVar "n"
                                          .$ (var "Prelude.Types.S" .$ bindVar "to_be_deceqed^^n0")
                                          .$ bindVar "m"
                                          .$ bindVar "to_be_deceqed^^n1"
                                          .$ (var "Prelude.No" .$ implicitTrue)
                                       .= var "empty"
                                     ]
                                 }
                             , var "<<DerivedGen.XE>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<DerivedGen.XS>>"
                             [ withClause
                                 { lhs =
                                        var "<<DerivedGen.XS>>"
                                     .$ bindVar "^cons_fuel^"
                                     .$ bindVar "n"
                                     .$ bindVar "to_be_deceqed^^n0"
                                     .$ bindVar "m"
                                     .$ bindVar "to_be_deceqed^^m1"
                                 , rig = MW
                                 , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^m1" .$ var "m"
                                 , prf = Nothing
                                 , flags = []
                                 , clauses =
                                     [ withClause
                                         { lhs =
                                                var "<<DerivedGen.XS>>"
                                             .$ bindVar "^cons_fuel^"
                                             .$ bindVar "n"
                                             .$ bindVar "to_be_deceqed^^n0"
                                             .$ bindVar "m"
                                             .$ bindVar "m"
                                             .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                         , rig = MW
                                         , wval = var "Decidable.Equality.decEq" .$ var "to_be_deceqed^^n0" .$ var "n"
                                         , prf = Nothing
                                         , flags = []
                                         , clauses =
                                             [       var "<<DerivedGen.XS>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ bindVar "n"
                                                  .$ bindVar "n"
                                                  .$ bindVar "m"
                                                  .$ bindVar "m"
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                               .= var "empty"
                                             ,       var "<<DerivedGen.XS>>"
                                                  .$ bindVar "^cons_fuel^"
                                                  .$ bindVar "n"
                                                  .$ bindVar "to_be_deceqed^^n0"
                                                  .$ bindVar "m"
                                                  .$ bindVar "m"
                                                  .$ (var "Prelude.Yes" .$ var "Builtin.Refl")
                                                  .$ (var "Prelude.No" .$ implicitTrue)
                                               .= var "empty"
                                             ]
                                         }
                                     ,       var "<<DerivedGen.XS>>"
                                          .$ bindVar "^cons_fuel^"
                                          .$ bindVar "n"
                                          .$ bindVar "to_be_deceqed^^n0"
                                          .$ bindVar "m"
                                          .$ bindVar "to_be_deceqed^^m1"
                                          .$ (var "Prelude.No" .$ implicitTrue)
                                       .= var "empty"
                                     ]
                                 }
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[0, 1, 2, 3] (non-recursive)"))
                         .$ (   var "Test.DepTyCheck.Gen.oneOf"
                             .! ("em", var "MaybeEmpty")
                             .$ (   var "::"
                                 .$ (   var "<<DerivedGen.XE>>"
                                     .$ var "^fuel_arg^"
                                     .$ var "inter^<{arg:2}>"
                                     .$ var "inter^<{arg:3}>"
                                     .$ var "inter^<{arg:4}>"
                                     .$ var "inter^<{arg:5}>")
                                 .$ (   var "::"
                                     .$ (   var "<<DerivedGen.XS>>"
                                         .$ var "^fuel_arg^"
                                         .$ var "inter^<{arg:2}>"
                                         .$ var "inter^<{arg:3}>"
                                         .$ var "inter^<{arg:4}>"
                                         .$ var "inter^<{arg:5}>")
                                     .$ var "Nil")))
                     }
              ]
          ]
      , scope = var "<DerivedGen.X>[0, 1, 2, 3]" .$ var "^outmost-fuel^" .$ var "outer^<n>" .$ var "outer^<m>" .$ var "outer^<p>" .$ var "outer^<k>"
      }

