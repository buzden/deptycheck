1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> Gen MaybeEmpty X
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<DerivedGen.X>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                 })
          , IDef
              emptyFC
              "<DerivedGen.X>[]"
              [    var "<DerivedGen.X>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.X0>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.X1>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<DerivedGen.X2>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "DerivedGen.X"
                                })
                         , IDef emptyFC "<<DerivedGen.X0>>" [var "<<DerivedGen.X0>>" .$ bindVar "^cons_fuel^" .= var "empty"]
                         , IDef emptyFC "<<DerivedGen.X1>>" [var "<<DerivedGen.X1>>" .$ bindVar "^cons_fuel^" .= var "empty"]
                         , IDef emptyFC "<<DerivedGen.X2>>" [var "<<DerivedGen.X2>>" .$ bindVar "^cons_fuel^" .= var "empty"]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "DerivedGen.X[] (non-recursive)"))
                         .$ (   var "Test.DepTyCheck.Gen.oneOf"
                             .! ("em", var "MaybeEmpty")
                             .$ (   var "::"
                                 .$ (var "<<DerivedGen.X0>>" .$ var "^fuel_arg^")
                                 .$ (   var "::"
                                     .$ (var "<<DerivedGen.X1>>" .$ var "^fuel_arg^")
                                     .$ (var "::" .$ (var "<<DerivedGen.X2>>" .$ var "^fuel_arg^") .$ var "Nil"))))
                     }
              ]
          ]
      , scope = var "<DerivedGen.X>[]" .$ var "^outmost-fuel^"
      }

