1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> (a : Type) -> Gen MaybeEmpty (Vect n a)
LOG gen.auto.derive.infra:0: 
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<a>") implicitTrue
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.Vect.Vect>[0, 1]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                     .-> MkArg MW ExplicitArg (Just "elem") type
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (var "Data.Vect.Vect" .$ var "len" .$ var "elem")
                 })
          , IDef
              emptyFC
              "<Data.Vect.Vect>[0, 1]"
              [    var "<Data.Vect.Vect>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<len>" .$ bindVar "inter^<elem>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.Vect.Nil>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                                    .-> MkArg MW ExplicitArg (Just "elem") type
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "Data.Vect.Vect" .$ var "len" .$ var "elem")
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.Vect.(::)>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                                    .-> MkArg MW ExplicitArg (Just "elem") type
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (var "Data.Vect.Vect" .$ var "len" .$ var "elem")
                                })
                         , IDef
                             emptyFC
                             "<<Data.Vect.Nil>>"
                             [ var "<<Data.Vect.Nil>>" .$ bindVar "^cons_fuel^" .$ var "Prelude.Types.Z" .$ bindVar "elem" .= var "empty"
                             , var "<<Data.Vect.Nil>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<Data.Vect.(::)>>"
                             [    var "<<Data.Vect.(::)>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "len") .$ bindVar "elem"
                               .= var "empty"
                             , var "<<Data.Vect.(::)>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Vect.Vect[0, 1] (dry fuel)"))
                                    .$ (var "<<Data.Vect.Nil>>" .$ var "Data.Fuel.Dry" .$ var "inter^<len>" .$ var "inter^<elem>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Vect.Vect[0, 1] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<Data.Vect.Nil>>" .$ var "^fuel_arg^" .$ var "inter^<len>" .$ var "inter^<elem>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Data.Vect.(::)>>" .$ var "^sub^fuel_arg^" .$ var "inter^<len>" .$ var "inter^<elem>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          ]
      , scope = var "<Data.Vect.Vect>[0, 1]" .$ var "^outmost-fuel^" .$ var "outer^<n>" .$ var "outer^<a>"
      }

