1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG deptycheck.derive.print:5: type: (arg : Fuel) -> (n : Nat) -> (a : Type) -> Gen MaybeEmpty (Vect n a)
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> MkArg MW ExplicitArg (Just "outer^<n>") implicitTrue
.=> MkArg MW ExplicitArg (Just "outer^<a>") implicitTrue
.=> local
      { decls =
          [ IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy {name = "weight^Prelude.Types.Nat", type = MkArg MW ExplicitArg Nothing (var "Prelude.Types.Nat") .-> var "Data.Nat1.Nat1"}
                 })
          , IClaim
              (MkIClaimData
                 { rig = MW
                 , vis = Export
                 , opts = []
                 , type =
                     mkTy
                       { name = "<Data.Vect.Vect>[0, 1]"
                       , type =
                               MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                           .-> MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                           .-> MkArg MW ExplicitArg (Just "elem") type
                           .->    var "Test.DepTyCheck.Gen.Gen"
                               .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                               .$ (var "Data.Vect.Vect" .$ var "len" .$ var "elem")
                       }
                 })
          , IDef
              emptyFC
              "weight^Prelude.Types.Nat"
              [ var "weight^Prelude.Types.Nat" .$ var "Prelude.Types.Z" .= var "Data.Nat1.one"
              ,    var "weight^Prelude.Types.Nat" .$ (var "Prelude.Types.S" .$ bindVar "arg^0")
                .= var "succ" .$ (var "weight^Prelude.Types.Nat" .$ var "arg^0")
              ]
          , IDef
              emptyFC
              "<Data.Vect.Vect>[0, 1]"
              [    var "<Data.Vect.Vect>[0, 1]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<len>" .$ bindVar "inter^<elem>"
                .= local
                     { decls =
                         [ IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.Vect.Nil>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "elem") type
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.Vect.Vect" .$ var "len" .$ var "elem")
                                      }
                                })
                         , IClaim
                             (MkIClaimData
                                { rig = MW
                                , vis = Export
                                , opts = []
                                , type =
                                    mkTy
                                      { name = "<<Data.Vect.(::)>>"
                                      , type =
                                              MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                          .-> MkArg MW ExplicitArg (Just "len") (var "Prelude.Types.Nat")
                                          .-> MkArg MW ExplicitArg (Just "elem") type
                                          .->    var "Test.DepTyCheck.Gen.Gen"
                                              .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                              .$ (var "Data.Vect.Vect" .$ var "len" .$ var "elem")
                                      }
                                })
                         , IDef
                             emptyFC
                             "<<Data.Vect.Nil>>"
                             [ var "<<Data.Vect.Nil>>" .$ bindVar "^cons_fuel^" .$ var "Prelude.Types.Z" .$ bindVar "elem" .= var "empty"
                             , var "<<Data.Vect.Nil>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<Data.Vect.(::)>>"
                             [    var "<<Data.Vect.(::)>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "len") .$ bindVar "elem"
                               .= var "empty"
                             , var "<<Data.Vect.(::)>>" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                            var "Test.DepTyCheck.Gen.label"
                         .$ (var "fromString" .$ primVal (Str "Data.Vect.Vect[0(len), 1(elem)] (non-spending)"))
                         .$ (   var "Test.DepTyCheck.Gen.frequency"
                             .$ (   var "::"
                                 .$ (   var "Builtin.MkPair"
                                     .$ var "Data.Nat1.one"
                                     .$ (var "<<Data.Vect.Nil>>" .$ var "^fuel_arg^" .$ var "inter^<len>" .$ var "inter^<elem>"))
                                 .$ (   var "::"
                                     .$ (   var "Builtin.MkPair"
                                         .$ (var "weight^Prelude.Types.Nat" .$ var "inter^<len>")
                                         .$ (var "<<Data.Vect.(::)>>" .$ var "^fuel_arg^" .$ var "inter^<len>" .$ var "inter^<elem>"))
                                     .$ var "Nil")))
                     }
              ]
          ]
      , scope = var "<Data.Vect.Vect>[0, 1]" .$ var "^outmost-fuel^" .$ var "outer^<n>" .$ var "outer^<a>"
      }

