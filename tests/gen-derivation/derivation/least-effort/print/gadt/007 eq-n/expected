1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen (a : Nat ** (b : Nat ** EqualN a b))
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <DerivedGen.EqualN>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <Prelude.Types.Nat>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Prelude.Types.Nat)))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.EqualN>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar Builtin.DPair.DPair
                                                        $ IVar Prelude.Types.Nat
                                                        $ (ILam.  (MW ExplicitArg {arg:833} : IVar Prelude.Types.Nat)
                                                               => (IApp. IVar DerivedGen.EqualN
                                                                       $ IVar {arg:830}
                                                                       $ IVar {arg:833}))))))))
         IDef <Prelude.Types.Nat>[]
              [ PatClause (IApp. IVar <Prelude.Types.Nat>[]
                               $ IBindVar ^fuel_arg^)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar <<Prelude.Types.Z>>
                                                          $ IVar Data.Fuel.Dry)
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. INamedApp (IVar Test.DepTyCheck.Gen.oneOf)
                                                                      description
                                                                      (IApp. IVar Just
                                                                           $ IPrimVal Prelude.Types.Nat[] (spend fuel))
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<Prelude.Types.Z>>
                                                                        $ IVar ^fuel_arg^)
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar <<Prelude.Types.S>>
                                                                               $ IVar ^sub^fuel_arg^)
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Types.Z>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Prelude.Types.Nat)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Types.S>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Prelude.Types.Nat)))
                            IDef <<Prelude.Types.Z>>
                                 [ PatClause (IApp. IVar <<Prelude.Types.Z>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. INamedApp (IVar Prelude.pure)
                                                              f
                                                              (IVar Test.DepTyCheck.Gen.Gen)
                                                  $ IVar Prelude.Types.Z) ]
                            IDef <<Prelude.Types.S>>
                                 [ PatClause (IApp. IVar <<Prelude.Types.S>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar >>=
                                                  $ (IApp. IVar <Prelude.Types.Nat>[]
                                                         $ IVar ^cons_fuel^)
                                                  $ (ILam.  (MW ExplicitArg ^bnd^{arg:647} : Implicit False)
                                                         => (IApp. INamedApp (IVar Prelude.pure)
                                                                             f
                                                                             (IVar Test.DepTyCheck.Gen.Gen)
                                                                 $ (IApp. IVar Prelude.Types.S
                                                                        $ IVar ^bnd^{arg:647})))) ] ]
         IDef <DerivedGen.EqualN>[]
              [ PatClause (IApp. IVar <DerivedGen.EqualN>[]
                               $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar <<DerivedGen.ReflN>>
                                       $ IVar ^fuel_arg^))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.ReflN>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar Builtin.DPair.DPair
                                                                           $ IVar Prelude.Types.Nat
                                                                           $ (ILam.  (MW ExplicitArg {arg:833} : IVar Prelude.Types.Nat)
                                                                                  => (IApp. IVar DerivedGen.EqualN
                                                                                          $ IVar {arg:830}
                                                                                          $ IVar {arg:833}))))))))
                            IDef <<DerivedGen.ReflN>>
                                 [ PatClause (IApp. IVar <<DerivedGen.ReflN>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar >>=
                                                  $ (IApp. IVar <Prelude.Types.Nat>[]
                                                         $ IVar ^cons_fuel^)
                                                  $ (ILam.  (MW ExplicitArg x : Implicit False)
                                                         => (IApp. INamedApp (IVar Prelude.pure)
                                                                             f
                                                                             (IVar Test.DepTyCheck.Gen.Gen)
                                                                 $ (IApp. IVar Builtin.DPair.MkDPair
                                                                        $ Implicit True
                                                                        $ (IApp. IVar Builtin.DPair.MkDPair
                                                                               $ Implicit True
                                                                               $ INamedApp (IVar DerivedGen.ReflN)
                                                                                           x
                                                                                           (IVar x)))))) ] ]
