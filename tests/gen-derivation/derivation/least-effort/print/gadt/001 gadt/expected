1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> Gen (Fin n)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg n : IVar Prelude.Types.Nat)
    => ILocal (IApp. IVar <Data.Fin.Fin>[0] $ IVar ^outmost-fuel^ $ IVar n)
         IClaim MW
                Export
                []
                (MkTy <Data.Fin.Fin>[0]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg n : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Data.Fin.Fin $ IVar n))))
         IDef <Data.Fin.Fin>[0]
              [ PatClause (IApp. IVar <Data.Fin.Fin>[0]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar n)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar <<Data.Fin.FZ>>
                                                          $ IVar Data.Fuel.Dry
                                                          $ IVar n)
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. INamedApp (IVar Test.DepTyCheck.Gen.oneOf)
                                                                      description
                                                                      (IApp. IVar Just
                                                                           $ IPrimVal Data.Fin.Fin[0] (spend fuel))
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<Data.Fin.FZ>>
                                                                        $ IVar ^fuel_arg^
                                                                        $ IVar n)
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar <<Data.Fin.FS>>
                                                                               $ IVar ^sub^fuel_arg^
                                                                               $ IVar n)
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Data.Fin.FZ>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg n : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Data.Fin.Fin
                                                            $ IVar n))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Data.Fin.FS>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg n : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Data.Fin.Fin
                                                            $ IVar n))))
                            IDef <<Data.Fin.FZ>>
                                 [ PatClause (IApp. IVar <<Data.Fin.FZ>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ (IApp. IVar Prelude.Types.S
                                                         $ IBindVar k))
                                             (IApp. INamedApp (IVar Prelude.pure)
                                                              f
                                                              (IVar Test.DepTyCheck.Gen.Gen)
                                                  $ INamedApp (IVar Data.Fin.FZ)
                                                              k
                                                              (IVar k))
                                 , PatClause (IApp. IVar <<Data.Fin.FZ>>
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ]
                            IDef <<Data.Fin.FS>>
                                 [ PatClause (IApp. IVar <<Data.Fin.FS>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ (IApp. IVar Prelude.Types.S
                                                         $ IBindVar k))
                                             (IApp. IVar >>=
                                                  $ (IApp. IVar <Data.Fin.Fin>[0]
                                                         $ IVar ^cons_fuel^
                                                         $ IVar k)
                                                  $ (ILam.  (MW ExplicitArg ^bnd^{arg:3101} : Implicit False)
                                                         => (IApp. INamedApp (IVar Prelude.pure)
                                                                             f
                                                                             (IVar Test.DepTyCheck.Gen.Gen)
                                                                 $ (IApp. INamedApp (IVar Data.Fin.FS)
                                                                                    k
                                                                                    (IVar k)
                                                                        $ IVar ^bnd^{arg:3101}))))
                                 , PatClause (IApp. IVar <<Data.Fin.FS>>
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
