1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> (x4 : Nat) -> Gen MaybeEmpty (X x1 x2 x3 x4)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<x1> : Implicit True)
    => (MW ExplicitArg outer^<x2> : Implicit True)
    => (MW ExplicitArg outer^<x3> : Implicit True)
    => (MW ExplicitArg outer^<x4> : Implicit True)
    => ILocal (IApp. IVar <DerivedGen.X>[0, 1, 2, 3]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<x1>
                   $ IVar outer^<x2>
                   $ IVar outer^<x3>
                   $ IVar outer^<x4>)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0, 1, 2, 3]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3636} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3639} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar DerivedGen.X
                                         $ IVar {arg:3630}
                                         $ IVar {arg:3633}
                                         $ IVar {arg:3636}
                                         $ IVar {arg:3639}))))
         IDef <DerivedGen.X>[0, 1, 2, 3]
              [ PatClause (IApp. IVar <DerivedGen.X>[0, 1, 2, 3]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<{arg:3630}>
                               $ IBindVar inter^<{arg:3633}>
                               $ IBindVar inter^<{arg:3636}>
                               $ IBindVar inter^<{arg:3639}>)
                          (ILocal (IApp. IVar <<DerivedGen.MkX>>
                                       $ IVar ^fuel_arg^
                                       $ IVar inter^<{arg:3630}>
                                       $ IVar inter^<{arg:3633}>
                                       $ IVar inter^<{arg:3636}>
                                       $ IVar inter^<{arg:3639}>))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3636} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3639} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:3630}
                                                            $ IVar {arg:3633}
                                                            $ IVar {arg:3636}
                                                            $ IVar {arg:3639}))))
                            IDef <<DerivedGen.MkX>>
                                 [ WithClause (IApp. IVar <<DerivedGen.MkX>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ IBindVar n
                                                   $ IBindVar to_be_deceqed^^n0
                                                   $ IBindVar to_be_deceqed^^n1
                                                   $ IBindVar to_be_deceqed^^n2)
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^n0
                                                   $ IVar n)

                                              []
                                              [ WithClause (IApp. IVar <<DerivedGen.MkX>>
                                                                $ IBindVar ^cons_fuel^
                                                                $ IBindVar n
                                                                $ IBindVar n
                                                                $ IBindVar to_be_deceqed^^n1
                                                                $ IBindVar to_be_deceqed^^n2
                                                                $ (IApp. IVar Prelude.Yes
                                                                       $ IVar Builtin.Refl))
                                                           MW
                                                           (IApp. IVar Decidable.Equality.decEq
                                                                $ IVar to_be_deceqed^^n1
                                                                $ IVar n)

                                                           []
                                                           [ WithClause (IApp. IVar <<DerivedGen.MkX>>
                                                                             $ IBindVar ^cons_fuel^
                                                                             $ IBindVar n
                                                                             $ IBindVar n
                                                                             $ IBindVar n
                                                                             $ IBindVar to_be_deceqed^^n2
                                                                             $ (IApp. IVar Prelude.Yes
                                                                                    $ IVar Builtin.Refl)
                                                                             $ (IApp. IVar Prelude.Yes
                                                                                    $ IVar Builtin.Refl))
                                                                        MW
                                                                        (IApp. IVar Decidable.Equality.decEq
                                                                             $ IVar to_be_deceqed^^n2
                                                                             $ IVar n)

                                                                        []
                                                                        [ PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                                                         $ IBindVar ^cons_fuel^
                                                                                         $ IBindVar n
                                                                                         $ IBindVar n
                                                                                         $ IBindVar n
                                                                                         $ IBindVar n
                                                                                         $ (IApp. IVar Prelude.Yes
                                                                                                $ IVar Builtin.Refl)
                                                                                         $ (IApp. IVar Prelude.Yes
                                                                                                $ IVar Builtin.Refl)
                                                                                         $ (IApp. IVar Prelude.Yes
                                                                                                $ IVar Builtin.Refl))
                                                                                    (IApp. INamedApp (IVar Prelude.pure)
                                                                                                     f
                                                                                                     (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                          $ Implicit True)
                                                                                         $ INamedApp (IVar DerivedGen.MkX)
                                                                                                     n
                                                                                                     (IVar n))
                                                                        , PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                                                         $ IBindVar ^cons_fuel^
                                                                                         $ IBindVar n
                                                                                         $ IBindVar n
                                                                                         $ IBindVar n
                                                                                         $ IBindVar to_be_deceqed^^n2
                                                                                         $ (IApp. IVar Prelude.Yes
                                                                                                $ IVar Builtin.Refl)
                                                                                         $ (IApp. IVar Prelude.Yes
                                                                                                $ IVar Builtin.Refl)
                                                                                         $ (IApp. IVar Prelude.No
                                                                                                $ Implicit True))
                                                                                    (IVar empty) ]
                                                           , PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ IBindVar n
                                                                            $ IBindVar n
                                                                            $ IBindVar to_be_deceqed^^n1
                                                                            $ IBindVar to_be_deceqed^^n2
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.No
                                                                                   $ Implicit True))
                                                                       (IVar empty) ]
                                              , PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar n
                                                               $ IBindVar to_be_deceqed^^n0
                                                               $ IBindVar to_be_deceqed^^n1
                                                               $ IBindVar to_be_deceqed^^n2
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ] ] ]
