1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> (f : Fin n) -> Gen (X n f)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg n : IVar Prelude.Types.Nat)
    => (MW ExplicitArg f : IApp. IVar Data.Fin.Fin $ IVar n)
    => ILocal (IApp. IVar <DerivedGen.X>[0, 1]
                   $ IVar ^outmost-fuel^
                   $ IVar n
                   $ IVar f)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg n : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3632} : IApp. IVar Data.Fin.Fin
                                                              $ IVar n)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar DerivedGen.X
                                         $ IVar n
                                         $ IVar {arg:3632}))))
         IDef <DerivedGen.X>[0, 1]
              [ PatClause (IApp. IVar <DerivedGen.X>[0, 1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar n
                               $ IBindVar {arg:3632})
                          (ILocal (IApp. IVar <<DerivedGen.MkX>>
                                       $ IVar ^fuel_arg^
                                       $ IVar n
                                       $ IVar {arg:3632}))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg n : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3632} : IApp. IVar Data.Fin.Fin
                                                                                 $ IVar n)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar n
                                                            $ IVar {arg:3632}))))
                            IDef <<DerivedGen.MkX>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ (IApp. IVar Prelude.Types.S
                                                         $ IBindVar n)
                                                  $ (IApp. INamedApp (IVar Data.Fin.FS)
                                                                     k
                                                                     (Implicit True)
                                                         $ IBindVar f))
                                             (IApp. INamedApp (IVar Prelude.pure)
                                                              f
                                                              (IVar Test.DepTyCheck.Gen.Gen)
                                                  $ (IApp. IVar DerivedGen.MkX
                                                         $ IVar n
                                                         $ IVar f))
                                 , PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
