1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (x1 : Nat) -> (x2 : Nat) -> (x3 : Nat) -> Gen (X x1 x2 x3)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg x1 : IVar Prelude.Types.Nat)
    => (MW ExplicitArg x2 : IVar Prelude.Types.Nat)
    => (MW ExplicitArg x3 : IVar Prelude.Types.Nat)
    => ILocal (IApp. IVar <DerivedGen.X>[0, 1, 2]
                   $ IVar ^outmost-fuel^
                   $ IVar x1
                   $ IVar x2
                   $ IVar x3)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0, 1, 2]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:833} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:836} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar DerivedGen.X
                                         $ IVar {arg:830}
                                         $ IVar {arg:833}
                                         $ IVar {arg:836}))))
         IDef <DerivedGen.X>[0, 1, 2]
              [ PatClause (IApp. IVar <DerivedGen.X>[0, 1, 2]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar {arg:830}
                               $ IBindVar {arg:833}
                               $ IBindVar {arg:836})
                          (ILocal (IApp. IVar <<DerivedGen.MkX>>
                                       $ IVar ^fuel_arg^
                                       $ IVar {arg:830}
                                       $ IVar {arg:833}
                                       $ IVar {arg:836}))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:833} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:836} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:830}
                                                            $ IVar {arg:833}
                                                            $ IVar {arg:836}))))
                            IDef <<DerivedGen.MkX>>
                                 [ WithClause (IApp. IVar <<DerivedGen.MkX>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ IBindVar n
                                                   $ IBindVar to_be_deceqed^^n0
                                                   $ IBindVar to_be_deceqed^^n1)
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^n0
                                                   $ IVar n)

                                              []
                                              [ WithClause (IApp. IVar <<DerivedGen.MkX>>
                                                                $ IBindVar ^cons_fuel^
                                                                $ IBindVar n
                                                                $ IBindVar n
                                                                $ IBindVar to_be_deceqed^^n1
                                                                $ (IApp. IVar Prelude.Yes
                                                                       $ IVar Builtin.Refl))
                                                           MW
                                                           (IApp. IVar Decidable.Equality.decEq
                                                                $ IVar to_be_deceqed^^n1
                                                                $ IVar n)

                                                           []
                                                           [ PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ IBindVar n
                                                                            $ IBindVar n
                                                                            $ IBindVar n
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl))
                                                                       (IApp. INamedApp (IVar Prelude.pure)
                                                                                        f
                                                                                        (IVar Test.DepTyCheck.Gen.Gen)
                                                                            $ INamedApp (IVar DerivedGen.MkX)
                                                                                        n
                                                                                        (IVar n))
                                                           , PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                                            $ IBindVar ^cons_fuel^
                                                                            $ IBindVar n
                                                                            $ IBindVar n
                                                                            $ IBindVar to_be_deceqed^^n1
                                                                            $ (IApp. IVar Prelude.Yes
                                                                                   $ IVar Builtin.Refl)
                                                                            $ (IApp. IVar Prelude.No
                                                                                   $ Implicit True))
                                                                       (IVar empty) ]
                                              , PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar n
                                                               $ IBindVar to_be_deceqed^^n0
                                                               $ IBindVar to_be_deceqed^^n1
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ] ] ]
