1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen Bool
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <Prelude.Basics.Bool>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <Prelude.Basics.Bool>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Prelude.Basics.Bool)))
         IDef <Prelude.Basics.Bool>[]
              [ PatClause (IApp. IVar <Prelude.Basics.Bool>[]
                               $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.oneOf
                                       $ (IApp. IVar ::
                                              $ (IApp. IVar <<Prelude.Basics.False>>
                                                     $ IVar ^fuel_arg^)
                                              $ (IApp. IVar ::
                                                     $ (IApp. IVar <<Prelude.Basics.True>>
                                                            $ IVar ^fuel_arg^)
                                                     $ IVar Nil))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Basics.False>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Prelude.Basics.Bool)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Basics.True>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Prelude.Basics.Bool)))
                            IDef <<Prelude.Basics.False>>
                                 [ PatClause (IApp. IVar <<Prelude.Basics.False>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. INamedApp (IVar Prelude.pure)
                                                              f
                                                              (IVar Test.DepTyCheck.Gen.Gen)
                                                  $ IVar Prelude.Basics.False) ]
                            IDef <<Prelude.Basics.True>>
                                 [ PatClause (IApp. IVar <<Prelude.Basics.True>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. INamedApp (IVar Prelude.pure)
                                                              f
                                                              (IVar Test.DepTyCheck.Gen.Gen)
                                                  $ IVar Prelude.Basics.True) ] ]
