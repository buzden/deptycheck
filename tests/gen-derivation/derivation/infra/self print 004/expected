1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> Gen (X n)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg n : IVar Prelude.Types.Nat)
    => ILocal (IApp. IVar <DerivedGen.X>[0] $ IVar ^outmost-fuel^ $ IVar n)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar DerivedGen.X
                                         $ IVar {arg:3630}))))
         IDef <DerivedGen.X>[0]
              [ PatClause (IApp. IVar <DerivedGen.X>[0]
                               $ IVar Dry
                               $ Implicit True)
                          (IVar empty)
              , PatClause (IApp. IVar <DerivedGen.X>[0]
                               $ (IApp. IVar More $ IBindVar fuel)
                               $ IBindVar 0)
                          (IApp. IVar <DerivedGen.X>[0] $ IVar fuel $ IVar 0) ]
