1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> (m : Nat) -> Gen (X n m)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg n : IVar Prelude.Types.Nat)
    => (MW ExplicitArg m : IVar Prelude.Types.Nat)
    => ILocal (IApp. IVar <DerivedGen.X>[0, 1]
                   $ IVar ^outmost-fuel^
                   $ IVar n
                   $ IVar m)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar DerivedGen.X
                                         $ IVar {arg:3630}
                                         $ IVar {arg:3633}))))
         IDef <DerivedGen.X>[0, 1]
              [ PatClause (IApp. IVar <DerivedGen.X>[0, 1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar {arg:3630}
                               $ IBindVar {arg:3633})
                          (ILocal (IApp. INamedApp (IVar Test.DepTyCheck.Gen.oneOf)
                                                   description
                                                   (IApp. IVar Just
                                                        $ IPrimVal DerivedGen.X[0, 1] (non-recursive))
                                       $ (IApp. IVar ::
                                              $ (IApp. IVar <<DerivedGen.XE>>
                                                     $ IVar ^fuel_arg^
                                                     $ IVar {arg:3630}
                                                     $ IVar {arg:3633})
                                              $ (IApp. IVar ::
                                                     $ (IApp. IVar <<DerivedGen.XS>>
                                                            $ IVar ^fuel_arg^
                                                            $ IVar {arg:3630}
                                                            $ IVar {arg:3633})
                                                     $ IVar Nil))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.XE>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:3630}
                                                            $ IVar {arg:3633}))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.XS>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:3630} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:3633} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:3630}
                                                            $ IVar {arg:3633}))))
                            IDef <<DerivedGen.XE>>
                                 [ WithClause (IApp. IVar <<DerivedGen.XE>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ IBindVar n
                                                   $ IBindVar to_be_deceqed^^n0)
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^n0
                                                   $ IVar n)

                                              []
                                              [ PatClause (IApp. IVar <<DerivedGen.XE>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar n
                                                               $ IBindVar n
                                                               $ (IApp. IVar Prelude.Yes
                                                                      $ IVar Builtin.Refl))
                                                          (IVar empty)
                                              , PatClause (IApp. IVar <<DerivedGen.XE>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar n
                                                               $ IBindVar to_be_deceqed^^n0
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ] ]
                            IDef <<DerivedGen.XS>>
                                 [ WithClause (IApp. IVar <<DerivedGen.XS>>
                                                   $ IBindVar ^cons_fuel^
                                                   $ IBindVar n
                                                   $ (IApp. IVar Prelude.Types.S
                                                          $ IBindVar to_be_deceqed^^n0))
                                              MW
                                              (IApp. IVar Decidable.Equality.decEq
                                                   $ IVar to_be_deceqed^^n0
                                                   $ IVar n)

                                              []
                                              [ PatClause (IApp. IVar <<DerivedGen.XS>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar n
                                                               $ (IApp. IVar Prelude.Types.S
                                                                      $ IBindVar n)
                                                               $ (IApp. IVar Prelude.Yes
                                                                      $ IVar Builtin.Refl))
                                                          (IVar empty)
                                              , PatClause (IApp. IVar <<DerivedGen.XS>>
                                                               $ IBindVar ^cons_fuel^
                                                               $ IBindVar n
                                                               $ (IApp. IVar Prelude.Types.S
                                                                      $ IBindVar to_be_deceqed^^n0)
                                                               $ (IApp. IVar Prelude.No
                                                                      $ Implicit True))
                                                          (IVar empty) ]
                                 , PatClause (IApp. IVar <<DerivedGen.XS>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
