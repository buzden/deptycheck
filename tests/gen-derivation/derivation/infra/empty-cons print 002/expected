1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> (a : Type) -> Gen (Vect n a)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg n : IVar Prelude.Types.Nat)
    => (MW ExplicitArg a : IType)
    => ILocal (IApp. IVar <Data.Vect.Vect>[0, 1]
                   $ IVar ^outmost-fuel^
                   $ IVar n
                   $ IVar a)
         IClaim MW
                Export
                []
                (MkTy <Data.Vect.Vect>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg len : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg elem : IType)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Data.Vect.Vect
                                         $ IVar len
                                         $ IVar elem))))
         IDef <Data.Vect.Vect>[0, 1]
              [ PatClause (IApp. IVar <Data.Vect.Vect>[0, 1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar len
                               $ IBindVar elem)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar <<Data.Vect.Nil>>
                                                          $ IVar Data.Fuel.Dry
                                                          $ IVar len
                                                          $ IVar elem)
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. INamedApp (IVar Test.DepTyCheck.Gen.oneOf)
                                                                      description
                                                                      (IApp. IVar Just
                                                                           $ IPrimVal Data.Vect.Vect[0, 1] (spend fuel))
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<Data.Vect.Nil>>
                                                                        $ IVar ^fuel_arg^
                                                                        $ IVar len
                                                                        $ IVar elem)
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar <<Data.Vect.(::)>>
                                                                               $ IVar ^sub^fuel_arg^
                                                                               $ IVar len
                                                                               $ IVar elem)
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Data.Vect.Nil>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg len : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg elem : IType)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Data.Vect.Vect
                                                            $ IVar len
                                                            $ IVar elem))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Data.Vect.(::)>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg len : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg elem : IType)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Data.Vect.Vect
                                                            $ IVar len
                                                            $ IVar elem))))
                            IDef <<Data.Vect.Nil>>
                                 [ PatClause (IApp. IVar <<Data.Vect.Nil>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IVar Prelude.Types.Z
                                                  $ IBindVar elem)
                                             (IVar empty)
                                 , PatClause (IApp. IVar <<Data.Vect.Nil>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ]
                            IDef <<Data.Vect.(::)>>
                                 [ PatClause (IApp. IVar <<Data.Vect.(::)>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ (IApp. IVar Prelude.Types.S
                                                         $ IBindVar len)
                                                  $ IBindVar elem)
                                             (IVar empty)
                                 , PatClause (IApp. IVar <<Data.Vect.(::)>>
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
