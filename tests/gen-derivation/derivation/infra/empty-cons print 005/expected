1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen (n : Nat ** X n)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <DerivedGen.X>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar DerivedGen.X
                                                        $ IVar {arg:830}))))))
         IDef <DerivedGen.X>[]
              [ PatClause (IApp. IVar <DerivedGen.X>[] $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                       $ (IApp. IVar ::
                                              $ (IApp. IVar <<DerivedGen.MkX>>
                                                     $ IVar ^fuel_arg^)
                                              $ IVar Nil)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Prelude.Maybe
                                                     $ IDelayed Lazy
                                                                (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                                            $ IVar Prelude.Types.Nat
                                                                            $ (ILam.  (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                                                                                   => (IApp. IVar DerivedGen.X
                                                                                           $ IVar {arg:830})))))))
                            IDef <<DerivedGen.MkX>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkX>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Prelude.Just
                                                  $ IVar empty) ] ]
