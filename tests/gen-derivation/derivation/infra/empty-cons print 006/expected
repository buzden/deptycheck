1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (a : Type) -> Gen (n : Nat ** Vect n a)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<a> : Implicit True)
    => ILocal (IApp. IVar <Data.Vect.Vect>[1]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<a>)
         IClaim MW
                Export
                []
                (MkTy <Data.Vect.Vect>[1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg elem : IType)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg len : IVar Prelude.Types.Nat)
                                                => (IApp. IVar Data.Vect.Vect
                                                        $ IVar len
                                                        $ IVar elem))))))
         IDef <Data.Vect.Vect>[1]
              [ PatClause (IApp. IVar <Data.Vect.Vect>[1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<elem>)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar <<Data.Vect.Nil>>
                                                          $ IVar Data.Fuel.Dry
                                                          $ IVar inter^<elem>)
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. INamedApp (IVar Test.DepTyCheck.Gen.frequency)
                                                                      description
                                                                      (IApp. IVar Just
                                                                           $ IPrimVal Data.Vect.Vect[1] (spend fuel))
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar Builtin.MkPair
                                                                        $ (IApp. IVar Prelude.integerToNat
                                                                               $ IPrimVal 1)
                                                                        $ (IApp. IVar <<Data.Vect.Nil>>
                                                                               $ IVar ^fuel_arg^
                                                                               $ IVar inter^<elem>))
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar Builtin.MkPair
                                                                               $ (IApp. IVar Deriving.DepTyCheck.Util.Reflection.leftDepth
                                                                                      $ IVar ^sub^fuel_arg^)
                                                                               $ (IApp. IVar <<Data.Vect.(::)>>
                                                                                      $ IVar ^sub^fuel_arg^
                                                                                      $ IVar inter^<elem>))
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Data.Vect.Nil>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg elem : IType)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg len : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar Data.Vect.Vect
                                                                           $ IVar len
                                                                           $ IVar elem))))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Data.Vect.(::)>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg elem : IType)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg len : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar Data.Vect.Vect
                                                                           $ IVar len
                                                                           $ IVar elem))))))
                            IDef <<Data.Vect.Nil>>
                                 [ PatClause (IApp. IVar <<Data.Vect.Nil>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar elem)
                                             (IVar empty) ]
                            IDef <<Data.Vect.(::)>>
                                 [ PatClause (IApp. IVar <<Data.Vect.(::)>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar elem)
                                             (IVar empty) ] ]
