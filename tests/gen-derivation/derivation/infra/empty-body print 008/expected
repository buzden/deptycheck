1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen MaybeEmpty (n : Nat ** (a : Type ** Vect n a))
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <Data.Vect.Vect>[] $ IVar ^outmost-fuel^)
         IClaim MW
                Export
                []
                (MkTy <Data.Vect.Vect>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg len : IVar Prelude.Types.Nat)
                                                => (IApp. IVar Builtin.DPair.DPair
                                                        $ IType
                                                        $ (ILam.  (MW ExplicitArg elem : IType)
                                                               => (IApp. IVar Data.Vect.Vect
                                                                       $ IVar len
                                                                       $ IVar elem))))))))
         IDef <Data.Vect.Vect>[]
              [ PatClause (IApp. IVar <Data.Vect.Vect>[] $ Implicit True)
                          (IVar empty) ]
