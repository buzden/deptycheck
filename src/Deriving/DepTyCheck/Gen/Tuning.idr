module Deriving.DepTyCheck.Gen.Tuning

import public Data.Nat1

import public Language.Reflection.Compat.Constr

import public Syntax.IHateParens.List

%default total

------------------------------------------
--- Facilities for manual order tuning ---
------------------------------------------

namespace GenOrder

  ||| A magic interface for tuning the order of generation in derived generators
  |||
  ||| This interface defines a function `isConstructor` which can be implemented only by calling a macro `itIsConstructor`.
  ||| If the argument of the implementation is not a name of a constructor, you will get a compilation error at this point.
  |||
  ||| `deriveFirst` function gets some information about given arguments in the current derivation task,
  ||| and returns constructor's arguments that must be generated first in the derived generator, in order.
  ||| Please notice that if the given order is incorrect, e.g. it suggests to generate some arguments which do not have any sufficient dependencies,
  ||| this may lead to a compilation error of the derived generator.
  ||| Any repetitions, mentions of already given arguments and mentions of arguments that will be generated by arguments earlier in the list
  ||| will be simply ignored.
  |||
  ||| Constructor arguments can be given by their number or their name (using name literals).
  |||
  ||| Typical usage is the following:
  |||
  ||| ```idris
  ||| data X : Nat -> Nat -> Type where
  |||   X1 : (n, m : Nat) -> n `LT` m => X n m
  |||   X2 : X n n
  |||
  ||| GenOrderTuning "X".dataCon where
  |||   isConstructor = itIsConstructor
  |||   deriveFirst gt gc = [`{m}, 2] -- 2 is the `LT` argument
  ||| ```
  public export
  interface GenOrderTuning (0 n : Name) where
    isConstructor : (con : IsConstructor n ** GenuineProof con)
    deriveFirst : (givenTyArgs : List $ Fin isConstructor.fst.typeInfo.args.length) ->
                  (givenConArgs : List $ Fin isConstructor.fst.conInfo.args.length) ->
                  List $ ConArg isConstructor.fst.conInfo

-------------------------------
--- Tuning of probabilities ---
-------------------------------

namespace Probability

  public export
  interface ProbabilityTuning (0 n : Name) where
    0 isConstructor : (con : IsConstructor n ** GenuineProof con)
    tuneWeight : Nat1 -> Nat1
