1/2: Building PrintDerivation (PrintDerivation.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen MaybeEmpty SortedList
LOG gen.auto.derive.infra:0: 
    MkArg MW ExplicitArg (Just "^outmost-fuel^") (var "Data.Fuel.Fuel")
.=> local
      { decls =
          [ IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.List.Sorted.SortedList>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Data.List.Sorted.SortedList"
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.List.Sorted.FirstGT>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                 .=>    var "Builtin.DPair.DPair"
                                     .$ var "Data.List.Sorted.SortedList"
                                     .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.List.Sorted.SortedList")
                                         .=> var "Data.List.Sorted.FirstGT" .$ var "{arg:1}" .$ var "{arg:2}")))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.List.Sorted.FirstGT>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Data.List.Sorted.SortedList"
                             .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.List.Sorted.SortedList")
                                 .=> var "Data.List.Sorted.FirstGT" .$ var "{arg:1}" .$ var "{arg:2}"))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Data.Nat.LTE>[0]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                     .->    var "Test.DepTyCheck.Gen.Gen"
                         .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                         .$ (   var "Builtin.DPair.DPair"
                             .$ var "Prelude.Types.Nat"
                             .$ (MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat") .=> var "Data.Nat.LTE" .$ var "n" .$ var "m"))
                 })
          , IClaim
              emptyFC
              MW
              Export
              []
              (mkTy
                 { name = "<Prelude.Types.Nat>[]"
                 , type =
                         MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                     .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                 })
          , IDef
              emptyFC
              "<Data.List.Sorted.SortedList>[]"
              [    var "<Data.List.Sorted.SortedList>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.List.Sorted.Nil>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ var "Data.List.Sorted.SortedList"
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.List.Sorted.(::)>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ var "Data.List.Sorted.SortedList"
                                })
                         , IDef
                             emptyFC
                             "<<Data.List.Sorted.Nil>>"
                             [    var "<<Data.List.Sorted.Nil>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.Nil (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Data.List.Sorted.Nil")
                             ]
                         , IDef
                             emptyFC
                             "<<Data.List.Sorted.(::)>>"
                             [    var "<<Data.List.Sorted.(::)>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.(::) (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.List.Sorted.FirstGT>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [       var "Builtin.DPair.MkDPair"
                                                         .$ bindVar "x"
                                                         .$ (var "Builtin.DPair.MkDPair" .$ bindVar "xs" .$ bindVar "^bnd^{conArg:1}")
                                                      .=    var "Prelude.pure"
                                                         .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                         .$ (var "Data.List.Sorted.(::)" .$ var "x" .$ var "xs" .@ var "^bnd^{conArg:1}")
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.SortedList[] (dry fuel)"))
                                    .$ (var "<<Data.List.Sorted.Nil>>" .$ var "Data.Fuel.Dry")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.SortedList[] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<Data.List.Sorted.Nil>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Data.List.Sorted.(::)>>" .$ var "^sub^fuel_arg^"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Data.List.Sorted.FirstGT>[]"
              [    var "<Data.List.Sorted.FirstGT>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.List.Sorted.E>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                .=>    var "Builtin.DPair.DPair"
                                                    .$ var "Data.List.Sorted.SortedList"
                                                    .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.List.Sorted.SortedList")
                                                        .=> var "Data.List.Sorted.FirstGT" .$ var "{arg:1}" .$ var "{arg:2}")))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.List.Sorted.NE>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                                .=>    var "Builtin.DPair.DPair"
                                                    .$ var "Data.List.Sorted.SortedList"
                                                    .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.List.Sorted.SortedList")
                                                        .=> var "Data.List.Sorted.FirstGT" .$ var "{arg:1}" .$ var "{arg:2}")))
                                })
                         , IDef
                             emptyFC
                             "<<Data.List.Sorted.E>>"
                             [    var "<<Data.List.Sorted.E>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.E (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "n") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (   var "Builtin.DPair.MkDPair"
                                                  .$ implicitTrue
                                                  .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "Data.List.Sorted.E" .! ("n", var "n"))))))
                             ]
                         , IDef
                             emptyFC
                             "<<Data.List.Sorted.NE>>"
                             [    var "<<Data.List.Sorted.NE>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.NE (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "n") implicitFalse
                                          .=>    var ">>="
                                              .$ (var "<Data.Nat.LTE>[0]" .$ var "^outmost-fuel^" .$ (var "Prelude.Types.S" .$ var "n"))
                                              .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                                  .=> iCase
                                                        { sc = var "{lamc:0}"
                                                        , ty = implicitFalse
                                                        , clauses =
                                                            [    var "Builtin.DPair.MkDPair" .$ bindVar "x" .$ bindVar "^bnd^{arg:3}"
                                                              .=    var ">>="
                                                                 .$ (var "<Data.List.Sorted.FirstGT>[0]" .$ var "^cons_fuel^" .$ var "x")
                                                                 .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                                                     .=> iCase
                                                                           { sc = var "{lamc:0}"
                                                                           , ty = implicitFalse
                                                                           , clauses =
                                                                               [    var "Builtin.DPair.MkDPair" .$ bindVar "xs" .$ bindVar "prf"
                                                                                 .=    var "Prelude.pure"
                                                                                    .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                                    .$ (   var "Builtin.DPair.MkDPair"
                                                                                        .$ implicitTrue
                                                                                        .$ (   var "Builtin.DPair.MkDPair"
                                                                                            .$ implicitTrue
                                                                                            .$ (   var "Data.List.Sorted.NE"
                                                                                                .! ("xs", var "xs")
                                                                                                .! ("x", var "x")
                                                                                                .! ("prf", var "prf")
                                                                                                .! ("n", var "n")
                                                                                                .$ var "^bnd^{arg:3}")))
                                                                               ]
                                                                           })
                                                            ]
                                                        })))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.FirstGT[] (dry fuel)"))
                                    .$ (var "<<Data.List.Sorted.E>>" .$ var "Data.Fuel.Dry")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.FirstGT[] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<Data.List.Sorted.E>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Data.List.Sorted.NE>>" .$ var "^sub^fuel_arg^"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Data.List.Sorted.FirstGT>[0]"
              [    var "<Data.List.Sorted.FirstGT>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<{arg:1}>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.List.Sorted.E>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Data.List.Sorted.SortedList"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.List.Sorted.SortedList")
                                                .=> var "Data.List.Sorted.FirstGT" .$ var "{arg:1}" .$ var "{arg:2}"))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.List.Sorted.NE>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "{arg:1}") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Data.List.Sorted.SortedList"
                                            .$ (    MkArg MW ExplicitArg (Just "{arg:2}") (var "Data.List.Sorted.SortedList")
                                                .=> var "Data.List.Sorted.FirstGT" .$ var "{arg:1}" .$ var "{arg:2}"))
                                })
                         , IDef
                             emptyFC
                             "<<Data.List.Sorted.E>>"
                             [    var "<<Data.List.Sorted.E>>" .$ bindVar "^cons_fuel^" .$ bindVar "n"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.E (orders)"))
                                  .$ (   var "Prelude.pure"
                                      .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                      .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "Data.List.Sorted.E" .! ("n", var "n"))))
                             ]
                         , IDef
                             emptyFC
                             "<<Data.List.Sorted.NE>>"
                             [    var "<<Data.List.Sorted.NE>>" .$ bindVar "^cons_fuel^" .$ bindVar "n"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.NE (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.Nat.LTE>[0]" .$ var "^outmost-fuel^" .$ (var "Prelude.Types.S" .$ var "n"))
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "x" .$ bindVar "^bnd^{arg:3}"
                                                      .=    var ">>="
                                                         .$ (var "<Data.List.Sorted.FirstGT>[0]" .$ var "^cons_fuel^" .$ var "x")
                                                         .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                                             .=> iCase
                                                                   { sc = var "{lamc:0}"
                                                                   , ty = implicitFalse
                                                                   , clauses =
                                                                       [    var "Builtin.DPair.MkDPair" .$ bindVar "xs" .$ bindVar "prf"
                                                                         .=    var "Prelude.pure"
                                                                            .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                                            .$ (   var "Builtin.DPair.MkDPair"
                                                                                .$ implicitTrue
                                                                                .$ (   var "Data.List.Sorted.NE"
                                                                                    .! ("xs", var "xs")
                                                                                    .! ("x", var "x")
                                                                                    .! ("prf", var "prf")
                                                                                    .! ("n", var "n")
                                                                                    .$ var "^bnd^{arg:3}"))
                                                                       ]
                                                                   })
                                                    ]
                                                }))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.FirstGT[0] (dry fuel)"))
                                    .$ (var "<<Data.List.Sorted.E>>" .$ var "Data.Fuel.Dry" .$ var "inter^<{arg:1}>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.List.Sorted.FirstGT[0] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<Data.List.Sorted.E>>" .$ var "^fuel_arg^" .$ var "inter^<{arg:1}>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Data.List.Sorted.NE>>" .$ var "^sub^fuel_arg^" .$ var "inter^<{arg:1}>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Data.Nat.LTE>[0]"
              [    var "<Data.Nat.LTE>[0]" .$ bindVar "^fuel_arg^" .$ bindVar "inter^<n>"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.Nat.LTEZero>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat")
                                                .=> var "Data.Nat.LTE" .$ var "n" .$ var "m"))
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Data.Nat.LTESucc>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> MkArg MW ExplicitArg (Just "n") (var "Prelude.Types.Nat")
                                    .->    var "Test.DepTyCheck.Gen.Gen"
                                        .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty"
                                        .$ (   var "Builtin.DPair.DPair"
                                            .$ var "Prelude.Types.Nat"
                                            .$ (    MkArg MW ExplicitArg (Just "m") (var "Prelude.Types.Nat")
                                                .=> var "Data.Nat.LTE" .$ var "n" .$ var "m"))
                                })
                         , IDef
                             emptyFC
                             "<<Data.Nat.LTEZero>>"
                             [    var "<<Data.Nat.LTEZero>>" .$ bindVar "^cons_fuel^" .$ var "Prelude.Types.Z"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Nat.LTEZero (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^outmost-fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "right") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Builtin.DPair.MkDPair" .$ implicitTrue .$ (var "Data.Nat.LTEZero" .! ("right", var "right")))))
                             , var "<<Data.Nat.LTEZero>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         , IDef
                             emptyFC
                             "<<Data.Nat.LTESucc>>"
                             [    var "<<Data.Nat.LTESucc>>" .$ bindVar "^cons_fuel^" .$ (var "Prelude.Types.S" .$ bindVar "left")
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Data.Nat.LTESucc (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Data.Nat.LTE>[0]" .$ var "^cons_fuel^" .$ var "left")
                                      .$ (    MkArg MW ExplicitArg (Just "{lamc:0}") implicitFalse
                                          .=> iCase
                                                { sc = var "{lamc:0}"
                                                , ty = implicitFalse
                                                , clauses =
                                                    [    var "Builtin.DPair.MkDPair" .$ bindVar "right" .$ bindVar "^bnd^{arg:4}"
                                                      .=    var "Prelude.pure"
                                                         .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                                         .$ (   var "Builtin.DPair.MkDPair"
                                                             .$ implicitTrue
                                                             .$ (   var "Data.Nat.LTESucc"
                                                                 .! ("right", var "right")
                                                                 .! ("left", var "left")
                                                                 .$ var "^bnd^{arg:4}"))
                                                    ]
                                                }))
                             , var "<<Data.Nat.LTESucc>>" .$ implicitTrue .$ implicitTrue .= var "empty"
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Nat.LTE[0] (dry fuel)"))
                                    .$ (var "<<Data.Nat.LTEZero>>" .$ var "Data.Fuel.Dry" .$ var "inter^<n>")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Data.Nat.LTE[0] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (   var "Builtin.MkPair"
                                                .$ var "Data.Nat1.one"
                                                .$ (var "<<Data.Nat.LTEZero>>" .$ var "^fuel_arg^" .$ var "inter^<n>"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Data.Nat.LTESucc>>" .$ var "^sub^fuel_arg^" .$ var "inter^<n>"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          , IDef
              emptyFC
              "<Prelude.Types.Nat>[]"
              [    var "<Prelude.Types.Nat>[]" .$ bindVar "^fuel_arg^"
                .= local
                     { decls =
                         [ IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Prelude.Types.Z>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                                })
                         , IClaim
                             emptyFC
                             MW
                             Export
                             []
                             (mkTy
                                { name = "<<Prelude.Types.S>>"
                                , type =
                                        MkArg MW ExplicitArg Nothing (var "Data.Fuel.Fuel")
                                    .-> var "Test.DepTyCheck.Gen.Gen" .$ var "Test.DepTyCheck.Gen.Emptiness.MaybeEmpty" .$ var "Prelude.Types.Nat"
                                })
                         , IDef
                             emptyFC
                             "<<Prelude.Types.Z>>"
                             [    var "<<Prelude.Types.Z>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Types.Z (orders)"))
                                  .$ (var "Prelude.pure" .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue) .$ var "Prelude.Types.Z")
                             ]
                         , IDef
                             emptyFC
                             "<<Prelude.Types.S>>"
                             [    var "<<Prelude.Types.S>>" .$ bindVar "^cons_fuel^"
                               .=    var "Test.DepTyCheck.Gen.label"
                                  .$ (var "fromString" .$ primVal (Str "Prelude.Types.S (orders)"))
                                  .$ (   var ">>="
                                      .$ (var "<Prelude.Types.Nat>[]" .$ var "^cons_fuel^")
                                      .$ (    MkArg MW ExplicitArg (Just "^bnd^{arg:5}") implicitFalse
                                          .=>    var "Prelude.pure"
                                              .! ("f", var "Test.DepTyCheck.Gen.Gen" .$ implicitTrue)
                                              .$ (var "Prelude.Types.S" .$ var "^bnd^{arg:5}")))
                             ]
                         ]
                     , scope =
                         iCase
                           { sc = var "^fuel_arg^"
                           , ty = var "Data.Fuel.Fuel"
                           , clauses =
                               [    var "Data.Fuel.Dry"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Prelude.Types.Nat[] (dry fuel)"))
                                    .$ (var "<<Prelude.Types.Z>>" .$ var "Data.Fuel.Dry")
                               ,    var "Data.Fuel.More" .$ bindVar "^sub^fuel_arg^"
                                 .=    var "Test.DepTyCheck.Gen.label"
                                    .$ (var "fromString" .$ primVal (Str "Prelude.Types.Nat[] (spend fuel)"))
                                    .$ (   var "Test.DepTyCheck.Gen.frequency"
                                        .$ (   var "::"
                                            .$ (var "Builtin.MkPair" .$ var "Data.Nat1.one" .$ (var "<<Prelude.Types.Z>>" .$ var "^fuel_arg^"))
                                            .$ (   var "::"
                                                .$ (   var "Builtin.MkPair"
                                                    .$ (var "Deriving.DepTyCheck.Util.Reflection.leftDepth" .$ var "^sub^fuel_arg^")
                                                    .$ (var "<<Prelude.Types.S>>" .$ var "^sub^fuel_arg^"))
                                                .$ var "Nil")))
                               ]
                           }
                     }
              ]
          ]
      , scope = var "<Data.List.Sorted.SortedList>[]" .$ var "^outmost-fuel^"
      }

