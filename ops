{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1711390557,"nonce":"FGTvm/b0eRr/Cg9pET20iOLbT0Y=","metadata":{"github-id":"I_kwDOEt7lWM6Dgtbt","github-url":"https://github.com/buzden/deptycheck/issues/127","origin":"github"},"title":"Treat `So (f x y z)` and `f x y z = True` arguments of constructors specially during derivation","message":"If constructor's argument is of form `So $ f x y z` or `f x y z = True` or `True = f x y z` (for whatever function `f` and whatever count of its arguments), and if we can inspect this `f`, we can optimise generation to be more constructive, instead of filtering, during generation.\n\nWhat we can do is to generate a special data type definition `F` so that if `f : X -\u003e Y -\u003e Z -\u003e Bool`, `F` would be `data F : X -\u003e Y -\u003e Z -\u003e Type` so that both\n```idris\nequivDir : (x : X) -\u003e (y : Y) -\u003e (z : Z) -\u003e f x y z = True -\u003e F x y z\nequivRev : (x : X) -\u003e (y : Y) -\u003e (z : Z) -\u003e F x y z -\u003e f x y z = True\n```\nhold.\n\nThis means that we can replace `So $ f x y z` and/or `f x y z = True` argument by `F x y z` without any change in the meaning.\n\nThus, we can replace `isJust m = True` with `IsJust m`, and `elem x xs` with `Elem x xs`. Generators derived with such a trick would be much more performant, since they would not compute direct function, instead they would constructively generate appropriate values.\n\n---\n\nBeware of thoughts of general replacement of, say, functions like `elem x xs` to `Elem x xs` and corresponding getting the value out of this `Elem`! In the context of returning `True` this change seems to be appropriate, where in the general case the order of pattern-matching in a function is significant, whereas the order of generations of constructors in corresponding type is not. **This approach is appropriate only for functions with non-overlaping clauses.**","files":null}]}