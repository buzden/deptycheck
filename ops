{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1713881163,"nonce":"K+VPYMRjV8IBqKwFBhhO7rFu/JY=","metadata":{"github-id":"I_kwDOEt7lWM6GpT04","github-url":"https://github.com/buzden/deptycheck/issues/145","origin":"github"},"title":"Pre-calculate and filter out combinations of unfortunate orderings, especially given indices","message":"In the case when we have a data type with a constructor with (at least) two arguments that depend on one, say\n\n```idris\ndata X : Type where\n  MkX : Y n -\u003e Z n -\u003e X\n```\n\nwe treat both types `Y` and `Z` equally, and try both\n```idris\n  do ...\n     (n ** y) \u003c- genY\n     z \u003c- genZn n\n     pure $ MkX {n} y z\n```\nand\n```idris\n  do ...\n     (n ** z) \u003c- genZ\n     y \u003c- genYn n\n     pure $ MkX {n} y z\n```\nin usual `LeastEffort`, and arbitrary one of those two when `simplificationHack` option it turned on.\n\nBut in case when, say, `Y` has `n` as index, and `Z` has `n` as a parameter, it's much better to prefer first generation of `Y` and only after `Z` with the given `n`. The same is applicable when, say, `Y` has only constructors and free variables in its indices, when `Z` has both constructors, free variables and calls non-reversible functions -- in this case, we should first generate value for `Z` along with some `n`, and have given arguments for `Y` -- because we can't generate a generator for `Z` with the given `n` because of those non-reversible functions.\n\nTo do this, we could filter out unfortunate orders in the `LeastEffort`. First we should try to filter out those orders, when any given parameter is actually an index. If we get an empty list of orders, then we should start from the begining and filter out only those, which contains calls to non-reversible functions in indices. And only after that, we should apply the simplification hack, if this option is turned on.\n\nThis both would increase generation time, because of reduced runtime filtering, and in some cases it would allow some functions in indices where in other cases we how get an error of unsupported data type.\n\nI wonder if this is actually always fixed by solution of #55 or not.","files":null}]}