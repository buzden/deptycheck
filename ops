{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1660146731,"nonce":"5umHn05QPX3kYFjzyJJKli5tJL4=","metadata":{"github-id":"I_kwDOEt7lWM5Pj_Gc","github-url":"https://github.com/buzden/deptycheck/issues/12","origin":"github"},"title":"Unification error (same name should be used) in derived generator","message":"# Steps to reproduce\n\nConsider the following data type:\n\n```idris\ndata X : (n : Nat) -\u003e Fin n -\u003e Type where\n  MkX : (n : _) -\u003e (f : _) -\u003e X (S n) (FS f)\n```\n\nDerive generator with both type argument given (e.g. using `LeastEffort` derivation algorithm):\n\n```idris\ncheckedGen : Fuel -\u003e (n : Nat) -\u003e (f : Fin n) -\u003e Gen $ X n f\ncheckedGen = deriveGen\n```\n\n# Expected behaviour\n\nDerives and typechecks well.\n\n# Observed behaviour\n\n```\nError during reflection: While processing right hand side of {u:3614},\u003cDerivedGen.X\u003e[0, 1]. While processing left hand side of {sa:3639},\u003c\u003cDerivedGen.MkX\u003e\u003e. When unifying:\n    S ?to_be_deceqed^^n0\nand:\n    S ?n\nPattern variable n unifies with: ?to_be_deceqed^^n0 [locals in scope: ^outmost-fuel^, n, f, {arg:3490}, ^fuel_arg^].\n\nSuggestion: Use the same name for both pattern variables, since they unify.\n```","files":null}]}