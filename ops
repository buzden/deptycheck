{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":6,"timestamp":1723541939,"nonce":"0pzdAkZIddAP72382UOwYMi+UG4=","metadata":{"github-id":"UCE_lAHOEt7lWM6SzH5jzmIB6FU"},"target":"a6bc1f7f82bff2aabf47671259c18c242c6fe07ca0b07c5129d4ce4ee0e70067","message":"In fact, this can be done in two ways:\n- one is without any change in the derived code; one would just fail to typecheck against type signature with `NonEmpty` in case when actually there is a possibility of emptiness due to actual property of a type;\n- another is to analyse deeply during derivation a possibility of emptiness; may be hard to track, since indeed non-empty generator may use maybe-empty generator as a subgenerator in case it's baked by some nice alternative.\n\nSay, it should be okay to have\n```idris\ndata X : Nat -\u003e Type where\n  JustAValue : X n\n  WithFin : Fin n -\u003e X n\n\ngenX : Fuel -\u003e (n : Nat) -\u003e Gen NonEmpty $ X n\ngenX = deriveGen\n\n-- Just to remind: `Fin 0` is an empty type\n```","files":null},{"type":5,"timestamp":1723541646,"nonce":"LXhHLjPycXsOefIMT/T0RQ6yKXs=","metadata":{"github-id":"LE_lADOEt7lWM6SzH5jzwAAAAM6J7fi"},"added":["code: enhancement"],"removed":[]},{"type":5,"timestamp":1723541646,"nonce":"T2jJ7gPivmzK/Up5/QspGQRISks=","metadata":{"github-id":"LE_lADOEt7lWM6SzH5jzwAAAAM6J7ft"},"added":["part: derivation"],"removed":[]},{"type":5,"timestamp":1723541646,"nonce":"3AY47mLLiXXGF8JM9+PSuWTXvbU=","metadata":{"github-id":"LE_lADOEt7lWM6SzH5jzwAAAAM6J7f2"},"added":["status: feature request"],"removed":[]},{"type":5,"timestamp":1723541646,"nonce":"nfYGT5uZGgpct5Rd5iN+P6pCMTs=","metadata":{"github-id":"LE_lADOEt7lWM6SzH5jzwAAAAM6J7f8"},"added":["derive: least-effort"],"removed":[]},{"type":5,"timestamp":1723541646,"nonce":"zXTxojkZtk9zrQcU/0a0QEWFriQ=","metadata":{"github-id":"LE_lADOEt7lWM6SzH5jzwAAAAM6J7gF"},"added":["derive: core"],"removed":[]}]}