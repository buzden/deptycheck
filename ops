{"author":{"id":"3af9e2655ad9f293988512be60886dcee65d101213a8f77d6e1aec75c05cdd9f"},"ops":[{"type":3,"timestamp":1663016739,"nonce":"sO/ASS0mwROPBPXNn/0kXHlZp6g=","metadata":{"github-id":"IC_kwDOEt7lWM5KLSXt","github-url":"https://github.com/buzden/deptycheck/issues/11#issuecomment-1244472813"},"message":"I guess I came up with a small example of derived generator with an unreachable clause. Consider the following:\n```idris\ndata X = MkX\n\ndata Y = MkY\n\ndata Z : Y -\u003e Type where\n  MkZ : X -\u003e Z MkY\n\ngenZ : Fuel -\u003e (y : _) -\u003e Z y\ngenZ = deriveGen\n```\n\nThis yields a warning message:\n```\nWarning: Unreachable clause: (\u003c\u003cMain.MkZ\u003e\u003e) (^outmost-fuel^) y {arg:901} (^fuel_arg^) _ _\n```","files":null},{"type":3,"timestamp":1663317518,"nonce":"KXltZU3L8OuTG17UilRGSg4woH0=","metadata":{"github-id":"IC_kwDOEt7lWM5Kc42o","github-url":"https://github.com/buzden/deptycheck/issues/11#issuecomment-1249086888"},"message":"\u003e I guess I came up with a small example of derived generator with an unreachable clause. Consider the following:\n\u003e \n\u003e ```idris\n\u003e data X = MkX\n\u003e \n\u003e data Y = MkY\n\u003e \n\u003e data Z : Y -\u003e Type where\n\u003e   MkZ : X -\u003e Z MkY\n\u003e \n\u003e genZ : Fuel -\u003e (y : _) -\u003e Z y\n\u003e genZ = deriveGen\n\u003e ```\n\u003e \n\u003e This yields a warning message:\n\u003e \n\u003e ```\n\u003e Warning: Unreachable clause: (\u003c\u003cMain.MkZ\u003e\u003e) (^outmost-fuel^) y {arg:901} (^fuel_arg^) _ _\n\u003e ```\n\nDecided to try and investigate a little further, here is a code of a derived generator\n\n```idris\nmyGen : Fuel -\u003e (outer_y : Y) -\u003e Gen $ Z outer_y\nmyGen outmost_fuel outer_y =\n  let genX : Fuel -\u003e Gen X\n      genZ : Fuel -\u003e (y : Y) -\u003e Gen $ Z y\n\n      genX fuel_arg =\n        let genMkX : Fuel -\u003e Gen X\n            genMkX cons_fuel = pure MkX\n            in genMkX fuel_arg\n\n      genZ fuel_arg y =\n        let genMkZ : Fuel -\u003e (y' : Y) -\u003e Gen $ Z y'\n            genMkZ cons_fuel MkY = (genX cons_fuel) \u003e\u003e= (\\x =\u003e pure (MkZ x))\n            genMkZ _ _ = empty\n            in genMkZ fuel_arg y\n\n      in genZ outmost_fuel outer_y\n```\n\nHere `genMkZ _ _ = empty` is  a redundant clause","files":null}]}