{"author":{"id":"3af9e2655ad9f293988512be60886dcee65d101213a8f77d6e1aec75c05cdd9f"},"ops":[{"type":3,"timestamp":1661538506,"nonce":"fkAHgI0C8HEpXhqb6XDPX2Vg5A4=","metadata":{"github-id":"IC_kwDOEt7lWM5JPfDK","github-url":"https://github.com/buzden/deptycheck/issues/24#issuecomment-1228796106"},"message":"Inspecting the result of derivation unveils that the approximately the following generator was derived:\n```idris\ngenW outmost_fuel a b =\n  let genMkW : Fuel -\u003e (a : Z) -\u003e (b : Z) -\u003e Gen $ W a b\n      genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                       (MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}})\n                       with (decEq to_be_deceqed_n0 n)\n        genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                         (MkZ (MkX n True) @{MkY {b = True} {n = n}}) | (Yes Refl) = pure (MkW {n = n})\n\n        genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                         (MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}}) | (No _) = empty\n\n      genMkW _ _ _ = empty\n\n  in genMkW outmost_fuel a b\n```\nIn to occurrences, the line `(MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}})` is incorrect: before matching on `decEq to_be_deceqed_n0 n` and after matching on `No _`, since it provides a value of type `Y n True` when `Y to_be_deceqed_n0 True` is expected, leading to an error akin an observed one. Replacing it with `(MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = to_be_deceqed_n0}})` leads to a code that typechecks successfully.","files":null},{"type":6,"timestamp":1661538889,"nonce":"uumkNCw1LzMdnFNHGjBnODbDhr4=","metadata":{"github-id":"UCE_lALOEt7lWM5JPfDKziafN70"},"target":"d3e119efd2669d4bc0df85647295b55aa3a6206c984ad8bb1ff8d2182205be74","message":"Inspecting the result of derivation unveils that the approximately the following generator was derived:\n```idris\ngenW outmost_fuel a b =\n  let genMkW : Fuel -\u003e (a : Z) -\u003e (b : Z) -\u003e Gen $ W a b\n      genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                       (MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}})\n                       with (decEq to_be_deceqed_n0 n)\n        genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                         (MkZ (MkX n True) @{MkY {b = True} {n = n}}) | (Yes Refl) = pure (MkW {n = n})\n\n        genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                         (MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}}) | (No _) = empty\n\n      genMkW _ _ _ = empty\n\n  in genMkW outmost_fuel a b\n```\nIn to occurrences, the line `(MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}})` is incorrect: before matching on `decEq to_be_deceqed_n0 n` and after matching on `No _`, since it provides a value of type `Y n True` when `Y to_be_deceqed_n0 True` is expected, leading to an error akin observed one. Replacing it with `(MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = to_be_deceqed_n0}})` leads to a code that typechecks successfully.","files":null},{"type":6,"timestamp":1661538919,"nonce":"R46L1EpQbmhHIZOBRrbnxnKuJ7U=","metadata":{"github-id":"UCE_lALOEt7lWM5JPfDKziafOP4"},"target":"d3e119efd2669d4bc0df85647295b55aa3a6206c984ad8bb1ff8d2182205be74","message":"Inspecting the result of derivation unveils that the approximately the following generator was derived:\n```idris\ngenW outmost_fuel a b =\n  let genMkW : Fuel -\u003e (a : Z) -\u003e (b : Z) -\u003e Gen $ W a b\n      genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                       (MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}})\n                       with (decEq to_be_deceqed_n0 n)\n        genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                         (MkZ (MkX n True) @{MkY {b = True} {n = n}}) | (Yes Refl) = pure (MkW {n = n})\n\n        genMkW cons_fuel (MkZ (MkX n False) @{MkY {b = False} {n = n}})\n                         (MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}}) | (No _) = empty\n\n      genMkW _ _ _ = empty\n\n  in genMkW outmost_fuel a b\n```\nIn to occurrences, the line `(MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = n}})` is incorrect: before matching on `decEq to_be_deceqed_n0 n` and after matching on `No _`, since it provides a value of type `Y n True` when `Y to_be_deceqed_n0 True` is expected, leading to an error akin to the observed one. Replacing it with `(MkZ (MkX to_be_deceqed_n0 True) @{MkY {b = True} {n = to_be_deceqed_n0}})` leads to a code that typechecks successfully.","files":null}]}