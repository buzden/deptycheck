{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1685432500,"nonce":"+s5GmHpkv5iLvTjmxZX7czqmP5Y=","metadata":{"github-id":"I_kwDOEt7lWM5nN6l3","github-url":"https://github.com/buzden/deptycheck/issues/70","origin":"github"},"title":"Manage `(l = r) -\u003e Void` fields in constructors specially","message":"When some `X- \u003e Void` (i.e. `Not X`) instances need to be generated for a constructor, we could either derive a special generator for this type like\n\n```idris\ngenNotX : (l, r : X) -\u003e Gen MaybeEmpty $ X -\u003e Void\ngenNotX l r = case decEq l r of\n  Yes _ =\u003e empty\n  No co =\u003e pure co\n```\n\nor just use this type of expression instead of a subgenerator call (the first seems to be more preferable, since it should work for any constructor generation algorithm).\n\nGenerator above works well only when both arguments are given. Maybe, we should always make generation order in a such way that these generators only \"filter\", i.e. they always take both their generators as givens.\n\n---\n\nHowever, it is possible to derive such generators with one derived and one generated argument. It should be possible at least when `DecEq` is derivable; however I'm not sure it's feasible in a general case.\n\n---\n\nAnyway, since generators with both given arguments seems to be not really sparse, so, maybe this hard derivation is not really needed. this needs some investigation.","files":null}]}