{"author":{"id":"974c2426701ae97ed36f19a3856497e52222c2e370fde7d3f0c33851d3f76984"},"ops":[{"type":1,"timestamp":1739045048,"nonce":"YfYQzClTZHT0ZErQ9qoNAGYNDtU=","metadata":{"github-id":"I_kwDOEt7lWM6pSpd1","github-url":"https://github.com/buzden/deptycheck/issues/229","origin":"github"},"title":"Derivation fails when adding S to an LTE parameter due to unnecessary generators with extraneous given parameters being derived","message":"**Package collection used**: `nightly-250207`\n\nDerivation of `genX` fails here:\n```idris\npublic export\nrecord FI n where\n    constructor MkFI\n    v : Nat\n    p : LTE v n\n\nnamespace VN\n    public export\n    data VN : Nat -\u003e Type where\n        Nil : VN 0\n        (::) : Nat -\u003e VN n -\u003e VN (S n)\n\nnamespace HVF\n    public export\n    data HVF : (k : Nat) -\u003e VN k -\u003e Type where\n        Nil : HVF 0 []\n        (::) : FI n -\u003e HVF k ns -\u003e HVF (S k) (n :: ns)\n\npublic export\ndata X : Nat -\u003e (n : Nat) -\u003e FI n -\u003e Type\n\nnamespace HVX\n    public export\n    data HVX : Nat -\u003e (k : Nat) -\u003e (ns : VN k) -\u003e HVF k ns -\u003e Type where\n        Nil : HVX z 0 [] []\n        (::) : forall z, n, ns, cs, c.\n               X z n c -\u003e \n               HVX z k ns cs -\u003e \n               HVX z (S k) (n :: ns) (c :: cs)\n\npublic export\ndata X : Nat -\u003e (n : Nat) -\u003e FI n -\u003e Type where\n    MkX : forall z, n, kv, ns, cs.\n          {0 kp : LTE (S kv) (n * z)} -\u003e\n          HVX z kv ns cs -\u003e\n          X z n (MkFI n Control.Relation.reflexive)\n\npublic export\ngenX : Fuel -\u003e (z : Nat) -\u003e Gen MaybeEmpty (n ** c ** X z n c)\ngenX = deriveGen\n```\n\nwith the following error:\n\n```\n[ info ] Found local config at /home/elk/Development/deptycheck-bug-Skv/pack.toml\n[ info ] Using package collection nightly-250207\n[ build ] 1/1: Building Main (src/Main.idr)\n[ build ] LOG deptycheck.derive.namesInfo:5: ____ start ____\n[ build ] LOG deptycheck.derive.namesInfo:5: ^^^^  end  ^^^^\n[ build ] LOG deptycheck.derive.type:5: Main.X[0] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Main.X[0] MkX __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.X[0] MkX ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Main.X[0] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Main.X[0] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.X[0] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Data.Nat.LTE[0, 1] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Data.Nat.LTE[0, 1] LTEZero __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Data.Nat.LTE[0, 1] LTEZero ^^  end  ^^\n[ build ] LOG deptycheck.derive.consBody:5: Data.Nat.LTE[0, 1] LTESucc __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Data.Nat.LTE[0, 1] LTESucc ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Data.Nat.LTE[0, 1] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Data.Nat.LTE[0, 1] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Data.Nat.LTE[0, 1] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Prelude.Types.Nat[] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] Z __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] Z ^^  end  ^^\n[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] S __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] S ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Prelude.Types.Nat[] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Prelude.Types.Nat[] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Prelude.Types.Nat[] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.HVX.HVX[0, 1, 2, 3] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVX.HVX[0, 1, 2, 3] Nil __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVX.HVX[0, 1, 2, 3] Nil ^^  end  ^^\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVX.HVX[0, 1, 2, 3] (::) __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVX.HVX[0, 1, 2, 3] (::) ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Main.HVX.HVX[0, 1, 2, 3] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Main.HVX.HVX[0, 1, 2, 3] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.HVX.HVX[0, 1, 2, 3] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.HVF.HVF[] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVF.HVF[] Nil __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVF.HVF[] Nil ^^  end  ^^\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVF.HVF[] (::) __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVF.HVF[] (::) ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Main.HVF.HVF[] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Main.HVF.HVF[] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.HVF.HVF[] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.FI[] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Main.FI[] MkFI __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.FI[] MkFI ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Main.FI[] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Main.FI[] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.FI[] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.X[0, 1, 2] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Main.X[0, 1, 2] MkX __ start __\n[ build ] Error: While processing right hand side of genX. Error during\n[ build ] reflection: Argument #2 is not supported yet, argument expression: Main.MkFI {n = n} n (Data.Nat.reflexive {x = n}), reason: name `Data.Nat.reflexive` is not a constructor\n[ build ] \n[ build ] Main:43:11--43:52\n[ build ]  39 | data X : Nat -\u003e (n : Nat) -\u003e FI n -\u003e Type where\n[ build ]  40 |     MkX : forall z, n, kv, ns, cs.\n[ build ]  41 |           {0 kp : LTE (S kv) (n * z)} -\u003e\n[ build ]  42 |           HVX z kv ns cs -\u003e\n[ build ]  43 |           X z n (MkFI n Control.Relation.reflexive)\n[ build ]                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n[ build ] \n[ fatal ] Error when executing system command.\n          Command: \"/home/elk/.pack/install/7ca34d1db6f7ea46fb16ea4df303fa97c50a7f6c/idris2/bin/idris2\" \"--build\" \"deptycheck-bug-Skv.ipkg\"\n          Error code: 1\n```\n\nHowever, if `(S kv)` in the type of the `kp` parameter of the `MkX` constructor is replaced with just `kv`, then the generator is successfully derived. Note that the failure occurs in the `X[0, 1, 2]` generator, that is derived only with `(S kv)` (and some other parameters become given as well, such as `HVX[0, 1]` turning into `HVX[0, 1, 2, 3]` when introducing `(S kv)`):\n\n```\n[ info ] Found local config at /home/elk/Development/deptycheck-bug-Skv/pack.toml\n[ info ] Using package collection nightly-250207\n[ build ] 1/1: Building Main (src/Main.idr)\n[ build ] LOG deptycheck.derive.namesInfo:5: ____ start ____\n[ build ] LOG deptycheck.derive.namesInfo:5: ^^^^  end  ^^^^\n[ build ] LOG deptycheck.derive.type:5: Main.X[0] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Main.X[0] MkX __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.X[0] MkX ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Main.X[0] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Main.X[0] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.X[0] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.HVX.HVX[0, 1] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVX.HVX[0, 1] Nil __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVX.HVX[0, 1] Nil ^^  end  ^^\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVX.HVX[0, 1] (::) __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Main.HVX.HVX[0, 1] (::) ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Main.HVX.HVX[0, 1] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Main.HVX.HVX[0, 1] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Main.HVX.HVX[0, 1] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Data.Nat.LTE[1] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Data.Nat.LTE[1] LTEZero __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Data.Nat.LTE[1] LTEZero ^^  end  ^^\n[ build ] LOG deptycheck.derive.consBody:5: Data.Nat.LTE[1] LTESucc __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Data.Nat.LTE[1] LTESucc ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Data.Nat.LTE[1] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Data.Nat.LTE[1] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Data.Nat.LTE[1] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Prelude.Types.Nat[] ___ start ___\n[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] Z __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] Z ^^  end  ^^\n[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] S __ start __\n[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] S ^^  end  ^^\n[ build ] LOG deptycheck.derive.consRec:5: Prelude.Types.Nat[] ___ start ___\n[ build ] LOG deptycheck.derive.consRec:5: Prelude.Types.Nat[] ^^^  end  ^^^\n[ build ] LOG deptycheck.derive.type:5: Prelude.Types.Nat[] ^^^  end  ^^^\n[ build ] Now compiling the executable: deptycheck-bug-Skv\n```","files":null}]}