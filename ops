{"author":{"id":"262ecba31362fba25f81987d50e9011266f1a7076102efce621b0a8dd02b64dc"},"ops":[{"type":1,"timestamp":1756142439,"nonce":"GZfJp6968Hp4ahtiF/puN+vXdAY=","metadata":{"github-id":"I_kwDOEt7lWM7H1NoE","github-url":"https://github.com/buzden/deptycheck/issues/279","origin":"github"},"title":"Extend support for generators that donâ€™t consume Fuel","message":"Generator for such type can potentially run without fuel, even if their totality can't be proven by Idris2\n\n```Idris\npublic export\ndata FinConsumer : Fin n -\u003e Type where\n  Consume : FinConsumer f\n\npublic export\ndata ConsumersList : Fin (S n) -\u003e Type where\n  Nil  : ConsumersList FZ\n  (::) : FinConsumer f -\u003e ConsumersList (weaken i) -\u003e ConsumersList (FS i)\n```\n\nA generator printed by collection `nightly-250824`\n```Idris\nimport Deriving.DepTyCheck.Gen\n\n%language ElabReflection\n\n%runElab deriveGenPrinter $ Fuel -\u003e {n' : _} -\u003e (n : Fin $ S n') -\u003e Gen MaybeEmpty $ ConsumersList n\n```\n\n```\n, IDef\n    emptyFC\n    \"\u003c\u003cTest.Verilog.Things.Test.Nil\u003e\u003e\"\n    [       var \"\u003c\u003cTest.Verilog.Things.Test.Nil\u003e\u003e\"\n        .$ bindVar \"^cons_fuel^\"\n        .$ bindVar \"{n:5317}\"\n        .$ (var \"Data.Fin.FZ\" .! (\"k\", implicitTrue))\n    .=    var \"Test.DepTyCheck.Gen.label\"\n        .$ (var \"fromString\" .$ primVal (Str \"Test.Verilog.Things.Test.Nil (orders)\"))\n        .$ (   var \"Prelude.pure\"\n            .! (\"f\", var \"Test.DepTyCheck.Gen.Gen\" .$ implicitTrue)\n            .$ (var \"Test.Verilog.Things.Test.Nil\" .! (\"{n:5317}\", var \"{n:5317}\")))\n    , var \"\u003c\u003cTest.Verilog.Things.Test.Nil\u003e\u003e\" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var \"empty\"\n    ]\n, IDef\n    emptyFC\n    \"\u003c\u003cTest.Verilog.Things.Test.(::)\u003e\u003e\"\n    [       var \"\u003c\u003cTest.Verilog.Things.Test.(::)\u003e\u003e\"\n        .$ bindVar \"^cons_fuel^\"\n        .$ bindVar \"{n:5337}\"\n        .$ (var \"Data.Fin.FS\" .! (\"k\", implicitTrue) .$ bindVar \"i\")\n    .=    var \"Test.DepTyCheck.Gen.label\"\n        .$ (var \"fromString\" .$ primVal (Str \"Test.Verilog.Things.Test.(::) (orders)\"))\n        .$ (   var \"\u003e\u003e=\"\n            .$ (   var \"\u003cTest.Verilog.Things.Test.ConsumersList\u003e[0, 1]\"\n                .$ var \"^cons_fuel^\"\n                .$ var \"{n:5337}\"\n                .$ (var \"Data.Fin.weaken\" .! (\"n\", var \"{n:5337}\") .$ var \"i\"))\n            .$ (    MkArg MW ExplicitArg (Just \"{arg:5323}\") implicitFalse\n                .=\u003e    var \"\u003e\u003e=\"\n                    .$ (var \"\u003cTest.Verilog.Things.Test.FinConsumer\u003e[]\" .$ var \"^outmost-fuel^\")\n                    .$ (    MkArg MW ExplicitArg (Just \"{lamc:0}\") implicitFalse\n                        .=\u003e iCase\n                            { sc = var \"{lamc:0}\"\n                            , ty = implicitFalse\n                            , clauses =\n                                [       var \"Builtin.DPair.MkDPair\"\n                                        .$ bindVar \"{n:5340}\"\n                                        .$ (var \"Builtin.DPair.MkDPair\" .$ bindVar \"f\" .$ bindVar \"{arg:5319}\")\n                                    .=    var \"Prelude.pure\"\n                                        .! (\"f\", var \"Test.DepTyCheck.Gen.Gen\" .$ implicitTrue)\n                                        .$ (   var \"Test.Verilog.Things.Test.(::)\"\n                                            .! (\"{n:5340}\", implicitTrue)\n                                            .! (\"{n:5337}\", implicitTrue)\n                                            .! (\"i\", implicitTrue)\n                                            .! (\"f\", implicitTrue)\n                                            .$ var \"{arg:5319}\"\n                                            .$ var \"{arg:5323}\")\n                                ]\n                            })))\n    , var \"\u003c\u003cTest.Verilog.Things.Test.(::)\u003e\u003e\" .$ implicitTrue .$ implicitTrue .$ implicitTrue .= var \"empty\"\n    ]\n]\n    , scope =\n        iCase\n        { sc = var \"^fuel_arg^\"\n        , ty = var \"Data.Fuel.Fuel\"\n        , clauses =\n            [    var \"Data.Fuel.Dry\"\n                .=    var \"Test.DepTyCheck.Gen.label\"\n                .$ (var \"fromString\" .$ primVal (Str \"Test.Verilog.Things.Test.ConsumersList[0(n), 1] (dry fuel)\"))\n                .$ (var \"\u003c\u003cTest.Verilog.Things.Test.Nil\u003e\u003e\" .$ var \"^fuel_arg^\" .$ var \"inter^\u003cn\u003e\" .$ var \"inter^\u003c{arg:5308}\u003e\")\n            ,    var \"Data.Fuel.More\" .$ bindVar \"^sub^fuel_arg^\"\n                .=    var \"Test.DepTyCheck.Gen.label\"\n                .$ (var \"fromString\" .$ primVal (Str \"Test.Verilog.Things.Test.ConsumersList[0(n), 1] (non-dry fuel)\"))\n                .$ (   var \"Test.DepTyCheck.Gen.frequency\"\n                    .$ (   var \"::\"\n                        .$ (   var \"Builtin.MkPair\"\n                            .$ var \"Data.Nat1.one\"\n                            .$ (   var \"\u003c\u003cTest.Verilog.Things.Test.Nil\u003e\u003e\"\n                                .$ var \"^fuel_arg^\"\n                                .$ var \"inter^\u003cn\u003e\"\n                                .$ var \"inter^\u003c{arg:5308}\u003e\"))\n                        .$ (   var \"::\"\n                            .$ (   var \"Builtin.MkPair\"\n                                .$ (var \"Deriving.DepTyCheck.Gen.ConsRecs.leftDepth\" .$ var \"^sub^fuel_arg^\")\n                                .$ (   var \"\u003c\u003cTest.Verilog.Things.Test.(::)\u003e\u003e\"\n                                    .$ var \"^sub^fuel_arg^\"\n                                    .$ var \"inter^\u003cn\u003e\"\n                                    .$ var \"inter^\u003c{arg:5308}\u003e\"))\n                            .$ var \"Nil\")))\n            ]\n        }\n    }\n]\n```","files":null}]}