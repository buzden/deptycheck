{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1719231857,"nonce":"Sa9+whHHawo571qp24C0QDQ3F5A=","metadata":{"github-id":"I_kwDOEt7lWM6NRR2v","github-url":"https://github.com/buzden/deptycheck/issues/171","origin":"github"},"title":"Support paralellised running of generators","message":"Currently, `unGen` is very linear, it runs one stuff right after the other. We could support running the generator by translating it to a special thing that could be run in parallel. E.g., imagine that `Coop` supports actually parallelised run. Then we could have `unGenCoop : Gen1 a -\u003e Coop m a`, which actually runs all, say, applicatives in parallel.\n\nWe could imagine, possibly, a computation backed by [coop](https://github.com/buzden/idris2-coop) (once it has a parallel backend) or [async](https://github.com/stefan-hoeck/idris2-async).\n\nTo support all of that, we would need to constantly split our random numbers generators, e.g. like it's done in [falsify](https://well-typed.com/blog/2023/04/falsify/) library, to make halves of, say, applicatives be able to run indenendently. This seems to be feasible anyway, and even may lead to an ability to shrink nicely, like it's done in falsify.","files":null}]}