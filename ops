{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1703672937,"nonce":"HsPToyYrgd+Vg3dnMIS7TdYBddc=","metadata":{"github-id":"I_kwDOEt7lWM56nljq","github-url":"https://github.com/buzden/deptycheck/issues/107","origin":"github"},"title":"Implement `TTImp` traversals in `Util.Reflection` through `mapATTImp`","message":"`allVarNames` and `hasNameInsideDeep` do typical traversals of `TTImp`, with some gluing function (`++` and `||` respectively) and separate tratment of particular `TTImp` constructors (`IVar`, in particular). This can be done by inventing a special applicative type, which has a phantom type argument and contains the result of the required traversal (`List Name` and `m Bool` respectively). This special applicative type can excersise the gluing function in its implementation of `\u003c*\u003e`.\n\nThe only concern I have to that is that I'm not sure that this approach retains laziness of `LazyList`-resulting traversals.","files":null}]}