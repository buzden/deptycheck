{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1696539736,"nonce":"d1jmTI71bqpY3PSFGxCvBq70TI4=","metadata":{"github-id":"I_kwDOEt7lWM5y-vKi","github-url":"https://github.com/buzden/deptycheck/issues/95","origin":"github"},"title":"Print percent of *tests* where element of a model coverage is involved","message":"Currently, after the #94, count of presence in a model coverage is printed along with coverage status.\n\nNow it looks like this (takes from test [here](https://github.com/buzden/deptycheck/blob/85cfb4d207fff8c4a37354fee3d6fbc09f3b8fdd/tests/lib/coverage/ty-and-con-withCov-001/expected)):\n\n```\nPrintCoverage.Y covered partially (100 times)\n  - Y1: covered (41 times)\n  - Y2: not covered\n  - Y3: covered (59 times)\n```\n\nThere were 100 tests generated, `Y` was used in each test once, thus the whole count of usages of the type `Y` is 100% for the tests, where individual actually generated constructors have 41% and 59% respectively.\n\nBut when type is recursive, or just is used several times, one can get percentage \u003e100% (taken from another test [here](https://github.com/buzden/deptycheck/blob/85cfb4d207fff8c4a37354fee3d6fbc09f3b8fdd/tests/lib/coverage/ty-and-con-withCov-002/expected)):\n\n```\nPrintCoverage.X covered partially (118 times)\n  - X1: covered (54 times)\n  - X2: not covered\n  - X3: covered (64 times)\n\nPrintCoverage.Y covered partially (100 times)\n  - Y1: covered (41 times)\n  - Y2: not covered\n  - Y3: covered (59 times)\n```\n\nActually, type `X` is present in 59% of the tests, along with the `Y3` constructor, but each time it is present twice. If we were printing this with a percentage, `118%` near to the `X` type would be a misleading number, where \"present in 59% of tests\" could be feasible one.\n\nSo, it is suggested to add percentage of presence in the tests, but we must be accurate and (unlike the current _times_ coverage) to not to count each model coverage element several times in a single test.\n\nThe current design does not support this directly, we don't store this type of data. There are at least two possible solutions to this:\n\n- change the order of [`ModelCoverage`](https://github.com/buzden/deptycheck/blob/85cfb4d207fff8c4a37354fee3d6fbc09f3b8fdd/src/Test/DepTyCheck/Gen/Coverage.idr#L29-L31) collection so that each test uses [`registerCoverage`](https://github.com/buzden/deptycheck/blob/85cfb4d207fff8c4a37354fee3d6fbc09f3b8fdd/src/Test/DepTyCheck/Gen/Coverage.idr#L160) independently, and thus is can be changed to calculate percentage of mentions of types and constructors per test; I don't like this solution because of potential high count of calls to relatively expensive `registerCoverage` function;\n\n- to have two separate `Semigroup`s implemented for the `ModelCoverage` type: one is for use with the `Writer` inside [appropriate `unGen`](https://github.com/buzden/deptycheck/blob/85cfb4d207fff8c4a37354fee3d6fbc09f3b8fdd/src/Test/DepTyCheck/Gen/Coverage.idr#L45-L48) which does not accumulate the usage-per-test metric, and is not exported outside the module; and the other which does accumulate usage-per-test metric and is exported outside; the latter one should be declared in the bottom of the module to not be used accidentally in the `Writer` context.\n\n-","files":null}]}