{"author":{"id":"3af9e2655ad9f293988512be60886dcee65d101213a8f77d6e1aec75c05cdd9f"},"ops":[{"type":6,"timestamp":1660079617,"nonce":"7vJzL06utKLuYpQDUw6x6cbk1Ws=","metadata":{"github-id":"UCE_lAHOEt7lWM5Pey9ozjIobjA"},"target":"c34567b9472326c9f9740bc9125734e95bc438a01813eb7269eadb67c5d31d8c","message":"# Steps to reproduce\n\nConsider the following module which defines two types and asks for a generator of one of them:\n\n```idris\nimport Test.DepTyCheck.Gen\nimport Test.DepTyCheck.Gen.Auto\n\n%default total\n%language ElabReflection\n\n%hint\nUsedConstructorDerivator : ConstructorDerivator\nUsedConstructorDerivator = LeastEffort\n\ndata X : Type where\n  Nil : X\n  (::) : Unit -\u003e X -\u003e X\n\nDecEq X where\n  [] `decEq` [] = Yes Refl\n  [] `decEq` (y :: ys) = No $ \\case Refl impossible\n  (x :: xs) `decEq` [] = No $ \\case Refl impossible\n  (() :: xs) `decEq` (() :: ys) = case xs `decEq` ys of\n                                    (Yes prf) =\u003e rewrite prf in Yes Refl\n                                    (No contra) =\u003e No $ \\case Refl =\u003e contra Refl\n\ndata Y : (xs : X) -\u003e (ys : X) -\u003e Type where\n  A : Y (x :: xs) (x :: xs)\n  B : Y xs ys -\u003e Y (x :: xs) (y :: ys)\n\nfaultyGen : Fuel -\u003e (xs : X) -\u003e (ys : X) -\u003e Gen $ Y xs ys\nfaultyGen = deriveGen\n```\n\n# Expected behaviour\n\nAll derives and typechecks OR a comprehensible error message giving a hint on what is wrong\n\n# Observed behaviour\n\nThe generator is derived, however it does not compile, instead an error occurs:\n```\nError: While processing right hand side of genY. Error during reflection: While processing right hand side of $resolved11735,\u003cMain.Y\u003e[0, 1]. While processing right hand side\nof $resolved11735,\u003cMain.Y\u003e[0, 1],\u003c\u003cMain.A\u003e\u003e. When unifying:\n    Y (x :: to_be_deceqed^^xs1) (x :: to_be_deceqed^^xs1)\nand:\n    Y (to_be_deceqed^^x0 :: to_be_deceqed^^xs1) (to_be_deceqed^^x0 :: to_be_deceqed^^xs1)\nMismatch between: x and to_be_deceqed^^x0.\n```\n\n# Possible explanation\n\nIf we examine the code of a derived generator, the function of roughly the following structure is produced:\n\n```idris\nfaultyGen : Fuel -\u003e (xs : X) -\u003e (ys : X) -\u003e Gen $ Y xs ys\nfaultyGen fuel_arg xs ys =\n  let genA : Fuel -\u003e (xs : X) -\u003e (ys : X) -\u003e Gen $ Y xs ys\n       genB : Fuel -\u003e (xs : X) -\u003e (ys : X) -\u003e Gen $ Y xs ys\n\n       genA cons_fuel (x :: xs) (to_be_deceqed_x0 :: to_be_deceqed_xs1) =\n         case decEq x to_be_deceqed_x0 of\n                 (No _) =\u003e empty\n                 (Yes Refl) =\u003e case decEq xs to_be_deceqed_xs1 of\n                                              (No _) =\u003e empty\n                                              (Yes Refl) =\u003e ?something_interesting\n      genA _ _ _ = empty\n\n      genB cons_fuel (x :: xs) (y :: ys) = ?genB_rhs\n      genB _ _ _ = empty\n\n      in ?rest\n```\nwhere the context of a hole `?something_interesting` is \n```\n   ys : X\n   fuel_arg : Fuel\n   to_be_deceqed_xs1 : X\n   to_be_deceqed_x0 : ()\n   cons_fuel : Fuel\n   x : ()\n   xs : X\n------------------------------\nsomething_interesting : Gen (Y (to_be_deceqed_x0 :: to_be_deceqed_xs1) (to_be_deceqed_x0 :: to_be_deceqed_xs1))\n```\nHowever, derivator fills the hole with expression `pure {f = Test.DepTyCheck.Gen.Gen} (A {xs = xs} {x = x})`, thus producing the error observed.","files":null},{"type":2,"timestamp":1660060878,"nonce":"J669X9DS9TT9XrjbjMBtNGRSvpE=","metadata":{"github-id":"RTE_lADOEt7lWM5Pey9ozwAAAAGqlXWD"},"title":"DecEq incorrectly used in derived generators","was":"Unification error after matching in `Yes Refl` inside derived generators"}]}