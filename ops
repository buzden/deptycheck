{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1740389874,"nonce":"ndBMZpc7s3+wXm2kkHac4f5voBU=","metadata":{"github-id":"I_kwDOEt7lWM6rUxx4","github-url":"https://github.com/buzden/deptycheck/issues/239","origin":"github"},"title":"Do not treat free variables passed to a single constructor as determining","message":"Consider the case where\n```idris\nrecord R where\n  constructor MkR\n  n : Nat\n  b : Bool\n\ndata Y : R -\u003e Type where\n  Y1 : Y $ MkR 5 True\n  Y2 : Y $ MkR a False\n\nf, g : Nat -\u003e Nat\n\ndata X : Type where\n  X1 : Fin (f n) -\u003e Y (MkR n True) -\u003e X\n  X2 : Fin (g n) -\u003e Y (MkR n _) -\u003e X\n```\n\nCurrently we treat `n` as determining for both explicit arguments of `X1`, however knowing that `MkR` is the only constructor for `R` we can say that the second one can be used for generating `n`. But this leads to a redesign of an internal derivation task.\n\nHowever, we can easily support a subset of this feature, when all of variables passed to the only constructor are free, like in `X2`. This requires only a slightly more complicated pattern matching on the result of generation.","files":null}]}