{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1660031086,"nonce":"gJ523vwXxM/0zS9g0XEDNMGgLps=","metadata":{"github-id":"I_kwDOEt7lWM5Pca5I","github-url":"https://github.com/buzden/deptycheck/issues/2","origin":"github"},"title":"Bad error message when configuration is insufficient","message":"# Steps to reproduce\n\nConsider a very simple module which asks for derivation of a generator:\n\n```idris\nimport Test.DepTyCheck.Gen.Auto\n\n%language ElabReflection\n\ng : Fuel -\u003e Gen Unit\ng = deriveGen\n```\n\n# Expected behaviour\n\nAll derives and typechecks OR a comprehensible error message giving a hint on what is wrong.\n\n# Observed behaviour\n\n```\nError: While processing right hand side of g. Bad elaborator script (canonicBody (MkGenSignature (MkTypeInfo (NS (MkNS [\"Builtin\"]) (UN (Basic \"Unit\"))) [] [MkCon (NS (\nMkNS [\"Builtin\"]) (UN (Basic \"MkUnit\"))) [] (IVar EmptyFC (NS (MkNS [\"Builtin\"]) (UN (Basic \"Unit\"))))]) (keySet (M Empty))) (nameForGen (MkGenSignature (MkTypeInfo (NS\n (MkNS [\"Builtin\"]) (UN (Basic \"Unit\"))) [] [MkCon (NS (MkNS [\"Builtin\"]) (UN (Basic \"MkUnit\"))) [] (IVar EmptyFC (NS (MkNS [\"Builtin\"]) (UN (Basic \"Unit\"))))]) (keySet\n (M Empty))))) .unRWST (fromList ((fromList ((MkGenExternals []) .externals \u003c\u0026\u003e (\\lamc =\u003e let (sig, _) = lamc in (sig, nameForGen sig)))) .asList \u003c\u0026\u003e (\\namedSig =\u003e (fst\n (internalise (fst namedSig)), namedSig)))) (M (M 0 (Leaf (MkGenSignature (MkTypeInfo (NS (MkNS [\"Builtin\"]) (UN (Basic \"Unit\"))) [] [MkCon (NS (MkNS [\"Builtin\"]) (UN (\nBasic \"MkUnit\"))) [] (IVar EmptyFC (NS (MkNS [\"Builtin\"]) (UN (Basic \"Unit\"))))]) (SetWrapper (M Empty))) (UN (Basic \"\u003cBuiltin.Unit\u003e[]\"))))) ([], []) (script is not a d\nata value).\n\nX:8:5--8:14\n 4 | \n 5 | %language ElabReflection\n 6 | \n 7 | g : Fuel -\u003e Gen Unit\n 8 | g = deriveGen\n         ^^^^^^^^^\n```","files":null}]}