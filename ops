{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1660049507,"nonce":"hxVG75ccjBJQl0x7ZwmA+iTBurA=","metadata":{"github-id":"I_kwDOEt7lWM5PdzrM","github-url":"https://github.com/buzden/deptycheck/issues/7","origin":"github"},"title":"Get rid of need for explicit ubiquitous fuel pattern","message":"Current generators of type `Gen` are explicitly finite. Thus, when we define recursive generators, we use fuel pattern everywhere, especially in derived generators. Actually, for simplicity, we use it always for derived generators, even when it is actually not needed.\n\nBy the way, using `Fuel -\u003e Gen ...` instead of just `Gen ...`, we run into problems in the compiler, e.g. idris-lang/Idris2#2522\n\nWe could have a possibly-infinite generators using co-data inside and to provide fuel only at the end of the day, when producing particular values.\n\nWe need to decide whether this is useful to have a distinction between *definitely finite* and *possibly infinite* generators, or not. This distinction makes it easier to run finite generators (no fuel required) but makes generators combinations and derivation more complex.","files":null}]}