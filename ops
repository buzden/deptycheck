{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1690301922,"nonce":"HlycFkX6q3C2y1cjpp3zuVaW7U0=","metadata":{"github-id":"I_kwDOEt7lWM5shXaS","github-url":"https://github.com/buzden/deptycheck/issues/78","origin":"github"},"title":"Support collection of a model coverage during generation","message":"It would be good to collect some information about *model coverage*, i.e. coverage in terms of the original data type (for derived generators) and/or coverage in terms of alternatives inside a generator.\n\nThe topic is not univocal, there are definitely a ton of ways how such coverage can be gained and how can it be represented. We'd like to increase slowly starting from collecting just which types and type families were present during a series of generation disregarding the position of this generation, say, in recursion; then we can continue with adding information about which particular constructors were actually used in generation in particular types or type families, again disregarding the position. Then, we can further refine this, say, by considering the position in the generation tree, or by considering coverage of constructors separately for different values of indices for indexed type families.\n\nFor the first two steps, there are at least the following steps to be done:\n\n- [ ] We need an elaboration script being given a data type family name, showing the list of all data type families that are used inside. This is needed to list all possible items of a coverage of type families (and their constructors).\n\n- [ ] A data structure indexed by a generation tree (i.e., a generator), which shows which alternative was used to generate this or that data value. This data structure would be returned by an alternative variant of `unGen`. Having additionally description values of `oneOf`s, using this indexed data structure, we can at least know which data type families were tried to generate a value.\n\n- [ ] Then, we can extend descriptions of `oneOf`s to contain particular information about particular constructors. It would allow us to evaluate model coverage more precisely. This all, of course, applied only to derived generators, and to generators, whose authors added descriptions corresponding to the derived ones.\n\n- [ ] Maybe, we need some structure on the descriptions, i.e. descriptions would be not just `Maybe String`, but some our custom `FromString` type, which may contain type itself, and, possibly, a `Vect` of subdescriptions for each alternative.\n\n- [ ] Maybe, we could invent some kind of a `%macro`, which can fill appropriate description of a hand-written generators.","files":null}]}