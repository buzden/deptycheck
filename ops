{"author":{"id":"c8b5e6f4594a39a69d740ff06f6530160b48ff53db7027c22c4091f811b01812"},"ops":[{"type":1,"timestamp":1695199937,"nonce":"ZuluYJ/1SBTF5PPun+3KcNpsvcE=","metadata":{"github-id":"I_kwDOEt7lWM5xhHpK","github-url":"https://github.com/buzden/deptycheck/issues/87","origin":"github"},"title":"Support structured labels","message":"Currently with the model coverage mechanism we can provide structured resulting information:\n\n```\nWhatever.FieldList.FieldIsTyped covered partially\n  - Here: covered\n  - There: not covered\n\nWhatever.FieldList.FieldList covered fully\n  - Ext: covered\n  - Nil: covered\n\nData.Fin.Fin covered fully\n  - FS: covered\n  - FZ: covered\n```\n\nTo achieve this, we are using labelling mechanism, which now supports only plain `String`s as labels.\n\nWe could\n- support typed labels, so we can say that this is mentioning of a type or a constructor, or something else; **open question**: if set of this types should be open or preset;\n- support structured labels, so we can say that e.g. a constructor label is a sublabel of a type label; using this, we could get such structured labelling information automatically; **open question**: currently, model coverage has a macro that calculates the full set of possible labels beforehand, but just addition of a support for structured labels won't give this ability, so this won't replace the current mechanism of model coverage; maybe, we should support additional labelling mechanism as \"potential labels\", i.e., a generator says \"oh, by the way, I can in theory use the following (structured) labels\"; will this impact runtime performance badly?","files":null}]}